<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Stc.Data.Certificate">
<Description>
Student's certificate.</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13360.224443</TimeCreated>

<Property name="Number">
<Description>
Certificate's unique number</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Training">
<Description>
Training</Description>
<Type>Training</Type>
<Required>1</Required>
</Property>

<Property name="Student">
<Description>
Student</Description>
<Type>Person</Type>
<Required>1</Required>
</Property>

<Property name="CreatedDate">
<Description>
Certificate's creation date</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="IsPrinted">
<Description>
Certificate is printed</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Index name="NumberIdx">
<Properties>Number</Properties>
<Unique>1</Unique>
</Index>

<Index name="KeyIdx">
<Properties>Training,Student</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.number = ..Number
	set proxy.training = ..Training.ConvertToProxyObject(1)
	set proxy.student = ..Student.ConvertToProxyObject()
	set proxy.date = $ZDATE(..CreatedDate, 3)
	set proxy.isPrinted = ..IsPrinted
	
	quit proxy
]]></Implementation>
</Method>

<Method name="CreateAll">
<Description>
Create all certificates for training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>training:Training,listOfStudents:%ListOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
		
	for i=1:1:listOfStudents.Count(){
		if (##class(Stc.Data.Certificate).KeyIdxExists(training.%Id(), listOfStudents.GetAt(i).%Id()) = 0){
			set cert = ..%New()
			set cert.Training = training
			set cert.Student = listOfStudents.GetAt(i)
			set cert.CreatedDate = training.DateFinish
			set cert.Number = ..GenerateNumber(training.DateFinish)
			set status = cert.%Save()
			
			if $$$ISERR(status) RETURN status
		}	
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="GenerateNumber">
<Description>
Generate certificate number.
Template: DDMMYY-number</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ddmmyy = $REPLACE($ZDATE(date, 4), "/", "")
	set $EXTRACT(ddmmyy, 5, 6) = ""
	
	set maxNumber = 0
	
	&sql(SELECT MAX(CONVERT(INTEGER, $PIECE(Number, '-', 2))) INTO :maxNumber
		 FROM Stc_Data.Certificate
		 WHERE $PIECE(Number, '-', 1) = :ddmmyy)
	
	set maxNumber = maxNumber + 1
	
	if (maxNumber < 10) set maxNumber = "0"_maxNumber	 
	
	quit ddmmyy_"-"_maxNumber
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CertificateD</DataLocation>
<DefaultData>CertificateDefaultData</DefaultData>
<IdLocation>^Stc.Data.CertificateD</IdLocation>
<IndexLocation>^Stc.Data.CertificateI</IndexLocation>
<StreamLocation>^Stc.Data.CertificateS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CertificateDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Number</Value>
</Value>
<Value name="3">
<Value>Training</Value>
</Value>
<Value name="4">
<Value>Student</Value>
</Value>
<Value name="5">
<Value>CreatedDate</Value>
</Value>
<Value name="6">
<Value>IsPrinted</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Company">
<Description>
Customer organization</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13287.262923</TimeCreated>

<Property name="FullName">
<Description>
Full name of organization</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="ShortName">
<Description>
Short name of organization</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="SettlementAccount">
<Description>
Settlement account of organizaton</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="CorrespondentAccount">
<Description>
Correspondent account of organization</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="BIC">
<Description>
Bank Identification Code</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="KPP">
<Description>
Code reason for registration</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="INN">
<Description>
Taxpayer identification number</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="OGRN">
<Description>
Main state registration number</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="LegalAddress">
<Description>
Legal address</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="MailAddress">
<Description>
Mail address</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Contact">
<Description>
Contact person</Description>
<Type>Person</Type>
</Property>

<Property name="WebSite">
<Description>
Web-site</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="IsUniversity">
<Description>
Organization is university</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="OtherInfo">
<Description>
Other information</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Type">
<Description>
Type of company - univer, partner etc.</Description>
<Type>Stc.Data.CompanyType</Type>
</Property>

<Property name="Employees">
<Description>
All employees</Description>
<Type>Stc.Data.Person</Type>
<Cardinality>many</Cardinality>
<Inverse>Company</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="City">
<Type>Region</Type>
</Property>

<Property name="ISISID">
<Description>
Integrated student information system</Description>
<Type>%String</Type>
</Property>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<FormalSpec>shortInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set proxy.id = ..%Id()
    set proxy.shortName = ..ShortName.Value
    set proxy.site = ..WebSite
    
    if (shortInfo = 1) quit proxy
    
    set proxy.fullName = ..FullName.Value
    set proxy.settlementAccount = ..SettlementAccount
    set proxy.correspondentAccount = ..CorrespondentAccount
    set proxy.isisID = ..ISISID
    set proxy.bic = ..BIC
    set proxy.kpp= ..KPP
    set proxy.inn = ..INN
    set proxy.ogrn = ..OGRN
    set proxy.legalAddress = ..LegalAddress.Value
    set proxy.mailAddress = ..MailAddress.Value
    set proxy.otherInfo = ..OtherInfo.Value
    
    set proxy.isUnknownCity = $$$NO
    if $ISOBJECT(..City){
        set proxy.city = ..City.ConvertToProxyObject()
    }
    else{
        set proxy.isUnknownCity = $$$YES
    }
    
    if $ISOBJECT(..Contact){
        set proxy.contact = ..Contact.ConvertToProxyObject()
    }
    
    set proxy.employeesNumber = ..Employees.Count()
    
    if (..Type.Code = "Univer"){
        set proxy.status = 1
    }
    else{
        set proxy.status = 0
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified organization</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Company</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", "ID="_data.id_"; ShortName="_$ZCONVERT(data.shortName, "I","UTF8"))
    
    if (data.id '= ""){
        set company = ..%OpenId(data.id,3,.status)
        set company.FullName.Value = $ZCONVERT(data.fullName, "I","UTF8")
        set company.ShortName.Value = $ZCONVERT(data.shortName, "I","UTF8")
        set company.LegalAddress.Value = $ZCONVERT(data.legalAddress, "I","UTF8")
        set company.MailAddress.Value = $ZCONVERT(data.mailAddress, "I","UTF8")
        set company.OtherInfo.Value = $ZCONVERT(data.otherInfo, "I","UTF8") 
    }
    else{
        set company = ..%New()
        set company.FullName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.fullName, "I","UTF8"))
        set company.ShortName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.shortName, "I","UTF8"))
        set company.LegalAddress = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.legalAddress, "I","UTF8"))
        set company.MailAddress = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.mailAddress, "I","UTF8"))
        set company.OtherInfo = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.otherInfo, "I","UTF8"))
    }
    
    
    
    if (data.isUnknownCity '= $$$YES) && $ISOBJECT(data.city){
        set company.City = ##class(Region).%OpenId(data.city.id)
    }
    else{
        set company.City = $$$NULLOREF
    }
    
    set company.ISISID = data.isisID
    set company.BIC = $ZCONVERT(data.bic, "I","UTF8")
    set company.OGRN = $ZCONVERT(data.ogrn, "I","UTF8")
    set company.INN = $ZCONVERT(data.inn, "I","UTF8")
    set company.SettlementAccount = $ZCONVERT(data.settlementAccount, "I","UTF8")
    set company.CorrespondentAccount = $ZCONVERT(data.correspondentAccount, "I","UTF8") 
    set company.KPP = $ZCONVERT(data.kpp, "I","UTF8")
    set company.WebSite = $REPLACE($REPLACE($ZCONVERT(data.site, "I","UTF8"),"http://",""), "https://","")
    
    if (data.status = 1){
        set company.Type = ##class(CompanyType).CodeIdxOpen("Univer")
    }
    else{
        set company.Type = ##class(CompanyType).CodeIdxOpen("Partner")
    }
    
    set status = company.%Save()
    
    quit company
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete organization, if it is available</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Delete", "ID="_id)
    
    set company = ..%OpenId(id,4,.status)
    quit:$$$ISERR(status) ##class(Stc.Utils.Msg).GetErrorStatus("openCompany", "| "_status)
    
    set findId = ""
    
    // Checking: if in applications
    &sql(SELECT ID INTO:findId FROM Stc_Data.Order WHERE Company = :id)
    if (findId = ""){
        // Checking: if has employees
        &sql(SELECT ID INTO:findId FROM Stc_Data.Person WHERE Company = :id)
        
        if (findId = ""){
            // Checking: if is payer for subgroup
            &sql(SELECT ID INTO:findId FROM Stc_Data.SubGroup WHERE Payer = :id)
            
            if (findId = ""){
                // Checking: in application from student
                &sql(SELECT ID INTO:findId FROM Stc_Data.OrderNewStudent WHERE Company = :id)   
            }   
        }
    }
    
    // Quit, if has links
    quit:findId'="" ##class(Stc.Utils.Msg).GetErrorStatus("deleteCompanyImpossible")
    
    // Delete localization
    set status = ##class(Stc.Data.Localization.LText).Delete(company.FullName.%Id())
    quit:$$$ISERR(status) status
        
    set status = ##class(Stc.Data.Localization.LText).Delete(company.ShortName.%Id())
    quit:$$$ISERR(status) status
        
    set status = ##class(Stc.Data.Localization.LText).Delete(company.LegalAddress.%Id())
    quit:$$$ISERR(status) status
    
    set status = ##class(Stc.Data.Localization.LText).Delete(company.MailAddress.%Id())
    quit:$$$ISERR(status) status
    
    set status = ##class(Stc.Data.Localization.LText).Delete(company.OtherInfo.%Id())
    quit:$$$ISERR(status) status
    
    // Delete organization
    set status = ..%DeleteId(id, 4)
    quit:$$$ISERR(status) ##class(Stc.Utils.Msg).GetErrorStatus("deleteCompany", "| "_status)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateCity">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    &sql(DECLARE CmpCur CURSOR FOR 
         SELECT ID
         FROM Stc_Data.Company
         WHERE LegalAddress->Value <> '')   
    
    &sql(OPEN CmpCur)
    for  
    {   
        &sql(FETCH CmpCur INTO :cmpId) 
        quit:(SQLCODE '= 0)
        
        set cmp = ..%OpenId(cmpId)
        w !,!,"Company ID=",cmpId," Name=",cmp.ShortName.Value
        w !,"LegalAddress = ",cmp.LegalAddress.Value
        
        set cityName = $P(cmp.LegalAddress.Value, ",", 2)
        set cityId = ""
        &sql(SELECT ID INTO :cityId FROM Stc_Data.Region WHERE HLevel = 2 AND Name->Value = TRIM(BOTH ' ' FROM :cityName))
        
        set newCity = ##class(Region).%OpenId(cityId, , .st)
        if $$$ISERR(st){
            w !,"City not found = ",cityName
            continue
        }
        
        w !,"CityName     = "_$REPLACE(cityName, " ", "")
        w !,"Founded city = "_newCity.Name.Value,", ",newCity.ParentRegion.Name.Value,", ",newCity.ParentRegion.ParentRegion.Name.Value     
    
        set cmp.City = newCity
        do cmp.%Save()
    }
    
    &sql(CLOSE CmpCur)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CompanyD</DataLocation>
<DefaultData>CompanyDefaultData</DefaultData>
<IdLocation>^Stc.Data.CompanyD</IdLocation>
<IndexLocation>^Stc.Data.CompanyI</IndexLocation>
<StreamLocation>^Stc.Data.CompanyS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompanyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FullName</Value>
</Value>
<Value name="3">
<Value>ShortName</Value>
</Value>
<Value name="4">
<Value>SettlementAccount</Value>
</Value>
<Value name="5">
<Value>CorrespondentAccount</Value>
</Value>
<Value name="6">
<Value>BIC</Value>
</Value>
<Value name="7">
<Value>KPP</Value>
</Value>
<Value name="8">
<Value>INN</Value>
</Value>
<Value name="9">
<Value>OGRN</Value>
</Value>
<Value name="10">
<Value>LegalAddress</Value>
</Value>
<Value name="11">
<Value>MailAddress</Value>
</Value>
<Value name="12">
<Value>Contact</Value>
</Value>
<Value name="13">
<Value>WebSite</Value>
</Value>
<Value name="14">
<Value>OtherInfo</Value>
</Value>
<Value name="15">
<Value>IsUniversity</Value>
</Value>
<Value name="16">
<Value>Type</Value>
</Value>
<Value name="17">
<Value>City</Value>
</Value>
<Value name="18">
<Value>ISISID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.CompanyType">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63267,64468.392265</TimeCreated>

<Property name="Name">
<Description>
Type name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Description>
Type code</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CompanyTypeD</DataLocation>
<DefaultData>CompanyTypeDefaultData</DefaultData>
<IdLocation>^Stc.Data.CompanyTypeD</IdLocation>
<IndexLocation>^Stc.Data.CompanyTypeI</IndexLocation>
<StreamLocation>^Stc.Data.CompanyTypeS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompanyTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Course">
<Description>
Course</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,13286.897066</TimeCreated>

<Property name="Name">
<Description>
Name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Description">
<Description>
Description</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Hours">
<Description>
Duration (in hours)</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Days">
<Description>
Duration (in days)</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="ProgramUrl">
<Description>
Link to course syllabus</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2500"/>
</Property>

<Property name="Teachers">
<Description>
Teachers</Description>
<Type>Person</Type>
<Collection>array</Collection>
</Property>

<Property name="IsInUse">
<Description>
Is active</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Price">
<Description>
Price of course</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Currency">
<Description>
Currency</Description>
<Type>Currency</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="YandexPlacemarkPreset">
<Type>%String</Type>
<InitialExpression>"islands#blackIcon"</InitialExpression>
</Property>

<Property name="DifficultyCoefficient">
<Description>
Difficulty coefficient</Description>
<Type>%Float</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="HourPayout">
<Description>
Payout for teacher services (1 hour)</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IsPublic">
<Description>
Is public training or not (shows in calendar)</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="RecalcYandexPresets">
<Description>
do ##class(Stc.Data.Course).RecalcYandexPresets()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set presets = $LB("islands#redIcon",
                 "islands#greenIcon",
                 "islands#blueIcon", 
                 "islands#orangeIcon", 
                 "islands#yellowIcon",
                 "islands#brownIcon",
                 "islands#oliveIcon",
                 "islands#violetIcon",
                 "islands#pinkIcon",
                 "islands#grayIcon",        
                 "islands#lightBlueIcon",
                 "islands#blackIcon")
        
    set presetsCount = $LL(presets)
                 
    &sql(DECLARE CourseCur CURSOR FOR 
         SELECT Course, Count(Course) As CourseCount
         FROM Stc_Data.Training
         GROUP BY Course
         ORDER BY CourseCount DESC) 
    
    &sql(OPEN CourseCur)
    for  
    {   
        &sql(FETCH CourseCur INTO :courseId, :count) 
        quit:(SQLCODE '= 0)
        
        if (%ROWCOUNT > presetsCount)
        {
            set newPreset = $LIST(presets, presetsCount)
        }
        else
        {
            set newPreset = $LIST(presets, %ROWCOUNT) 
        }
        
        //w !, ":newPreset="_newPreset
        &sql(UPDATE Stc_Data.Course 
             SET YandexPlacemarkPreset = :newPreset 
             WHERE ID = :courseId AND (YandexPlacemarkPreset IS NULL OR YandexPlacemarkPreset <> :newPreset))
    }
    
    &sql(CLOSE CourseCur)
        
    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateOld">
<Description>
do ##class(Stc.Data.Course).UpdateOld()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
                
        &sql(DECLARE Course1Cur CURSOR FOR 
             SELECT ID
             FROM Stc_Data.Course)  
        
        &sql(OPEN Course1Cur)
        for  
        {   
            &sql(FETCH Course1Cur INTO :id) 
            quit:(SQLCODE '= 0)

            set course = ..%OpenId(id)
            set course.Description = ##class(Stc.Data.Localization.LText).Create("")
            do course.Description.SetValues(course.Name.%Id())
            $$$THROWONERROR(st, course.%Save())
        }
        
        &sql(CLOSE Course1Cur)
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<FormalSpec>shortInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set proxy.id = ..%Id()
    set proxy.name = ..Name.Value
    set proxy.description = ..Description.Value
    set proxy.isPublic = ..IsPublic
    
    if (shortInfo = 1) quit proxy
    
    set proxy.days = ..Days
    set proxy.hours = ..Hours
    set proxy.programUrl = ..ProgramUrl
    set proxy.isInUse = ..IsInUse
    set proxy.price = ..Price
    set proxy.hourPayout = ..HourPayout
    set proxy.difCoef = ..DifficultyCoefficient
    set proxy.currency = ..Currency.ConvertToProxyObject()
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified course</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Course</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", "ID="_data.id_"; Name="_$ZCONVERT(data.name, "I","UTF8"))
    
    if (data.id = ""){
        set course = ..%New()
        set course.Name = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.name, "I","UTF8"))
        set course.Description = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.description, "I","UTF8"))
    }
    else{
        set course = ..%OpenId(data.id)
        set course.Name.Value = $ZCONVERT(data.name, "I","UTF8")
        set course.Description.Value = $ZCONVERT(data.description, "I","UTF8")
    }
    
    set course.IsPublic = data.isPublic = $$$YES
    set course.Hours = $ZCONVERT(data.hours, "I","UTF8")
    set course.Days = $ZCONVERT(data.days, "I","UTF8")
    set course.ProgramUrl = $REPLACE($REPLACE($ZCONVERT(data.programUrl, "I","UTF8"),"http://",""), "https://","")
    set course.Price = data.price
    set course.HourPayout = data.hourPayout
    set course.DifficultyCoefficient = data.difCoef
    set course.Currency = ##class(Stc.Data.Currency).%OpenId(data.currency.id)
    
    set status = course.%Save()
    do ##class(Stc.Data.Course).RecalcYandexPresets()
    quit course
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CourseD</DataLocation>
<DefaultData>CourseDefaultData</DefaultData>
<IdLocation>^Stc.Data.CourseD</IdLocation>
<IndexLocation>^Stc.Data.CourseI</IndexLocation>
<StreamLocation>^Stc.Data.CourseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CourseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Hours</Value>
</Value>
<Value name="4">
<Value>Days</Value>
</Value>
<Value name="5">
<Value>ProgramUrl</Value>
</Value>
<Value name="6">
<Value>IsInUse</Value>
</Value>
<Value name="7">
<Value>Price</Value>
</Value>
<Value name="8">
<Value>Currency</Value>
</Value>
<Value name="9">
<Value>YandexPlacemarkPreset</Value>
</Value>
<Value name="10">
<Value>Description</Value>
</Value>
<Value name="11">
<Value>DifficultyCoefficient</Value>
</Value>
<Value name="12">
<Value>HourPayout</Value>
</Value>
<Value name="13">
<Value>IsPublic</Value>
</Value>
</Data>
<Data name="Teachers">
<Attribute>Teachers</Attribute>
<Structure>subnode</Structure>
<Subscript>"Teachers"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Currency">
<Description>
Currency</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,14454.630552</TimeCreated>

<Property name="Name">
<Description>
Name of currency</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Description>
Code of currency</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name.Value
    set proxy.code = ..Code
    quit proxy
]]></Implementation>
</Method>

<Method name="UpdateCurrencyCode">
<Description>
do ##class(Stc.Data.Currency).UpdateCurrencyCode()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set obj = ..%OpenId(1)
    set obj.Code = "RUB"
    do obj.%Save()
    
    set obj = ..%OpenId(2)
    set obj.Code = "USD"
    do obj.%Save()
    
    set obj = ..%OpenId(3)
    set obj.Code = "EUR"
    do obj.%Save()
    
    set obj = ..%OpenId(4)
    if '$ISOBJECT(obj){
        set obj = ..%New()
        set obj.Name = ##class(Stc.Data.Localization.LText).Create("GBP")
        do obj.Name.SetValueByLang("Фунт стерлингов", "ru")
        do obj.Name.SetValueByLang("Pound Sterling", "en")
        set obj.Code = "GBP"
        do obj.%Save()
    }
    
    // GBP
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.CurrencyD</DataLocation>
<DefaultData>CurrencyDefaultData</DefaultData>
<IdLocation>^Stc.Data.CurrencyD</IdLocation>
<IndexLocation>^Stc.Data.CurrencyI</IndexLocation>
<StreamLocation>^Stc.Data.CurrencyS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CurrencyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.FeedBack">
<Description>
FeedBack (Survey)</Description>
<Super>%Persistent</Super>
<TimeCreated>63228,84673.864246</TimeCreated>

<Property name="Author">
<Description>
Author of feedback  </Description>
<Type>%String</Type>
</Property>

<Property name="Training">
<Description>
Training</Description>
<Type>Stc.Data.Training</Type>
<Cardinality>parent</Cardinality>
<Inverse>FeedBacks</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="CreatedTS">
<Description>
Date time feedback creation </Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Items">
<Description>
FeedBacks items</Description>
<Type>Stc.Data.FeedBackItem</Type>
<Cardinality>children</Cardinality>
<Inverse>FeedBack</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="AvgCourseRating">
<Type>%Double</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {AvgCourseRating} = ##class({%%CLASSNAME}).GetAvgCourseRating({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="AvgInstructorRating">
<Type>%Double</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {AvgInstructorRating} = ##class({%%CLASSNAME}).GetAvgInstructorRating({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="TrainingIdx">
<Properties>Training</Properties>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.createdTS = ..CreatedTS
    set proxy.author = ..Author
    set proxy.avgCourseRating = ..AvgCourseRating
    set proxy.avgInstructorRating = ..AvgInstructorRating
    
    set proxy.items = ##class(%ListOfObjects).%New()
    for i=1:1:..Items.Count(){
        do proxy.items.Insert(..Items.GetAt(i).ConvertToProxyObject())
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    set ..CreatedTS = $ZDATETIME($NOW(), 3)
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st:%Status]]></FormalSpec>
<ReturnType>FeedBack</ReturnType>
<Implementation><![CDATA[
    set fb = ..%New()
    set fb.Author = data.author
    set fb.Training = ##class(Training).%OpenId(data.trainingId)
    
    for i=1:1:data.items.Count(){
        set proxyFbItem = data.items.GetAt(i)
        
        set fbItem = ##class(FeedBackItem).%New()
        set fbItem.Type = ##class(FeedBackItemType).%OpenId(proxyFbItem.type.id)
        set fbItem.ScaleValue = proxyFbItem.scaleValue
        set fbItem.TextValue = proxyFbItem.textValue
        do fb.Items.Insert(fbItem)
    } 
    
    set st = fb.%Save()
    
    quit fb
]]></Implementation>
</Method>

<Method name="GetAvgInstructorRating">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
    set res = 0
    &sql(SELECT ROUND(AVG(ScaleValue), 2) INTO :res
         FROM Stc_Data.FeedBackItem
         WHERE FeedBack = :id AND Type->IsScaleType = 1 AND Type->GroupType->Code = 'Instructor')
         
    quit res
]]></Implementation>
</Method>

<Method name="GetAvgCourseRating">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
    set res = 0
    &sql(SELECT ROUND(AVG(ScaleValue), 2) INTO :res
         FROM Stc_Data.FeedBackItem
         WHERE FeedBack = :id AND Type->IsScaleType = 1 AND Type->GroupType->Code = 'Instructor Nonspecific')
         
    quit res
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("FeedBacks")</DataLocation>
<DefaultData>FeedBackDefaultData</DefaultData>
<IdLocation>^Stc.Data.TrainingC("FeedBacks")</IdLocation>
<IndexLocation>^Stc.Data.FeedBackI</IndexLocation>
<StreamLocation>^Stc.Data.FeedBackS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FeedBackDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Author</Value>
</Value>
<Value name="3">
<Value>CreatedTS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.FeedBackItem">
<Description>
Item of the feedback</Description>
<Super>%Persistent</Super>
<TimeCreated>63745,58089.628683</TimeCreated>

<Property name="Type">
<Description>
Type of the feedback</Description>
<Type>Stc.Data.FeedBackItemType</Type>
<Required>1</Required>
</Property>

<Property name="TextValue">
<Description>
Text value of item</Description>
<Type>%Text</Type>
<Parameter name="MAXLEN" value="4000"/>
</Property>

<Property name="ScaleValue">
<Description>
Scale value of item (rating)</Description>
<Type>%Integer</Type>
</Property>

<Property name="FeedBack">
<Description>
FeedBack</Description>
<Type>Stc.Data.FeedBack</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="FeedBackIndex">
<Properties>FeedBack</Properties>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.type = ..Type.ConvertToProxyObject()
    set proxy.typeSeqNumber = ..Type.SeqNumber
    set proxy.groupTypeCode = ..Type.GroupType.Code
    set proxy.textValue = ..TextValue
    set proxy.scaleValue = ..ScaleValue
    
    quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>FeedBackItemDefaultData</DefaultData>
<IdLocation>^Stc.Data.FeedBackC("Items")</IdLocation>
<IndexLocation>^Stc.Data.FeedBackItemI</IndexLocation>
<StreamLocation>^Stc.Data.FeedBackItemS</StreamLocation>
<Data name="FeedBackItemDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TextValue</Value>
</Value>
<Value name="3">
<Value>ScaleValue</Value>
</Value>
<Value name="4">
<Value>Type</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.FeedBackItemGroup">
<Description>
Group of feedback items </Description>
<Super>%Persistent</Super>
<TimeCreated>63745,59806.325576</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIndex">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name
    set proxy.code = ..Code

    quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.FeedBackItemGroupD</DataLocation>
<DefaultData>FeedBackItemGroupDefaultData</DefaultData>
<IdLocation>^Stc.Data.FeedBackItemGroupD</IdLocation>
<IndexLocation>^Stc.Data.FeedBackItemGroupI</IndexLocation>
<StreamLocation>^Stc.Data.FeedBackItemGroupS</StreamLocation>
<Data name="FeedBackItemGroupDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.FeedBackItemType">
<Description>
Type of the feedback item</Description>
<Super>%Persistent</Super>
<TimeCreated>63745,58416.633344</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="IsRequired">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="IsScaleType">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="SeqNumber">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="GroupType">
<Type>FeedBackItemGroup</Type>
<Required>1</Required>
</Property>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name
    set proxy.isActive = ..IsActive
    set proxy.isRequired = ..IsRequired
    set proxy.isScaleType = ..IsScaleType
    set proxy.seqNumber = ..SeqNumber
    set proxy.groupType = ..GroupType.ConvertToProxyObject()
   
    quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.FeedBackItemTypeD</DataLocation>
<DefaultData>FeedBackItemTypeDefaultData</DefaultData>
<IdLocation>^Stc.Data.FeedBackItemTypeD</IdLocation>
<IndexLocation>^Stc.Data.FeedBackItemTypeI</IndexLocation>
<StreamLocation>^Stc.Data.FeedBackItemTypeS</StreamLocation>
<Data name="FeedBackItemTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>IsActive</Value>
</Value>
<Value name="4">
<Value>IsRequired</Value>
</Value>
<Value name="5">
<Value>IsScaleType</Value>
</Value>
<Value name="6">
<Value>SeqNumber</Value>
</Value>
<Value name="7">
<Value>GroupName</Value>
</Value>
<Value name="8">
<Value>GroupType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Localization.LText">
<Description>
Localized property</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63142,65408.316829</TimeCreated>

<Property name="Guid">
<Description>
GUID = ID</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Value">
<Description>
Calculated property, returns string according to session's language</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {Value} = ##class({%%CLASSNAME}).GetValueById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="GuidIdx">
<IdKey>1</IdKey>
<Properties>Guid</Properties>
<Unique>1</Unique>
</Index>

<Property name="Values">
<Type>Stc.Data.Localization.LTextValue</Type>
<Cardinality>many</Cardinality>
<Inverse>LText</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ValueGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..GetValueById(..%Id())
]]></Implementation>
</Method>

<Method name="ValueSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).SetValue(value, ..%Id(), $$$SessionLanguage)
]]></Implementation>
</Method>

<Method name="GetValueByLang">
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%Text</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).GetValue(..%Id(), lang)
]]></Implementation>
</Method>

<Method name="SetValueByLang">
<FormalSpec>value:%Text,lang:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).SetValue(value, ..%Id(), lang)
]]></Implementation>
</Method>

<Method name="GetValueById">
<Description>
Getting string value for current language by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).GetValue(id, $$$SessionLanguage)
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Create multilanguage property. 
For each language creates record; if translation function not specified,
value will be same in all languages.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String,translateClassMethod:%String=""</FormalSpec>
<ReturnType>LText</ReturnType>
<Implementation><![CDATA[
	set ltxt = ..%New()
	set ltxt.Guid = $SYSTEM.Util.CreateGUID()
	 
	if $$$ISERR(ltxt.%Save()) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createLoc"))
	
	set ltxt.Value = value
	
	set currLang = $$$SessionLanguage
	
	&sql(DECLARE LangCurs CURSOR FOR 
		 SELECT ID
		 FROM Stc_Data_Localization.LTextLanguage
		 WHERE ID <> :currLang)	
		
	&sql(OPEN LangCurs)
	for  
	{	
		&sql(FETCH LangCurs INTO :langId) 
		quit:(SQLCODE '= 0)
	
		if (translateClassMethod = ""){
			do ##class(LTextValue).SetValue(value, ltxt.%Id(), langId)
		}
		else{
			do ##class(LTextValue).SetValue($CLASSMETHOD($P(translateClassMethod,";",1), $P(translateClassMethod,";",2), value, currLang, langId), ltxt.%Id(), langId)
		}
	}
		
	&sql(CLOSE LangCurs)
	
	quit ltxt
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete object from all languages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ##class(LTextValue).Delete(id)
	if $$$ISERR(status) quit status
	
	set status = ..%DeleteId(id,4)
	if $$$ISERR(status) quit ##class(Stc.Utils.Msg).GetErrorStatus("deleteLoc", " | "_status)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SetValues">
<Description>
Set value for current language</Description>
<FormalSpec>ltxtId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE LangCur CURSOR FOR 
		 SELECT ID
		 FROM Stc_Data_Localization.LTextLanguage)	
		
	&sql(OPEN LangCur)
	for  
	{	
		&sql(FETCH LangCur INTO :langId) 
		quit:(SQLCODE '= 0)
		
		set value = ##class(Stc.Data.Localization.LTextValue).GetValue(ltxtId, langId)
		do ##class(LTextValue).SetValue(value, ..%Id(), langId)
	}
		
	&sql(CLOSE LangCur)
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.Localization.LTextD</DataLocation>
<DefaultData>LTextDefaultData</DefaultData>
<IdLocation>^Stc.Data.Localization.LTextD</IdLocation>
<IndexLocation>^Stc.Data.Localization.LTextI</IndexLocation>
<StreamLocation>^Stc.Data.Localization.LTextS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Localization.LTextLanguage">
<Description>
Available languages</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63142,65488.745547</TimeCreated>

<Property name="Name">
<Description>
Name</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Code">
<Description>
Two-letter code = ID</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<IdKey>1</IdKey>
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Property name="Values">
<Type>Stc.Data.Localization.LTextValue</Type>
<Cardinality>many</Cardinality>
<Inverse>Lang</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.LocB126.LTextLanguageD</DataLocation>
<DefaultData>LTextLanguageDefaultData</DefaultData>
<IdLocation>^Stc.Data.LocB126.LTextLanguageD</IdLocation>
<IndexLocation>^Stc.Data.LocB126.LTextLanguageI</IndexLocation>
<StreamLocation>^Stc.Data.LocB126.LTextLanguageS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextLanguageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Localization.LTextValue">
<Description>
Localized string value - Lang for LText object</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63142,65463.16029</TimeCreated>

<Property name="LText">
<Description>
Intermediate object, get or set text for current language</Description>
<Type>Stc.Data.Localization.LText</Type>
<Cardinality>one</Cardinality>
<Inverse>Values</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="XELEMENT"/>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Lang">
<Description>
Language</Description>
<Type>Stc.Data.Localization.LTextLanguage</Type>
<Cardinality>one</Cardinality>
<Inverse>Values</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="XELEMENT"/>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Value">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Index name="KeyIdx">
<Properties>LText,Lang</Properties>
<Unique>1</Unique>
</Index>

<Index name="LangIdx">
<Properties>Lang</Properties>
</Index>

<Method name="GetValue">
<Description>
Get value for language=lang for object with id=ltxt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ltxt,lang</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// ISO 639-1
	set lang = $e(lang,1,2)
	set value = "! no value for [ISO 639-1] lang="_lang
	
	set id = $O(^Stc.Data.LocaliB126.LTextValueI("KeyIdx",ltxt,lang,""))
	quit $LISTGET(^Stc.Data.LocaliB126.LTextValueD(id), 4)
]]></Implementation>
</Method>

<Method name="SetValue">
<Description>
Set value for language=lang for object with id=ltxt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value,ltxt,lang</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(UPDATE Stc_Data_Localization.LTextValue (Value) VALUES (:value) 
	     WHERE LText = :ltxt AND Lang = :lang)
	
	if (SQLCODE = 100){
		set lv = ..%New()
		set lv.Lang = ##class(LTextLanguage).%OpenId(lang)
		set lv.LText = ##class(LText).%OpenId(ltxt)
		set lv.Value = value
		set sc = lv.%Save()
		if $$$ISERR(sc) quit ##class(Stc.Utils.Msg).GetErrorStatus("saveLoc", "| "_sc)
	}
	elseif (SQLCODE '= 0) {
		quit ##class(Stc.Utils.Msg).GetErrorStatus("saveLoc", "| SQLCODE="_SQLCODE)
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete all values for all languages for object LText</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ltxt</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DELETE FROM Stc_Data_Localization.LTextValue WHERE LText = :ltxt)
	if (SQLCODE '= 0) && (SQLCODE '= 100) quit ##class(Stc.Utils.Msg).GetErrorStatus("deleteLoc", " | SQLCODE="_SQLCODE)
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.LocaliB126.LTextValueD</DataLocation>
<DefaultData>LTextValueDefaultData</DefaultData>
<IdLocation>^Stc.Data.LocaliB126.LTextValueD</IdLocation>
<IndexLocation>^Stc.Data.LocaliB126.LTextValueI</IndexLocation>
<StreamLocation>^Stc.Data.LocaliB126.LTextValueS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextValueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LText</Value>
</Value>
<Value name="3">
<Value>Lang</Value>
</Value>
<Value name="4">
<Value>Value</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Localization.Translation">
<Description>
Class for text translation</Description>
<TimeCreated>63142,65508.32117</TimeCreated>

<Method name="PersonLTextValue">
<Description>
Name translation method; if language is unknown, returns input string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inputStr:%Text,fromLang:%String,toLang:%String</FormalSpec>
<ReturnType>%Text</ReturnType>
<Implementation><![CDATA[
	set outputStr = ""
	
	for i=1:1:$L(inputStr){
		set inputChar = $E(inputStr, i)
		set lower = $ZCONVERT(inputChar, "L")
		set outputChar = $GET(^CacheMsg("Stc", fromLang, toLang, lower), inputChar)
		if (lower '= inputChar) set outputChar = $ZCONVERT($E(outputChar, 1), "U")_$E(outputChar, 2, *)
		set outputStr = outputStr_outputChar
	}
	
	quit outputStr
]]></Implementation>
</Method>

<Method name="Init">
<Description>
Translation dictionary</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^CacheMsg("Stc", "ru", "en", "а") = "a"
	set ^CacheMsg("Stc", "ru", "en", "б") = "b"
	set ^CacheMsg("Stc", "ru", "en", "в") = "v"
	set ^CacheMsg("Stc", "ru", "en", "г") = "g"
	set ^CacheMsg("Stc", "ru", "en", "д") = "d"
	set ^CacheMsg("Stc", "ru", "en", "е") = "e"
	set ^CacheMsg("Stc", "ru", "en", "ё") = "e"
	set ^CacheMsg("Stc", "ru", "en", "ж") = "zh"
	set ^CacheMsg("Stc", "ru", "en", "з") = "z"
	set ^CacheMsg("Stc", "ru", "en", "и") = "i"
	set ^CacheMsg("Stc", "ru", "en", "й") = "y"
	set ^CacheMsg("Stc", "ru", "en", "к") = "k"
	set ^CacheMsg("Stc", "ru", "en", "л") = "l"
	set ^CacheMsg("Stc", "ru", "en", "м") = "m"
	set ^CacheMsg("Stc", "ru", "en", "н") = "n"
	set ^CacheMsg("Stc", "ru", "en", "о") = "o"
	set ^CacheMsg("Stc", "ru", "en", "п") = "p"
	set ^CacheMsg("Stc", "ru", "en", "р") = "r"	
	set ^CacheMsg("Stc", "ru", "en", "с") = "s"
	set ^CacheMsg("Stc", "ru", "en", "т") = "t"
	set ^CacheMsg("Stc", "ru", "en", "у") = "u"
	set ^CacheMsg("Stc", "ru", "en", "ф") = "f"
	set ^CacheMsg("Stc", "ru", "en", "х") = "kh"
	set ^CacheMsg("Stc", "ru", "en", "ц") = "ts"
	set ^CacheMsg("Stc", "ru", "en", "ч") = "ch"
	set ^CacheMsg("Stc", "ru", "en", "ш") = "sh"
	set ^CacheMsg("Stc", "ru", "en", "щ") = "shch"	
	set ^CacheMsg("Stc", "ru", "en", "ь") = ""
	set ^CacheMsg("Stc", "ru", "en", "ъ") = ""
	set ^CacheMsg("Stc", "ru", "en", "ы") = ""
	set ^CacheMsg("Stc", "ru", "en", "э") = "e"
	set ^CacheMsg("Stc", "ru", "en", "ю") = "yu"
	set ^CacheMsg("Stc", "ru", "en", "я") = "ya"
	
	// Reverse translation is not good enough
	set ^CacheMsg("Stc", "en", "ru", "a") = "а"
	set ^CacheMsg("Stc", "en", "ru", "b") = "б"
	set ^CacheMsg("Stc", "en", "ru", "c") = "ц"
	set ^CacheMsg("Stc", "en", "ru", "d") = "д"
	set ^CacheMsg("Stc", "en", "ru", "e") = "е"
	set ^CacheMsg("Stc", "en", "ru", "f") = "ф"
	set ^CacheMsg("Stc", "en", "ru", "g") = "ж"
	set ^CacheMsg("Stc", "en", "ru", "h") = "ш"
	set ^CacheMsg("Stc", "en", "ru", "i") = "и"
	set ^CacheMsg("Stc", "en", "ru", "j") = "й"
	set ^CacheMsg("Stc", "en", "ru", "k") = "к"
	set ^CacheMsg("Stc", "en", "ru", "l") = "л"
	set ^CacheMsg("Stc", "en", "ru", "m") = "м"
	set ^CacheMsg("Stc", "en", "ru", "n") = "н"
	set ^CacheMsg("Stc", "en", "ru", "o") = "о"
	set ^CacheMsg("Stc", "en", "ru", "p") = "п"
	set ^CacheMsg("Stc", "en", "ru", "r") = "р"
	set ^CacheMsg("Stc", "en", "ru", "s") = "с"	
	set ^CacheMsg("Stc", "en", "ru", "q") = "ку"
	set ^CacheMsg("Stc", "en", "ru", "t") = "т"
	set ^CacheMsg("Stc", "en", "ru", "u") = "у"
	set ^CacheMsg("Stc", "en", "ru", "v") = "в"
	set ^CacheMsg("Stc", "en", "ru", "w") = "в"
	set ^CacheMsg("Stc", "en", "ru", "x") = "кс"
	set ^CacheMsg("Stc", "en", "ru", "y") = "у"
	set ^CacheMsg("Stc", "en", "ru", "z") = "з"
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Data.MailingGroup">
<Description>
Mailing group. Group has items (subscribers)</Description>
<Super>%Persistent</Super>
<TimeCreated>63387,80192.527554</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Description">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Property name="MailSubject">
<Description>
Message pattern</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="MailMessage">
<Description>
Message pattern</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="AccessCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="AccessCodeIdx">
<Properties>AccessCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.code = ..AccessCode
    set proxy.name = ..Name
    set proxy.description = ..Description
    set proxy.mailSubject = ..MailSubject.Value
    set proxy.mailMessage = ..MailMessage.Value
    
    &sql(SELECT COUNT(ID) INTO :proxy.itemsCount FROM Stc_Data.MailingItemApproved WHERE MGroup = :proxy.id)
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st=$$$OK]]></FormalSpec>
<ReturnType>MailingGroup</ReturnType>
<Implementation><![CDATA[
    #dim group As MailingGroup = ""
    
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
    "ID="_data.id_
    "; Name="_$ZCONVERT(data.name, "I","UTF8")_
    "; Descr="_$ZCONVERT(data.description, "I","UTF8"))
    
    if (data.id = ""){
        set group = ..%New()
        set group.AccessCode = $SYSTEM.Util.CreateGUID()
        set group.MailSubject = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.mailSubject, "I", "UTF8"))
        set group.MailMessage = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.mailMessage, "I", "UTF8"))
    }
    else{
        set group = ..%OpenId(data.id)
        set group.MailSubject.Value = $ZCONVERT(data.mailSubject, "I", "UTF8")
        set group.MailMessage.Value = $ZCONVERT(data.mailMessage, "I", "UTF8")
    }
    
    set group.Name = $ZCVT(data.name, "I", "UTF8")
    set group.Description = $ZCVT(data.description, "I", "UTF8")
    
    set st = group.%Save()
    
    quit group
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete group</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>grId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set group = ..%OpenId(grId, 4)

    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Delete", "ID="_grId_"; Name="_group.Name)
    
    set st = ##class(Stc.Data.Localization.LText).Delete(group.MailSubject.%Id())
    quit:$$$ISERR(st) st
        
    set st = ##class(Stc.Data.Localization.LText).Delete(group.MailMessage.%Id())
    quit:$$$ISERR(st) st
    
    set st = ..%DeleteId(grId, 4)
    quit:$$$ISERR(st) ##class(Stc.Utils.Msg).GetErrorStatus("deleteMailingGroup", " | "_st) 
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAnnouncementGroup">
<Description>
Get special group for subscribers</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>MailingGroup</ReturnType>
<Implementation><![CDATA[
    if (..AccessCodeIdxExists("Announcement")){
        quit ..AccessCodeIdxOpen("Announcement")
    }
    
    set gr = ..%New()
    set gr.Name = "Subscribers "
    set gr.Description = "Subscribers"
    set gr.AccessCode = "Announcement"
    set gr.MailSubject = ##class(Stc.Data.Localization.LText).Create("")
    set gr.MailMessage = ##class(Stc.Data.Localization.LText).Create("")
    do gr.%Save()
    
    quit gr
]]></Implementation>
</Method>

<Method name="GetStudentsGroup">
<Description>
Get special group for students</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>MailingGroup</ReturnType>
<Implementation><![CDATA[
    if (..AccessCodeIdxExists("Students")){
        quit ..AccessCodeIdxOpen("Students")
    }
    
    set gr = ..%New()
    set gr.Name = "All students"
    set gr.Description = "All students from data base"
    set gr.AccessCode = "Students"
    set gr.MailSubject = ##class(Stc.Data.Localization.LText).Create("")
    set gr.MailMessage = ##class(Stc.Data.Localization.LText).Create("")
    do gr.%Save()
    
    quit gr
]]></Implementation>
</Method>

<Method name="GetOfficeGroup">
<Description>
Get special group for main company office ##class(Stc.Data.MailingGroup).GetOfficeGroup()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>MailingGroup</ReturnType>
<Implementation><![CDATA[
    if (..AccessCodeIdxExists("Office")){
        quit ..AccessCodeIdxOpen("Office")
    }
    
    set gr = ..%New()
    set gr.Name = "Office"
    set gr.Description = "Office"
    set gr.AccessCode = "Office"
    set gr.MailSubject = ##class(Stc.Data.Localization.LText).Create("")
    set gr.MailMessage = ##class(Stc.Data.Localization.LText).Create("")
    do gr.%Save()
    
    quit gr
]]></Implementation>
</Method>

<Method name="GetMailingItemsContacts">
<ClassMethod>1</ClassMethod>
<FormalSpec>grId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set contacts = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE MItemCur CURSOR FOR 
                 SELECT ID 
                 FROM Stc_Data.MailingItemApproved
                 WHERE MGroup = :grId
                 ORDER BY ItemFullName) 
            
    &sql(OPEN MItemCur)
    for  
    {   
        &sql(FETCH MItemCur INTO :id) 
        quit:(SQLCODE '= 0)
        
        set itemObj = ##class(MailingItemApproved).%OpenId(id)
        set itemObjProxy = itemObj.ConvertToProxyObject($$$NO)
        set itemObjProxy.name = itemObj.ItemFullName
        do contacts.Insert(itemObjProxy)    
    }
    &sql(CLOSE MItemCur)
    
    quit contacts
]]></Implementation>
</Method>

<Method name="GetMail">
<ClassMethod>1</ClassMethod>
<FormalSpec>grId:%String,trId:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set tr = ##class(Training).%OpenId(trId)
    set group = ..%OpenId(grId)
    
    set mail = ##class(%ZEN.proxyObject).%New()
    set mail.subject = ##class(Stc.Utils.Email).GetMailMessageWithTrainingData(group.MailSubject.Value, tr)
    set mail.message = ##class(Stc.Utils.Email).GetMailMessageWithTrainingData(group.MailMessage.Value, tr)
    
    set mail.message = $REPLACE(mail.message, "%JoinUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/order")
    set mail.message = $REPLACE(mail.message, "%UnsubscribeUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/mailing/subscription/%AccessCode")
    set mail.message = $REPLACE(mail.message, "%ListOfAttendeesUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode)
    
    set lang = $e($$$SessionLanguage,1,2)
    set mail.message = $REPLACE(mail.message, "%DownloadCertificatesUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomain()_##class(Stc.Data.Settings).GetWebAppUser()_"/text/"_lang_"/certificates/"_tr.AccessCode)
    
    quit mail
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingGroupD</DataLocation>
<DefaultData>MailingGroupDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingGroupD</IdLocation>
<IndexLocation>^Stc.Data.MailingGroupI</IndexLocation>
<StreamLocation>^Stc.Data.MailingGroupS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingGroupDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>AccessCode</Value>
</Value>
<Value name="5">
<Value>MailSubjectPattern</Value>
</Value>
<Value name="6">
<Value>MailMessagePattern</Value>
</Value>
<Value name="7">
<Value>MailSubject</Value>
</Value>
<Value name="8">
<Value>MailMessage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingItem">
<Description>
MailingItem (subscriber)</Description>
<Abstract>1</Abstract>
<TimeCreated>63387,80584.270425</TimeCreated>

<Property name="AccessCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="LastUpdated">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="MGroup">
<Type>MailingGroup</Type>
<Required>1</Required>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
Method ConvertToProxyObject() As %ZEN.proxyObject
{
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.fullName = ..FullName
	set proxy.email = ..Email
	set proxy.company = ..Company
	set proxy.position = ..Position
	set proxy.city = ..City
	set proxy.lastUpdated = ..LastUpdated
	set proxy.group = ..MGroup.ConvertToProxyObject()
	
	quit proxy
}

ClassMethod Save(data As %RegisteredObject, ByRef st = {$$$OK}) As MailingItem
{
	#dim item As MailingItem = ""
	
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
	"ID="_data.id_
	"; FullName="_$ZCONVERT(data.fullName, "I","UTF8")_
	"; Email="_$ZCONVERT(data.email, "I","UTF8")_
	"; Company="_$ZCONVERT(data.company, "I","UTF8")_
	"; Position="_$ZCONVERT(data.position, "I","UTF8")_
	"; MGroup="_data.group.id)
	
	if (data.id = ""){
		set item = ..%New()
		set item.AccessCode = $SYSTEM.Util.CreateGUID()
	}
	else{
		set item = ..%OpenId(data.id)
	}
	
	set item.MGroup = ##class(Stc.Data.MailingGroup).%OpenId(data.group.id,,.st)
	set item.FullName = $ZCVT(data.fullName, "I", "UTF8")
	if ($FIND(data.email, "@") > 0){
		set item.Email = $ZCONVERT(data.email, "I","UTF8")
	}
	
	set item.Company = $ZCVT(data.company, "I", "UTF8")
	set item.Position = $ZCVT(data.position, "I", "UTF8")
	set item.City = $ZCVT(data.city, "I", "UTF8")
	set item.LastUpdated = $ZDT($ZTS, 3)
	
	set st = item.%Save()
	
	quit item
}
*/
]]></Content>
</UDLText>
</Class>


<Class name="Stc.Data.MailingItemApproved">
<Description>
MailingItem - Approved, not spam</Description>
<Super>%Persistent,MailingItem</Super>
<TimeCreated>63388,39489.590838</TimeCreated>

<Property name="ItemFullName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ItemFullName} = ##class({%%CLASSNAME}).GetItemFullNameById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ItemEmail">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ItemEmail} = ##class({%%CLASSNAME}).GetItemEmailById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ItemCity">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ItemCity} = ##class({%%CLASSNAME}).GetItemCityById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ItemCompany">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ItemCompany} = ##class({%%CLASSNAME}).GetItemCompanyById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ItemPosition">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ItemPosition} = ##class({%%CLASSNAME}).GetItemPositionById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="AccessCodeIdx">
<Properties>AccessCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetItemFullNameById">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set item = ##class(MailingItemApproved).%OpenId(itemId)
	quit $CASE($CLASSNAME(item), "Stc.Data.MailingItemApprovedSubscriber": item.FullName,
								 "Stc.Data.MailingItemApprovedStudent": item.Student.FullName,
								 : "-")
]]></Implementation>
</Method>

<Method name="GetItemEmailById">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set item = ##class(MailingItemApproved).%OpenId(itemId)
	quit $CASE($CLASSNAME(item), "Stc.Data.MailingItemApprovedSubscriber": item.Email,
								 "Stc.Data.MailingItemApprovedStudent": item.Student.Email,
								 : "-")
]]></Implementation>
</Method>

<Method name="GetItemCityById">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set item = ##class(MailingItemApproved).%OpenId(itemId)
	quit $CASE($CLASSNAME(item), "Stc.Data.MailingItemApprovedSubscriber": item.City,
								 "Stc.Data.MailingItemApprovedStudent": item.City.Name.Value,
								 : "-")
]]></Implementation>
</Method>

<Method name="GetItemCompanyById">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set item = ##class(MailingItemApproved).%OpenId(itemId)
	quit $CASE($CLASSNAME(item), "Stc.Data.MailingItemApprovedSubscriber": item.Company,
								 "Stc.Data.MailingItemApprovedStudent": item.Student.Company.ShortName.Value,
								 : "-")
]]></Implementation>
</Method>

<Method name="GetItemPositionById">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set item = ##class(MailingItemApproved).%OpenId(itemId)
	quit $CASE($CLASSNAME(item), "Stc.Data.MailingItemApprovedSubscriber": item.Position,
								 : "-")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingItemApprovedD</DataLocation>
<DefaultData>MailingItemApprovedDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingItemApprovedD</IdLocation>
<IndexLocation>^Stc.Data.MailingItemApprovedI</IndexLocation>
<StreamLocation>^Stc.Data.MailingItemApprovedS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingItemApprovedDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AccessCode</Value>
</Value>
<Value name="3">
<Value>LastUpdated</Value>
</Value>
<Value name="4">
<Value>MGroup</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingItemApprovedStudent">
<Super>MailingItemApproved</Super>
<TimeCreated>63492,82697.289485</TimeCreated>

<Property name="Student">
<Type>Person</Type>
<Required>1</Required>
</Property>

<Property name="City">
<Type>Region</Type>
<Required>1</Required>
</Property>

<Index name="StudentCityIdx">
<Properties>Student,City</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>fullInfo:%Boolean=1</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()

    set proxy.id = ..%Id()
    set proxy.studentId = ..Student.%Id()
    set proxy.type = "student"
    set proxy.fullName = ..Student.FullName
    set proxy.email = ..Student.Email
    set proxy.company = ..Student.Company.ShortName.Value
    set proxy.companyTypeCode = ..Student.Company.Type.Code
    
    set proxy.position = ""
    set proxy.city = ..City.Name.Value
    set proxy.lastUpdated = ..LastUpdated 
    
    if (fullInfo){
        set proxy.group = ..MGroup.ConvertToProxyObject()
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>MailingItemApprovedStudent</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    #dim item As MailingItemApprovedStudent = ""
    
    if (data.id = ""){
        set item = ..%New()
        set item.AccessCode = $SYSTEM.Util.CreateGUID()
        set item.MGroup = ##class(Stc.Data.MailingGroup).GetStudentsGroup()
        set item.Student = ##class(Person).%OpenId(data.studentId)
    }
    else{
        set item = ..%OpenId(data.id)
    }   
    
    set item.City = ##class(Region).%OpenId(data.cityId)
    set item.LastUpdated = $ZDT($ZTS, 3)
    
    set st = item.%Save()
    quit item
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>MailingItemApprovedStudentDefaultData</DefaultData>
<Data name="MailingItemApprovedStudentDefaultData">
<Subscript>"MailingItemApprovedStudent"</Subscript>
<Value name="1">
<Value>Student</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingItemApprovedSubscriber">
<Super>MailingItemApproved</Super>
<TimeCreated>63492,82696.872876</TimeCreated>

<Property name="FullName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Company">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Position">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="MGroupEmailIdx">
<Properties>MGroup,Email</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>fullInfo:%Boolean=1</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.type = "subscriber"
	set proxy.fullName = ..FullName
	set proxy.email = ..Email
	set proxy.company = ..Company
	set proxy.position = ..Position
	set proxy.city = ..City
	set proxy.lastUpdated = ..LastUpdated
	if (fullInfo){
		set proxy.group = ..MGroup.ConvertToProxyObject()
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetByEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String</FormalSpec>
<ReturnType>MailingItemApproved</ReturnType>
<Implementation><![CDATA[
	set id = ""
	
	&sql(SELECT ID INTO :id FROM Stc_Data.MailingItemApprovedSubscriber WHERE Email = :email)
	
	quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st=$$$OK]]></FormalSpec>
<ReturnType>MailingItem</ReturnType>
<Implementation><![CDATA[
	#dim item As MailingItem = ""
	
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
	"ID="_data.id_
	"; FullName="_$ZCONVERT(data.fullName, "I","UTF8")_
	"; Email="_$ZCONVERT(data.email, "I","UTF8")_
	"; Company="_$ZCONVERT(data.company, "I","UTF8")_
	"; Position="_$ZCONVERT(data.position, "I","UTF8")_
	"; MGroup="_data.group.id)
	
	if (data.id = ""){
		set item = ..%New()
		set item.AccessCode = $SYSTEM.Util.CreateGUID()
	}
	else{
		set item = ..%OpenId(data.id)
	}
	
	set item.MGroup = ##class(Stc.Data.MailingGroup).%OpenId(data.group.id,,.st)
	set item.FullName = $ZCVT(data.fullName, "I", "UTF8")
	if ($FIND(data.email, "@") > 0){
		set item.Email = $ZCONVERT(data.email, "I","UTF8")
	}
	
	set item.Company = $ZCVT(data.company, "I", "UTF8")
	set item.Position = $ZCVT(data.position, "I", "UTF8")
	set item.City = $ZCVT(data.city, "I", "UTF8")
	set item.LastUpdated = $ZDT($ZTS, 3)
	
	set st = item.%Save()
	
	quit item
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>MailingItemApprovedSubscriberDefaultData</DefaultData>
<Data name="MailingItemApprovedSubscriberDefaultData">
<Subscript>"MailingItemApprovedSubscriber"</Subscript>
<Value name="1">
<Value>FullName</Value>
</Value>
<Value name="2">
<Value>Email</Value>
</Value>
<Value name="3">
<Value>Company</Value>
</Value>
<Value name="4">
<Value>Position</Value>
</Value>
<Value name="5">
<Value>City</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingItemDirty">
<Description>
MailingItem. Dirty, for spam</Description>
<Super>%Persistent,MailingItem</Super>
<TimeCreated>63388,39362.069005</TimeCreated>

<Property name="FullName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Company">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Position">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="AccessCodeIdx">
<Properties>AccessCode</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.fullName = ..FullName
	set proxy.email = ..Email
	set proxy.company = ..Company
	set proxy.position = ..Position
	set proxy.city = ..City
	set proxy.lastUpdated = ..LastUpdated
	set proxy.group = ..MGroup.ConvertToProxyObject()
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st=$$$OK]]></FormalSpec>
<ReturnType>MailingItem</ReturnType>
<Implementation><![CDATA[
	#dim item As MailingItem = ""
	
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
	"ID="_data.id_
	"; FullName="_$ZCONVERT(data.fullName, "I","UTF8")_
	"; Email="_$ZCONVERT(data.email, "I","UTF8")_
	"; Company="_$ZCONVERT(data.company, "I","UTF8")_
	"; Position="_$ZCONVERT(data.position, "I","UTF8")_
	"; MGroup="_data.group.id)
	
	if (data.id = ""){
		set item = ..%New()
		set item.AccessCode = $SYSTEM.Util.CreateGUID()
	}
	else{
		set item = ..%OpenId(data.id)
	}
	
	set item.MGroup = ##class(Stc.Data.MailingGroup).%OpenId(data.group.id,,.st)
	set item.FullName = $ZCVT(data.fullName, "I", "UTF8")
	if ($FIND(data.email, "@") > 0){
		set item.Email = $ZCONVERT(data.email, "I","UTF8")
	}
	
	set item.Company = $ZCVT(data.company, "I", "UTF8")
	set item.Position = $ZCVT(data.position, "I", "UTF8")
	set item.City = $ZCVT(data.city, "I", "UTF8")
	set item.LastUpdated = $ZDT($ZTS, 3)
	
	set st = item.%Save()
	
	quit item
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingItemDirtyD</DataLocation>
<DefaultData>MailingItemDirtyDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingItemDirtyD</IdLocation>
<IndexLocation>^Stc.Data.MailingItemDirtyI</IndexLocation>
<StreamLocation>^Stc.Data.MailingItemDirtyS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingItemDirtyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AccessCode</Value>
</Value>
<Value name="3">
<Value>FullName</Value>
</Value>
<Value name="4">
<Value>Email</Value>
</Value>
<Value name="5">
<Value>Company</Value>
</Value>
<Value name="6">
<Value>Position</Value>
</Value>
<Value name="7">
<Value>LastUpdated</Value>
</Value>
<Value name="8">
<Value>MGroup</Value>
</Value>
<Value name="9">
<Value>City</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingJournal">
<Super>%Persistent</Super>
<TimeCreated>63399,51994.978925</TimeCreated>

<Property name="SendedTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="CreatedTS">
<Type>%TimeStamp</Type>
</Property>

<Property name="IsSended">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="RecipientEmail">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="RecipientName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Subject">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Message">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="9000"/>
</Property>

<Property name="Type">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="GroupNumber">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="IsSendedIdx">
<Properties>IsSended</Properties>
</Index>

<Index name="GroupNumberIndex">
<Properties>GroupNumber</Properties>
</Index>

<Method name="GetValidGroupNumber">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set nextNum = $GET(^Stc.Data.MailingJournal.GroupNumber, 1) + 1
	set ^Stc.Data.MailingJournal.GroupNumber = nextNum
	quit nextNum
]]></Implementation>
</Method>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,recipientName:%String,subject:%String,message:%Text,type:%String="",grNumber:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set obj = ..%New()
		
		set obj.Type = type
		set obj.GroupNumber = grNumber
		set obj.CreatedTS = $ZDT($ZTS, 3)		
		set obj.IsSended = $$$NO
		set obj.Subject = subject
		set obj.Message = message
		set obj.RecipientEmail = email
		set obj.RecipientName = recipientName
		
		if (obj.RecipientName = ""){
			&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.Person WHERE Email = :email)
			
			if (obj.RecipientName = ""){
				&sql(SELECT LastName || ' ' || FirstName INTO :obj.RecipientName FROM Stc_Data.Order WHERE Email = :email)	
				
				if (obj.RecipientName = ""){
					&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.MailingItemApprovedSubscriber WHERE Email = :email)	
			
					if (obj.RecipientName = ""){
						&sql(SELECT FullName INTO :obj.RecipientName FROM Stc_Data.MailingItemDirty WHERE Email = :email)	
					}
				}
			}
		}
		
		do obj.%Save()
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create("MailingJournal Catch block", $SYSTEM.Status.GetErrorText(st))
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>contacts:%ListOfObjects,subject:%String,message:%Text,type:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set grNumber = ..GetValidGroupNumber()
	for i=1:1:contacts.Count(){
		set contact = contacts.GetAt(i)
		do ..Create(contact.email, contact.name, subject, message, type, grNumber) 
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.isSended = ..IsSended
	set proxy.sendedTS = ..SendedTS
	set proxy.subject = ..Subject
	set proxy.message = ..Message
	set proxy.type = ..Type
	
	set proxy.recipient = ##class(%ZEN.proxyObject).%New()
	set proxy.recipient.name = ..RecipientName
	set proxy.recipient.email = ..RecipientEmail
	
	quit proxy
]]></Implementation>
</Method>

<Method name="StartSending">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		&sql(DECLARE MailCur CURSOR FOR 
			 	 SELECT ID 
			 	 FROM Stc_Data.MailingJournal
			 	 WHERE IsSended = 0
			 	 ORDER BY ID)	
			
		&sql(OPEN MailCur)
		for  
		{	
			&sql(FETCH MailCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			if (##class(Stc.Data.Settings).GetMailingStatus() = "Off") {
				do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending()", "MailingStatus is Off")
				return st
			}
			
			set mail = ..%OpenId(id, 4, .st)
			if $$$ISOK(st) && (mail.IsSended = $$$NO){
				set st = ##class(Stc.Utils.Email).Send(mail.RecipientEmail, mail.Subject, mail.Message)		
				if $$$ISOK(st){
					set mail.IsSended = $$$YES
					set mail.SendedTS = $ZDT($ZTS, 3)
					do mail.%Save()
				}
				else{
					do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending()", "MailId="_id_"; St="_$System.Status.GetErrorText(st))
				}
			}
			
			kill mail
		}
			
		&sql(CLOSE MailCur)
	}
	catch(ex){
		set st = ex.AsStatus()
		do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".StartSending() catch", $System.Status.GetErrorText(st))
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingJournalD</DataLocation>
<DefaultData>MailingJournalDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingJournalD</IdLocation>
<IndexLocation>^Stc.Data.MailingJournalI</IndexLocation>
<StreamLocation>^Stc.Data.MailingJournalS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingJournalDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedTS</Value>
</Value>
<Value name="3">
<Value>RecipientEmail</Value>
</Value>
<Value name="4">
<Value>RecipientName</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
<Value name="6">
<Value>Message</Value>
</Value>
<Value name="7">
<Value>SendedTS</Value>
</Value>
<Value name="8">
<Value>IsSended</Value>
</Value>
<Value name="9">
<Value>Type</Value>
</Value>
<Value name="10">
<Value>GeroupNumber</Value>
</Value>
<Value name="11">
<Value>GroupNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.MailingTrainingGroup">
<Super>%Persistent</Super>
<TimeCreated>63398,3420.122456</TimeCreated>

<Property name="Training">
<Type>Training</Type>
<Required>1</Required>
</Property>

<Property name="MGroup">
<Type>MailingGroup</Type>
<Required>1</Required>
</Property>

<Property name="IsAutoMailing">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="MailingIsCompleted">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Index name="CommonIdx">
<Properties>Training,MGroup</Properties>
<Unique>1</Unique>
</Index>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[tr:Training,gr:MailingGroup,isAutoMailing:%Boolean=1,&st]]></FormalSpec>
<ReturnType>MailingTrainingGroup</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set obj = ""
    
    if (..CommonIdxExists(tr.%Id(), gr.%Id()) = $$$YES){
        quit ..CommonIdxOpen(tr.%Id(), gr.%Id())    
    }
    
    set obj = ..%New()
    set obj.Training = tr
    set obj.MGroup = gr
    set obj.IsAutoMailing = isAutoMailing
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="CreateAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Training,isAutoMailing:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    &sql(DECLARE MGCur CURSOR FOR
            SELECT ID
            FROM Stc_Data.MailingGroup
            WHERE AccessCode NOT IN ('Students', 'Office')) 
        
    &sql(OPEN MGCur)
    for  
    {   
        &sql(FETCH MGCur INTO :id) 
        quit:(SQLCODE '= 0)
        
        do ..Create(tr, ##class(Stc.Data.MailingGroup).%OpenId(id), isAutoMailing, .st)
        
        $$$THROWONERROR(st, st) 
    }
    
    &sql(CLOSE MGCur)
    
    quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.MailingTrainingGroupD</DataLocation>
<DefaultData>MailingTrainingGroupDefaultData</DefaultData>
<IdLocation>^Stc.Data.MailingTrainingGroupD</IdLocation>
<IndexLocation>^Stc.Data.MailingTrainingGroupI</IndexLocation>
<StreamLocation>^Stc.Data.MailingTrainingGroupS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MailingTrainingGroupDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Training</Value>
</Value>
<Value name="3">
<Value>MGroup</Value>
</Value>
<Value name="4">
<Value>IsAutoMailing</Value>
</Value>
<Value name="5">
<Value>MailingIsCompleted</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Order">
<Description>
Application for training</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13893.822559</TimeCreated>

<Parameter name="DSTIME">
<Description>
Cube update parameter</Description>
<Default>auto</Default>
</Parameter>

<Property name="LastName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="MiddleName">
<Type>%String</Type>
</Property>

<Property name="Email">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Phone">
<Type>%String</Type>
</Property>

<Property name="Skype">
<Type>%String</Type>
</Property>

<Property name="Company">
<Description>
Organization</Description>
<Type>Company</Type>
</Property>

<Property name="CompanyString">
<Description>
Short name of new organization</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="CompanySite">
<Description>
Website of new organization</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="StudentsNumber">
<Description>
Students count</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Course">
<Description>
Training course</Description>
<Type>Course</Type>
<Required>1</Required>
</Property>

<Property name="CreatedTS">
<Description>
Application creation timestamp</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="OrderStatus">
<Description>
Application status</Description>
<Type>OrderStatus</Type>
<Required>1</Required>
</Property>

<Method name="SynchronizeCube">
<Description>
Synchronization cube</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(%DeepSee.Utils).%SynchronizeCube("OrderCube",0)
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.status = ..OrderStatus.ConvertToProxyObject()
	set proxy.course = ..Course.ConvertToProxyObject()
	
	set proxy.contact = ##class(%ZEN.proxyObject).%New()
	set proxy.contact.lastName = ..LastName
	set proxy.contact.firstName = ..FirstName
	set proxy.contact.middleName = ..MiddleName
	set proxy.contact.email = ..Email
	set proxy.contact.phone = ..Phone
	set proxy.contact.skype = ..Skype
	
	
	set proxy.contact.company = ##class(%ZEN.proxyObject).%New()

	if (..Company) {
		set proxy.contact.company = ..Company.ConvertToProxyObject(1)
		set proxy.contact.company.contact = ..Company.Contact.ConvertToProxyObject()
	}
	else{
		set proxy.contact.company.shortName = ..CompanyString
		set proxy.contact.company.site = ..CompanySite	
	}
	
	set proxy.createdTS = ..CreatedTS
	set proxy.studentsNumber = ..StudentsNumber
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Create "new" application</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Order</ReturnType>
<Implementation><![CDATA[
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Create", 
	"CourseId="_data.course.id_
	"; Contact="_$ZCONVERT(data.contact.lastName, "I","UTF8")_" "_$ZCONVERT(data.contact.firstName, "I","UTF8")_" "_$ZCONVERT(data.contact.middleName, "I","UTF8")_
	"; Email="_$ZCONVERT(data.contact.email, "I","UTF8")_
	"; Phone="_$ZCONVERT(data.contact.phone, "I","UTF8")_
	"; Skype="_$ZCONVERT(data.contact.skype, "I","UTF8")_
	"; Company="_$ZCONVERT(data.contact.company.notexist.name, "I", "UTF8")_
	"; StudentsNumber="_data.studentsNumber)
	
	set order = ..%New()
	
	set order.Course = ##class(Course).%OpenId(data.course.id)
		
	set order.FirstName = $ZCONVERT(data.contact.firstName, "I","UTF8")
	set order.LastName = $ZCONVERT(data.contact.lastName, "I","UTF8")
	set order.MiddleName = $ZCONVERT(data.contact.middleName, "I","UTF8")
		
	set order.Email = $ZCONVERT(data.contact.email, "I","UTF8")
	set order.Phone = $ZCONVERT(data.contact.phone, "I","UTF8")
	set order.Skype = $ZCONVERT(data.contact.skype, "I","UTF8")
	set order.StudentsNumber = data.studentsNumber
		
	if (data.contact.company.exist){ 
		set order.Company = ##class(Company).%OpenId(data.contact.company.exist.id)
	}
	
	if '(order.Company){
		// If organization is not selected then search by name,
		// if found - use it, else - new company with name
		set compName = $ZCONVERT(data.contact.company.notexist.name, "I","UTF8")
		set compId = ""
		&sql(SELECT ID INTO:compId FROM Stc_Data.Company WHERE ShortName->Value  = :compName)
		
		if (##class(Stc.Data.Company).%ExistsId(compId) = 0) {
			set order.CompanyString = $ZCONVERT(data.contact.company.notexist.name, "I","UTF8")
			set order.CompanySite = $REPLACE($REPLACE($ZCONVERT(data.contact.company.notexist.site, "I","UTF8"),"http://",""), "https://","")
		}
		else{
			set order.Company = ##class(Stc.Data.Company).%OpenId(compId,3,.st)
		}
	} 

	set order.CreatedTS = $ZDATETIME($ZTS, 3)
	set order.OrderStatus = ##class(OrderStatus).CodeIdxOpen("New")
		
	set st = order.%Save()
		
	quit order
]]></Implementation>
</Method>

<Method name="GetContactsForCourse">
<ClassMethod>1</ClassMethod>
<FormalSpec>crId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set contacts = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE OrdContactCur CURSOR FOR 
			 	 SELECT ID, LastName || ' ' || FirstName, Email 
			 	 FROM Stc_Data.Order
			 	 WHERE Course = :crId AND OrderStatus->Code = 'Approved'
			 	 ORDER BY LastName)	
			
	&sql(OPEN OrdContactCur)
	for  
	{	
		&sql(FETCH OrdContactCur INTO :id, :fullName, :email) 
		quit:(SQLCODE '= 0)
		
		set item = ##class(%ZEN.proxyObject).%New()
		set item.id = id
		set item.name = fullName
		set item.email = email
		do contacts.Insert(item)	
	}
	&sql(CLOSE OrdContactCur)
	
	quit contacts
]]></Implementation>
</Method>

<Method name="CloseOrdersByTraining">
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	&sql(DECLARE GrCur CURSOR FOR
			SELECT trSg.Training->Course, trSg.SubGroups, trSg.SubGroups->Payer, (SELECT COUNT(sgSt.Student) FROM Stc_Data.SubGroupStudent as sgSt WHERE sgSt.SubGroup = trSg.SubGroups)
			FROM Stc_Data.Training_SubGroups as trSg
			WHERE trSg.Training = :trId)
	&sql(OPEN GrCur)
	for
	{
		&sql(FETCH GrCur INTO :courseId, :sgId, :payerId, :stCount)
		quit:(SQLCODE '= 0)
		
		&sql(DECLARE OrdCur CURSOR FOR
				SELECT ID
				FROM Stc_Data.Order
				WHERE OrderStatus->Code = 'Approved' AND Company = :payerId AND Course = :courseId)
		&sql(OPEN OrdCur)
		for
		{
			&sql(FETCH OrdCur INTO :ordId)
			quit:(SQLCODE '= 0)
					
			set order = ..%OpenId(ordId)
					
			if (order.StudentsNumber <= stCount){
				set stCount = stCount - order.StudentsNumber
				set order.StudentsNumber = 0
				set order.OrderStatus = ##class(Stc.Data.OrderStatus).CodeIdxOpen("Closed")
			}
			else{
				set order.StudentsNumber = order.StudentsNumber - stCount
				set stCount = 0
			}
					
			$$$THROWONERROR(st, order.%Save())
		}
		&sql(CLOSE OrdCur)
	}
	&sql(CLOSE GrCur)
	
	quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.OrderD</DataLocation>
<DefaultData>OrderDefaultData</DefaultData>
<IdLocation>^Stc.Data.OrderD</IdLocation>
<IndexLocation>^Stc.Data.OrderI</IndexLocation>
<StreamLocation>^Stc.Data.OrderS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OrderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LastName</Value>
</Value>
<Value name="3">
<Value>FirstName</Value>
</Value>
<Value name="4">
<Value>MiddleName</Value>
</Value>
<Value name="5">
<Value>Email</Value>
</Value>
<Value name="6">
<Value>Phone</Value>
</Value>
<Value name="7">
<Value>Skype</Value>
</Value>
<Value name="8">
<Value>Company</Value>
</Value>
<Value name="9">
<Value>CompanyString</Value>
</Value>
<Value name="10">
<Value>CompanySite</Value>
</Value>
<Value name="11">
<Value>StudentsNumber</Value>
</Value>
<Value name="12">
<Value>Course</Value>
</Value>
<Value name="13">
<Value>CreatedTS</Value>
</Value>
<Value name="14">
<Value>OrderStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.OrderNewStudent">
<Description>
Application from student for given training</Description>
<Super>%Persistent</Super>
<TimeCreated>63175,13882.849108</TimeCreated>

<Property name="FirstName">
<Description>
First name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="LastName">
<Description>
Last name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="MiddleName">
<Description>
Middle name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Email">
<Description>
Email</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Phone">
<Description>
Phone</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Skype">
<Description>
Skype</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Company">
<Description>
Organization</Description>
<Type>Company</Type>
</Property>

<Property name="CompanyString">
<Description>
Organization short name</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="CreatedTS">
<Description>
Timastamp of application creation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Hash">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="CityForMailing">
<Type>Region</Type>
</Property>

<Property name="Training">
<Description>
Training</Description>
<Type>Stc.Data.Training</Type>
<Cardinality>one</Cardinality>
<Inverse>NewStudents</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Index name="TrainingIdx">
<Properties>Training</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.lastName = ..LastName.Value
	set proxy.firstName = ..FirstName.Value
	set proxy.middleName = ..MiddleName.Value
	set proxy.email = ..Email
	set proxy.phone = ..Phone
	set proxy.skype = ..Skype
	
	set proxy.training = ##class(%ZEN.proxyObject).%New()
	set proxy.training.id = ..Training.%Id()
	
	set proxy.company = ##class(%ZEN.proxyObject).%New()
	
	if (..Company) {
		set proxy.company = ..Company.ConvertToProxyObject(1)
		set proxy.company.contact = ..Company.Contact.ConvertToProxyObject()
	}
	else{
		set proxy.company.shortName = ..CompanyString	
	}
	
	set proxy.createdTS = ..CreatedTS
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Create application</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>OrderNewStudent</ReturnType>
<Implementation><![CDATA[
	set recordInfo =
	"TrID="_data.trainingId_
	"; LastName="_$ZCONVERT(data.contact.lastName, "I", "UTF8")_
	"; FirstName="_$ZCONVERT(data.contact.firstName, "I", "UTF8")_
	"; MiddleName="_$ZCONVERT(data.contact.lastName, "I", "UTF8")_
	"; Company="_$ZCONVERT(data.contact.company.notexist.name, "I", "UTF8")_
	"; Email="_data.contact.email_
	"; Phone="_data.contact.phone_
	"; Skype="_data.contact.skype 
	
	set recordHash = $SYSTEM.Encryption.MD5Hash(recordInfo)
	
	set SQLCODE = ""
	&sql(SELECT ID FROM Stc_Data.OrderNewStudent WHERE Hash = :recordHash)
	
	if (SQLCODE = 0){
		set status = ##class(Stc.Utils.Msg).GetErrorStatus("copyOfOrderNewStudent") 
		quit $$$NULLOREF
	}
	
	do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Create", recordInfo)
	
	set order = ..%New()
	set order.Hash = recordHash
	set order.Training = ##class(Stc.Data.Training).%OpenId(data.trainingId)
	
	if (order.Training.NewStudents.Count() > 30){
		set status = ##class(Stc.Utils.Msg).GetErrorStatus("tooMuchOrderNewStudent") 
		quit $$$NULLOREF
	} 
		
	set order.FirstName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.contact.firstName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
	set order.LastName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.contact.lastName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
	set order.MiddleName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.contact.middleName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
	set order.Email = $ZCONVERT(data.contact.email, "I","UTF8")
	set order.Phone = $ZCONVERT(data.contact.phone, "I","UTF8")
	set order.Skype = $ZCONVERT(data.contact.skype, "I","UTF8")
		
	if (data.contact.company.exist) set order.Company = ##class(Company).%OpenId(data.contact.company.exist.id)
		
	if '(order.Company){
		// If organization is not selected then search by name,
		// if found - use it, else - new company with name
		set compName = $ZCONVERT(data.contact.company.notexist.name, "I","UTF8")
		set compId = ""
		&sql(SELECT ID INTO:compId FROM Stc_Data.Company WHERE ShortName->Value  = :compName)
		if (##class(Stc.Data.Company).%ExistsId(compId) = 0) {
			set order.CompanyString = $ZCONVERT(data.contact.company.notexist.name, "I","UTF8")
		}
		else{
			set order.Company = ##class(Stc.Data.Company).%OpenId(compId,3,.status)
		}
	} 

	if (data.mailingOn){
		set order.CityForMailing = ##class(Stc.Data.Region).%OpenId(data.city.id)
	}

	set order.CreatedTS = $ZDT($ZTS, 3)	
		
	set status = order.%Save()
	if $$$ISERR(status) {
		set status = ##class(Stc.Utils.Msg).GetErrorStatus("createOrderNewStudent", "| "_status)
		quit $$$NULLOREF
	}
		
	quit order
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete application with localization</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>orderId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set order = ..%OpenId(orderId, 4, .sc)
	
	set st = ##class(Stc.Data.Localization.LText).Delete(order.LastName.%Id())
	quit:$$$ISERR(st) st
		
	set st = ##class(Stc.Data.Localization.LText).Delete(order.FirstName.%Id())
	quit:$$$ISERR(st) st
		
	set st = ##class(Stc.Data.Localization.LText).Delete(order.MiddleName.%Id())
	quit:$$$ISERR(st) st
	
	set st = ..%DeleteId(orderId,4)
	quit:$$$ISERR(st) ##class(Stc.Utils.Msg).GetErrorStatus("deleteOrderNewStudent", " | "_st) 
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.OrderNewStudentD</DataLocation>
<DefaultData>OrderNewStudentDefaultData</DefaultData>
<IdLocation>^Stc.Data.OrderNewStudentD</IdLocation>
<IndexLocation>^Stc.Data.OrderNewStudentI</IndexLocation>
<StreamLocation>^Stc.Data.OrderNewStudentS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OrderNewStudentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>MiddleName</Value>
</Value>
<Value name="5">
<Value>Email</Value>
</Value>
<Value name="6">
<Value>Phone</Value>
</Value>
<Value name="7">
<Value>Skype</Value>
</Value>
<Value name="8">
<Value>Company</Value>
</Value>
<Value name="9">
<Value>CompanyString</Value>
</Value>
<Value name="10">
<Value>CreatedTS</Value>
</Value>
<Value name="11">
<Value>Training</Value>
</Value>
<Value name="12">
<Value>Hash</Value>
</Value>
<Value name="13">
<Value>CityForMailing</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.OrderStatus">
<Description>
Current status of application</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,13359.687719</TimeCreated>

<Property name="Name">
<Description>
Status name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Description>
Application code</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.code = ..Code
	set proxy.name = ..Name.Value
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.OrderStatusD</DataLocation>
<DefaultData>OrderStatusDefaultData</DefaultData>
<IdLocation>^Stc.Data.OrderStatusD</IdLocation>
<IndexLocation>^Stc.Data.OrderStatusI</IndexLocation>
<StreamLocation>^Stc.Data.OrderStatusS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="OrderStatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Person">
<Description>
Organization's employee, teacher or student</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,13287.442379</TimeCreated>

<Property name="Company">
<Description>
Organization</Description>
<Type>Stc.Data.Company</Type>
<Cardinality>one</Cardinality>
<Inverse>Employees</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="XELEMENT"/>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="FirstName">
<Description>
First name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="LastName">
<Description>
Last name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="MiddleName">
<Description>
Middle name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="FullName">
<Description>
Calculated property, returns string - full name - need for deepsee</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FullName} = ##class({%%CLASSNAME}).GetFullName({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Email">
<Description>
Email</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Phone">
<Description>
Phone</Description>
<Type>%String</Type>
</Property>

<Property name="Skype">
<Description>
Skype</Description>
<Type>%String</Type>
</Property>

<Index name="CompanyIdx">
<Properties>Company</Properties>
</Index>

<Index name="EmailIdx">
<Properties>Email</Properties>
<Unique>1</Unique>
</Index>

<Method name="CheckDeletePrivilege">
<Description>
Check delete privilege</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    SET SQLCODE=""
    &sql(%CHECKPRIV DELETE ON Stc_Data.Person)
    if (SQLCODE = 100) quit ##class(Stc.Utils.Msg).GetErrorStatus("NoPrivilege", " USERNAME="_$USERNAME)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.lastName = ..LastName.Value
    set proxy.firstName = ..FirstName.Value
    set proxy.middleName = ..MiddleName.Value
    set proxy.email = ..Email
    set proxy.phone = ..Phone
    set proxy.skype = ..Skype
    
    set proxy.company = ..Company.ConvertToProxyObject(1)
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Stc.Data.Person</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
    "ID="_data.id_
    "; LastName="_$ZCONVERT(data.lastName, "I","UTF8")_
    "; FirstName="_$ZCONVERT(data.firstName, "I","UTF8")_
    "; MiddleName="_$ZCONVERT(data.middleName, "I","UTF8")_
    "; Email="_data.email_
    "; Phone="_data.phone)

    if (data.id '= ""){
        set person = ..%OpenId(data.id,3,.status)
        set person.LastName.Value = $ZCONVERT(data.lastName, "I","UTF8")
        set person.FirstName.Value = $ZCONVERT(data.firstName, "I","UTF8")
        set person.MiddleName.Value = $ZCONVERT(data.middleName, "I","UTF8")
    }
    else{
        set person = ..%New()
        set person.LastName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.lastName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
        set person.FirstName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.firstName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
        set person.MiddleName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.middleName, "I","UTF8"), "Stc.Data.Localization.Translation;PersonLTextValue")
    }
    
    set person.Email = $ZCONVERT(data.email, "I","UTF8")
    set person.Phone = $ZCONVERT(data.phone, "I","UTF8")
    set person.Skype = $ZCONVERT(data.skype, "I","UTF8")
    
    if (data.company.exist) set data.company.id = data.company.exist.id
    
    set person.Company = ##class(Stc.Data.Company).%OpenId(data.company.id,3,.status)
    
    set status = person.%Save()

    quit person
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete person if it is available</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set person = ..%OpenId(personId, 4)

    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Delete", "ID="_personId_"; LastName="_person.LastName.Value_"; FirstName="_person.FirstName.Value_"; Email="_person.Email)
    
    set st = ##class(Stc.Data.Localization.LText).Delete(person.LastName.%Id())
    quit:$$$ISERR(st) st
        
    set st = ##class(Stc.Data.Localization.LText).Delete(person.FirstName.%Id())
    quit:$$$ISERR(st) st
        
    set st = ##class(Stc.Data.Localization.LText).Delete(person.MiddleName.%Id())
    quit:$$$ISERR(st) st
    
    set st = ..%DeleteId(personId,4)
    quit:$$$ISERR(st) ##class(Stc.Utils.Msg).GetErrorStatus("deletePerson", " | "_st) 
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="IsEditable">
<Description>
Checking before deletion</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personId:%String,checkForDelete:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set id = ""
    set countId = ""
    
    // Checking: if is contact person of organization   
    &sql(SELECT ID INTO:id FROM Stc_Data.Company WHERE Contact = :personId)
    if (id = ""){
        // Checking: if in subgroup of training
        &sql(SELECT ID INTO:id FROM Stc_Data.SubGroupStudent WHERE Student = :personId)
        
        if (id = ""){
            // Checking: if is teacher
            &sql(SELECT ID INTO:id FROM Stc_Data.Course_Teachers WHERE Teachers = :personId)    

            if (id = ""){
                // Checking: if has certificates
                &sql(SELECT ID INTO:id FROM Stc_Data.Certificate WHERE Student = :personId) 
            }
        }
    }
    
    // Check for modification access (checkForDelete=0):
    // Not used in other tables and in one app only => can modify
    
    // Check for deleting access (checkForDelete=1):
    // Not used in other tables => can delete
    
    set maxOrderCount = 2
    if (checkForDelete = 1) set maxOrderCount = 1
    if (id = "") && (countId < maxOrderCount) quit 1
    
    quit 0
]]></Implementation>
</Method>

<Method name="GetFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set (lastName, firstName) = ""
    
    &sql(SELECT LastName->Value, FirstName->Value INTO :lastName, :firstName
         FROM Stc_Data.Person
         WHERE ID = :id)
         
    if ($$$SessionLanguage = "en") || ($$$SessionLanguage = "en-US"){
        quit firstName_" "_lastName
    }
    
    quit lastName_" "_firstName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Stc.Data.PersonD</IdLocation>
<IndexLocation>^Stc.Data.PersonI</IndexLocation>
<StreamLocation>^Stc.Data.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Company</Value>
</Value>
<Value name="3">
<Value>FirstName</Value>
</Value>
<Value name="4">
<Value>LastName</Value>
</Value>
<Value name="5">
<Value>MiddleName</Value>
</Value>
<Value name="6">
<Value>Email</Value>
</Value>
<Value name="7">
<Value>Phone</Value>
</Value>
<Value name="8">
<Value>Skype</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Region">
<Description>
Country, region or city</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63098,13287.083739</TimeCreated>

<Property name="Guid">
<Description>
Guid = id</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Name">
<Description>
Name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="ParentRegion">
<Description>
Parent region</Description>
<Type>Region</Type>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="HLevel">
<Description>
Level in hierarchy, 0 - country, 1 - region/territory, 2 - city</Description>
<Type>%Integer</Type>
</Property>

<Index name="GuidIdx">
<IdKey>1</IdKey>
<Properties>Guid</Properties>
<Unique>1</Unique>
</Index>

<Index name="NameIdx">
<Properties>Name</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value
	set proxy.parentName = ..ParentRegion.Name.Value
	set proxy.greatParentName = ..ParentRegion.ParentRegion.Name.Value
	
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.RegionD</DataLocation>
<DefaultData>RegionDefaultData</DefaultData>
<IdLocation>^Stc.Data.RegionD</IdLocation>
<IndexLocation>^Stc.Data.RegionI</IndexLocation>
<StreamLocation>^Stc.Data.RegionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="RegionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>ParentRegion</Value>
</Value>
<Value name="4">
<Value>HLevel</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Settings">
<Abstract>1</Abstract>
<TimeCreated>63392,63626.63158</TimeCreated>

<Method name="Init">
<Description>
do ##class(Stc.Data.Settings).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Data.Settings).SetWebAppDomain("localhost:57772")
    do ##class(Stc.Data.Settings).SetEmailFrom("stc_testmail@mail.ru")
    do ##class(Stc.Data.Settings).SetEmailSMTPPassword("simplepassword")
    do ##class(Stc.Data.Settings).SetEmailSMTPPort(25)
    do ##class(Stc.Data.Settings).SetEmailSMTPServer("smtp.mail.ru")
    do ##class(Stc.Data.Settings).SetEmailSMTPUser("stc_testmail@mail.ru")
    do ##class(Stc.Data.Settings).SetGoogleCalendarID("kurapatka795@gmail.com")
    do ##class(Stc.Data.Settings).SetGoogleRefreshToken("")
    do ##class(Stc.Data.Settings).SetGoogleSSLConfig("sasaygoogle")
    do ##class(Stc.Data.Settings).SetGoogleCalendarSRC("https://www.google.com/calendar/embed?showTitle=0&showNav=0&showDate=0&showPrint=0&showTabs=0&showCalendars=0&showTz=0&mode=AGENDA&height=300&wkst=1&bgcolor=%23FFFFFF&src=kurapatka795%40gmail.com&ctz=Asia/Krasnoyarsk")
    do ##class(Stc.Data.Settings).SetMailingOperatorAddresses("ilsondll@gmail.com,ilson07@mail.ru")
    do ##class(Stc.Data.Settings).SetMailingStudentsDays(7)
    do ##class(Stc.Data.Settings).SetMailingTeacherDays(4)
    do ##class(Stc.Data.Settings).SetWebAppNamespace("/csp/stc")
    do ##class(Stc.Data.Settings).SetWebAppAdmin("/csp/stc/admin")
    do ##class(Stc.Data.Settings).SetWebAppUser("/csp/stc/user")
]]></Implementation>
</Method>

<Method name="WriteAllSettings">
<Description>
do ##class(Stc.Data.Settings).WriteAllSettings()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !, "-- Settings start -------------------------------------------------------"
    
    w !, "1 . GetWebAppNamespace() | "_..GetWebAppNamespace()
    w !, "2 . GetWebAppAdmin()     | "_..GetWebAppAdmin()
    w !, "3 . GetWebAppUser()      | "_..GetWebAppUser()
    w !, "4 . GetWebAppDomain()    | "_..GetWebAppDomain()
    
    w !, "5 . GetEmailSMTPServer()   | "_..GetEmailSMTPServer()
    w !, "6 . GetEmailSMTPPort()     | "_..GetEmailSMTPPort()
    w !, "7 . GetEmailSMTPUser()     | "_..GetEmailSMTPUser()
    w !, "8 . GetEmailSMTPPassword() | "_..GetEmailSMTPPassword()
    w !, "9 . GetEmailFrom()         | "_..GetEmailFrom()
    
    w !, "10. GetGoogleSSLConfig()    | "_..GetGoogleSSLConfig()
    w !, "11. GetGoogleRefreshToken() | "_..GetGoogleRefreshToken()
    w !, "12. GetGoogleCalendarID()   | "_..GetGoogleCalendarID()
    w !, "13. GetGoogleCalendarSRC()  | "_..GetGoogleCalendarSRC()
    
    w !, "14. GetMailingTeacherDays()       | "_..GetMailingTeacherDays()
    w !, "15. GetMailingCuratorDays()       | "_..GetMailingCuratorDays()
    w !, "16. GetMailingStudentsDays()      | "_..GetMailingStudentsDays()
    w !, "17. GetMailingOperatorAddresses() | "_..GetMailingOperatorAddresses()
    
    w !, "-- Settings end -------------------------------------------------------",!
]]></Implementation>
</Method>

<Method name="GetWebAppData">
<Description>

===========================================================================================================================================
Web                                                                                                                                     Web
===========================================================================================================================================
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,defaultValue=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Settings("Stc", "Web", key), defaultValue)
]]></Implementation>
</Method>

<Method name="SetWebAppData">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,value</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^Settings("Stc", "Web", key) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetWebAppNamespace">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetWebAppData("Namespace")
]]></Implementation>
</Method>

<Method name="SetWebAppNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetWebAppData("Namespace", value)
]]></Implementation>
</Method>

<Method name="GetWebAppAdmin">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetWebAppData("AdminREST")
]]></Implementation>
</Method>

<Method name="SetWebAppAdmin">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetWebAppData("AdminREST", value)
]]></Implementation>
</Method>

<Method name="GetWebAppUser">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetWebAppData("UserREST")
]]></Implementation>
</Method>

<Method name="SetWebAppUser">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetWebAppData("UserREST", value)
]]></Implementation>
</Method>

<Method name="GetWebAppDomainNamespace">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetWebAppData("Domain")_..GetWebAppData("Namespace")
]]></Implementation>
</Method>

<Method name="GetWebAppDomain">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetWebAppData("Domain")
]]></Implementation>
</Method>

<Method name="SetWebAppDomain">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetWebAppData("Domain", value)
]]></Implementation>
</Method>

<Method name="GetDefaultLang">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Settings("Stc", "DefaultLang"), "en-US")
]]></Implementation>
</Method>

<Method name="GetEmailData">
<Description>

===========================================================================================================================================
Email                                                                                                                                 Email
===========================================================================================================================================
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,defaultValue=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Settings("Stc", "Email", key), defaultValue)
]]></Implementation>
</Method>

<Method name="SetEmailData">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,value</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^Settings("Stc", "Email", key) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEmailSMTPServer">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetEmailData("SMTPServer")
]]></Implementation>
</Method>

<Method name="SetEmailSMTPServer">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetEmailData("SMTPServer", value)
]]></Implementation>
</Method>

<Method name="GetEmailSMTPPort">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetEmailData("SMTPPort")
]]></Implementation>
</Method>

<Method name="SetEmailSMTPPort">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..SetEmailData("SMTPPort", value)
]]></Implementation>
</Method>

<Method name="GetEmailSMTPUser">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetEmailData("SMTPUser")
]]></Implementation>
</Method>

<Method name="SetEmailSMTPUser">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..SetEmailData("SMTPUser", value)
]]></Implementation>
</Method>

<Method name="GetEmailSMTPPassword">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetEmailData("SMTPPassword")
]]></Implementation>
</Method>

<Method name="SetEmailSMTPPassword">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..SetEmailData("SMTPPassword", value)
]]></Implementation>
</Method>

<Method name="GetEmailFrom">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetEmailData("From")
]]></Implementation>
</Method>

<Method name="SetEmailFrom">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..SetEmailData("From", value)
]]></Implementation>
</Method>

<Method name="GetGoogleData">
<Description>

===========================================================================================================================================
Google                                                                                                                               Google
===========================================================================================================================================
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,defaultValue=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Settings("Stc", "Google", key), defaultValue)
]]></Implementation>
</Method>

<Method name="SetGoogleData">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,value</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^Settings("Stc", "Google", key) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetGoogleRefreshToken">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetGoogleData("RefreshToken")
]]></Implementation>
</Method>

<Method name="SetGoogleRefreshToken">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetGoogleData("RefreshToken", value)
]]></Implementation>
</Method>

<Method name="GetGoogleSSLConfig">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetGoogleData("SSLConfig")
]]></Implementation>
</Method>

<Method name="SetGoogleSSLConfig">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetGoogleData("SSLConfig", value)
]]></Implementation>
</Method>

<Method name="GetGoogleCalendarID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetGoogleData("CalendarID")
]]></Implementation>
</Method>

<Method name="SetGoogleCalendarID">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetGoogleData("CalendarID", value)
]]></Implementation>
</Method>

<Method name="GetGoogleCalendarSRC">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetGoogleData("CalendarSRC")
]]></Implementation>
</Method>

<Method name="SetGoogleCalendarSRC">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetGoogleData("CalendarSRC", value)
]]></Implementation>
</Method>

<Method name="GetMailingData">
<Description>

===========================================================================================================================================
Mailing                                                                                                                             Mailing
===========================================================================================================================================
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,defaultValue=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Settings("Stc", "Mailing", key), defaultValue)
]]></Implementation>
</Method>

<Method name="SetMailingData">
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,value</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^Settings("Stc", "Mailing", key) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMailingStatus">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("Status", "Off")
]]></Implementation>
</Method>

<Method name="SetMailingStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("Status", value)
]]></Implementation>
</Method>

<Method name="GetMailingTeacherDays">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("TeacherDays", 4)
]]></Implementation>
</Method>

<Method name="SetMailingTeacherDays">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("TeacherDays", value)
]]></Implementation>
</Method>

<Method name="GetMailingCuratorDays">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("CuratorDays", 4)
]]></Implementation>
</Method>

<Method name="SetMailingCuratorDays">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("CuratorDays", value)
]]></Implementation>
</Method>

<Method name="GetMailingStudentsDays">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("StudentsDays", 4)
]]></Implementation>
</Method>

<Method name="SetMailingStudentsDays">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("StudentsDays", value)
]]></Implementation>
</Method>

<Method name="GetMailingOperatorAddresses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("OperatorAddresses")
]]></Implementation>
</Method>

<Method name="SetMailingOperatorAddresses">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("OperatorAddresses", value)
]]></Implementation>
</Method>

<Method name="GetMailingHoursTimeoutListOfFeedbacks">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetMailingData("HoursTimeoutListOfFeedbacks")
]]></Implementation>
</Method>

<Method name="SetMailingHoursTimeoutListOfFeedbacks">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..SetMailingData("HoursTimeoutListOfFeedbacks", value)
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Data.SubGroup">
<Description>
Payed subgroup of students</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13360.062633</TimeCreated>

<Parameter name="DSTIME">
<Description>
Cube update parameter</Description>
<Default>auto</Default>
</Parameter>

<Property name="Payer">
<Description>
Paying organization</Description>
<Type>Company</Type>
<Required>1</Required>
</Property>

<Property name="Amount">
<Description>
Pay amount</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Currency">
<Description>
Currency</Description>
<Type>Currency</Type>
<Required>1</Required>
</Property>

<Property name="Discount">
<Description>
Discount</Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="SignerFullName">
<Description>
Signer full name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="DocumentInfo">
<Description>
Info about documents</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="DateStart">
<Description>
Contract conclusion date</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="DateFinish">
<Description>
Contract expiring date</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.payer = ..Payer.ConvertToProxyObject()
    set proxy.amount = ..Amount
    set proxy.amountNDS = ..Amount * 1.18
    
    if (..Discount = 0) {
        set proxy.discount = ""
    }
    else{
        set proxy.discount = ..Discount
    }
    
    set proxy.currency = ..Currency.ConvertToProxyObject()
    
    set proxy.contract = ##class(%ZEN.proxyObject).%New()
    set proxy.contract.fullName = ..SignerFullName.Value
    set proxy.contract.document = ..DocumentInfo.Value
    
    if (..DateStart) && (..DateFinish){
        set proxy.contract.dateStart = $ZDATE(..DateStart, 3)
        set proxy.contract.dateFinish = $ZDATE(..DateFinish, 3)
    }
    
    set proxy.students = ##class(%ListOfObjects).%New()
    
    set studentsArray = ..GetArrayOfStudents()
    set key = ""
    for i=1:1:studentsArray.Count(){
        set key = studentsArray.Next(key)
        do proxy.students.Insert(studentsArray.GetAt(key).ConvertToProxyObject())
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Create subgroup in training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[payer:Company,course:Stc.Data.Course,&status]]></FormalSpec>
<ReturnType>SubGroup</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Create", "PayerID="_payer.%Id()_"; PayerShortName="_payer.ShortName.Value)
    
    set sub = ..%New()
    set sub.Payer = payer
    set sub.Currency = ##class(Currency).%OpenId(1)
    set sub.SignerFullName = ##class(Stc.Data.Localization.LText).Create("")
    set sub.DocumentInfo = ##class(Stc.Data.Localization.LText).Create("")
    
    set sub.Amount = course.Price
    set sub.Currency = course.Currency
    
    set status = sub.%Save()
    quit sub
]]></Implementation>
</Method>

<Method name="GetArrayOfStudents">
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
    set sgId = ..%Id()
    set array = ##class(%ArrayOfObjects).%New()
    
    &sql(DECLARE StudCur CURSOR FOR 
             SELECT Student 
             FROM Stc_Data.SubGroupStudent 
             WHERE SubGroup = :sgId
             ORDER BY Student->FullName) 
        
    &sql(OPEN StudCur)
    for  
    {   
        &sql(FETCH StudCur INTO :stId) 
        quit:(SQLCODE '= 0)
        
        do array.SetAt(##class(Person).%OpenId(stId), stId)
    }
        
    &sql(CLOSE StudCur)
    
    quit array
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.SubGroupD</DataLocation>
<DefaultData>SubGroupDefaultData</DefaultData>
<IdLocation>^Stc.Data.SubGroupD</IdLocation>
<IndexLocation>^Stc.Data.SubGroupI</IndexLocation>
<StreamLocation>^Stc.Data.SubGroupS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="Students">
<Attribute>Students</Attribute>
<Structure>subnode</Structure>
<Subscript>"Students"</Subscript>
</Data>
<Data name="SubGroupDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Payer</Value>
</Value>
<Value name="3">
<Value>Amount</Value>
</Value>
<Value name="4">
<Value>Currency</Value>
</Value>
<Value name="5">
<Value>SignerFullName</Value>
</Value>
<Value name="6">
<Value>DocumentInfo</Value>
</Value>
<Value name="7">
<Value>DateStart</Value>
</Value>
<Value name="8">
<Value>DateFinish</Value>
</Value>
<Value name="9">
<Value>AmountNDS</Value>
</Value>
<Value name="10">
<Value>Discount</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.SubGroupStudent">
<Description>
Training subgroup student</Description>
<Super>%Persistent</Super>
<TimeCreated>63752,60397.894817</TimeCreated>

<Property name="Student">
<Type>Person</Type>
<Required>1</Required>
</Property>

<Property name="SubGroup">
<Type>SubGroup</Type>
<Required>1</Required>
</Property>

<Property name="Training">
<Type>Training</Type>
<Required>1</Required>
</Property>

<Property name="AttendedStatusCode">
<Type>%String</Type>
<InitialExpression>"Unknown"</InitialExpression>
<Parameter name="VALUELIST" value="&apos;Unknown&apos;,&apos;Visited&apos;,&apos;NotVisited&apos;"/>
</Property>

<Index name="CommonKeyIndex">
<Properties>Student,SubGroup</Properties>
<Unique>1</Unique>
</Index>

<Index name="TrainingStudentIndex">
<Properties>Training,Student</Properties>
<Unique>1</Unique>
</Index>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[stId:%String,grId:%String,trId:%String,&st]]></FormalSpec>
<ReturnType>Stc.Data.SubGroupStudent</ReturnType>
<Implementation><![CDATA[
    set obj = ..%New()
    set obj.Student = ##class(Person).%OpenId(stId)
    set obj.SubGroup = ##class(SubGroup).%OpenId(grId)
    set obj.Training = ##class(Training).%OpenId(trId)
    
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="FixOldData">
<Description>
do ##class(Stc.Data.SubGroupStudent).FixOldData()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..Save("9", "1", "1")
    do ..Save("10", "1", "1")
    do ..Save("13", "1", "1")
    do ..Save("15", "1", "1")
    do ..Save("492", "1", "1")
    do ..Save("493", "1", "1")
    do ..Save("16", "2", "1")
    do ..Save("18", "4", "2")
    do ..Save("436", "4", "2")
    do ..Save("437", "4", "2")
    do ..Save("438", "4", "2")
    do ..Save("439", "4", "2")
    do ..Save("440", "4", "2")
    do ..Save("469", "4", "2")
    do ..Save("470", "4", "2")
    do ..Save("442", "5", "4")
    do ..Save("23", "8", "6")
    do ..Save("106", "8", "6")
    do ..Save("107", "8", "6")
    do ..Save("108", "8", "6")
    do ..Save("109", "8", "6")
    do ..Save("110", "9", "7")
    do ..Save("111", "9", "7")
    do ..Save("112", "9", "7")
    do ..Save("113", "9", "7")
    do ..Save("114", "9", "7")
    do ..Save("115", "9", "7")
    do ..Save("116", "9", "7")
    do ..Save("117", "9", "7")
    do ..Save("111", "10", "8")
    do ..Save("112", "10", "8")
    do ..Save("113", "10", "8")
    do ..Save("114", "10", "8")
    do ..Save("115", "10", "8")
    do ..Save("116", "10", "8")
    do ..Save("117", "10", "8")
    do ..Save("111", "11", "9")
    do ..Save("112", "11", "9")
    do ..Save("113", "11", "9")
    do ..Save("114", "11", "9")
    do ..Save("115", "11", "9")
    do ..Save("116", "11", "9")
    do ..Save("117", "11", "9")
    do ..Save("118", "12", "10")
    do ..Save("119", "12", "10")
    do ..Save("120", "12", "10")
    do ..Save("121", "12", "10")
    do ..Save("122", "12", "10")
    do ..Save("123", "12", "10")
    do ..Save("124", "12", "10")
    do ..Save("125", "12", "10")
    do ..Save("126", "12", "10")
    do ..Save("127", "12", "10")
    do ..Save("128", "12", "10")
    do ..Save("129", "12", "10")
    do ..Save("130", "12", "10")
    do ..Save("131", "12", "10")
    do ..Save("132", "12", "10")
    do ..Save("133", "12", "10")
    do ..Save("134", "12", "10")
    do ..Save("135", "12", "10")
    do ..Save("136", "12", "10")
    do ..Save("137", "12", "10")
    do ..Save("138", "12", "10")
    do ..Save("118", "13", "11")
    do ..Save("119", "13", "11")
    do ..Save("120", "13", "11")
    do ..Save("121", "13", "11")
    do ..Save("122", "13", "11")
    do ..Save("123", "13", "11")
    do ..Save("124", "13", "11")
    do ..Save("125", "13", "11")
    do ..Save("126", "13", "11")
    do ..Save("127", "13", "11")
    do ..Save("128", "13", "11")
    do ..Save("129", "13", "11")
    do ..Save("130", "13", "11")
    do ..Save("131", "13", "11")
    do ..Save("132", "13", "11")
    do ..Save("133", "13", "11")
    do ..Save("134", "13", "11")
    do ..Save("135", "13", "11")
    do ..Save("136", "13", "11")
    do ..Save("137", "13", "11")
    do ..Save("138", "13", "11")
    do ..Save("24", "14", "12")
    do ..Save("139", "14", "12")
    do ..Save("140", "14", "12")
    do ..Save("25", "15", "13")
    do ..Save("141", "15", "13")
    do ..Save("142", "15", "13")
    do ..Save("143", "15", "13")
    do ..Save("144", "15", "13")
    do ..Save("145", "15", "13")
    do ..Save("25", "16", "14")
    do ..Save("141", "16", "14")
    do ..Save("142", "16", "14")
    do ..Save("143", "16", "14")
    do ..Save("144", "16", "14")
    do ..Save("145", "16", "14")
    do ..Save("25", "17", "15")
    do ..Save("141", "17", "15")
    do ..Save("142", "17", "15")
    do ..Save("143", "17", "15")
    do ..Save("144", "17", "15")
    do ..Save("145", "17", "15")
    do ..Save("26", "18", "16")
    do ..Save("146", "18", "16")
    do ..Save("26", "19", "17")
    do ..Save("146", "19", "17")
    do ..Save("147", "19", "17")
    do ..Save("148", "19", "17")
    do ..Save("147", "20", "18")
    do ..Save("148", "20", "18")
    do ..Save("27", "21", "18")
    do ..Save("149", "21", "18")
    do ..Save("150", "21", "18")
    do ..Save("151", "21", "18")
    do ..Save("106", "22", "19")
    do ..Save("108", "22", "19")
    do ..Save("28", "23", "19")
    do ..Save("152", "23", "19")
    do ..Save("153", "23", "19")
    do ..Save("154", "23", "19")
    do ..Save("29", "24", "20")
    do ..Save("155", "24", "20")
    do ..Save("156", "24", "20")
    do ..Save("157", "24", "20")
    do ..Save("158", "24", "20")
    do ..Save("159", "24", "20")
    do ..Save("160", "24", "20")
    do ..Save("161", "24", "20")
    do ..Save("30", "25", "21")
    do ..Save("162", "25", "21")
    do ..Save("163", "25", "21")
    do ..Save("164", "25", "21")
    do ..Save("165", "25", "21")
    do ..Save("166", "25", "21")
    do ..Save("167", "25", "21")
    do ..Save("168", "25", "21")
    do ..Save("31", "26", "22")
    do ..Save("169", "26", "22")
    do ..Save("170", "26", "22")
    do ..Save("32", "27", "22")
    do ..Save("171", "27", "22")
    do ..Save("172", "28", "22")
    do ..Save("33", "29", "23")
    do ..Save("34", "30", "23")
    do ..Save("35", "31", "23")
    do ..Save("36", "32", "23")
    do ..Save("37", "33", "23")
    do ..Save("35", "34", "24")
    do ..Save("38", "35", "24")
    do ..Save("173", "35", "24")
    do ..Save("174", "36", "25")
    do ..Save("175", "36", "25")
    do ..Save("176", "36", "25")
    do ..Save("177", "36", "25")
    do ..Save("178", "36", "25")
    do ..Save("179", "36", "25")
    do ..Save("174", "37", "26")
    do ..Save("175", "37", "26")
    do ..Save("176", "37", "26")
    do ..Save("177", "37", "26")
    do ..Save("178", "37", "26")
    do ..Save("179", "37", "26")
    do ..Save("180", "38", "26")
    do ..Save("101", "39", "27")
    do ..Save("39", "40", "27")
    do ..Save("181", "41", "27")
    do ..Save("182", "42", "28")
    do ..Save("183", "42", "28")
    do ..Save("184", "42", "28")
    do ..Save("185", "42", "28")
    do ..Save("464", "42", "28")
    do ..Save("41", "43", "28")
    do ..Save("186", "43", "28")
    do ..Save("187", "43", "28")
    do ..Save("182", "44", "29")
    do ..Save("183", "44", "29")
    do ..Save("184", "44", "29")
    do ..Save("185", "44", "29")
    do ..Save("464", "44", "29")
    do ..Save("41", "45", "29")
    do ..Save("186", "45", "29")
    do ..Save("187", "45", "29")
    do ..Save("35", "46", "30")
    do ..Save("188", "46", "30")
    do ..Save("189", "46", "30")
    do ..Save("190", "47", "31")
    do ..Save("191", "48", "31")
    do ..Save("192", "48", "31")
    do ..Save("43", "49", "31")
    do ..Save("193", "50", "32")
    do ..Save("194", "50", "32")
    do ..Save("195", "50", "32")
    do ..Save("494", "50", "32")
    do ..Save("45", "51", "32")
    do ..Save("46", "52", "33")
    do ..Save("196", "52", "33")
    do ..Save("197", "52", "33")
    do ..Save("43", "53", "34")
    do ..Save("47", "54", "34")
    do ..Save("48", "55", "34")
    do ..Save("198", "55", "34")
    do ..Save("49", "56", "34")
    do ..Save("199", "57", "35")
    do ..Save("200", "57", "35")
    do ..Save("201", "57", "35")
    do ..Save("202", "57", "35")
    do ..Save("196", "58", "36")
    do ..Save("199", "58", "36")
    do ..Save("200", "58", "36")
    do ..Save("201", "58", "36")
    do ..Save("50", "59", "37")
    do ..Save("203", "59", "37")
    do ..Save("47", "60", "38")
    do ..Save("204", "60", "38")
    do ..Save("49", "61", "38")
    do ..Save("51", "62", "39")
    do ..Save("205", "62", "39")
    do ..Save("206", "62", "39")
    do ..Save("207", "62", "39")
    do ..Save("3", "63", "39")
    do ..Save("108", "63", "39")
    do ..Save("52", "65", "40")
    do ..Save("208", "65", "40")
    do ..Save("209", "65", "40")
    do ..Save("210", "65", "40")
    do ..Save("211", "65", "40")
    do ..Save("40", "66", "40")
    do ..Save("213", "66", "40")
    do ..Save("214", "66", "40")
    do ..Save("53", "67", "40")
    do ..Save("215", "67", "40")
    do ..Save("216", "68", "40")
    do ..Save("217", "68", "40")
    do ..Save("54", "69", "41")
    do ..Save("218", "70", "41")
    do ..Save("219", "70", "41")
    do ..Save("220", "70", "41")
    do ..Save("221", "70", "41")
    do ..Save("222", "70", "41")
    do ..Save("223", "70", "41")
    do ..Save("224", "70", "41")
    do ..Save("225", "70", "41")
    do ..Save("226", "70", "41")
    do ..Save("227", "70", "41")
    do ..Save("228", "70", "41")
    do ..Save("229", "70", "41")
    do ..Save("54", "71", "42")
    do ..Save("218", "72", "42")
    do ..Save("219", "72", "42")
    do ..Save("220", "72", "42")
    do ..Save("221", "72", "42")
    do ..Save("222", "72", "42")
    do ..Save("223", "72", "42")
    do ..Save("224", "72", "42")
    do ..Save("225", "72", "42")
    do ..Save("226", "72", "42")
    do ..Save("227", "72", "42")
    do ..Save("228", "72", "42")
    do ..Save("229", "72", "42")
    do ..Save("2", "73", "42")
    do ..Save("54", "74", "43")
    do ..Save("218", "75", "43")
    do ..Save("219", "75", "43")
    do ..Save("220", "75", "43")
    do ..Save("221", "75", "43")
    do ..Save("222", "75", "43")
    do ..Save("223", "75", "43")
    do ..Save("224", "75", "43")
    do ..Save("225", "75", "43")
    do ..Save("226", "75", "43")
    do ..Save("227", "75", "43")
    do ..Save("228", "75", "43")
    do ..Save("229", "75", "43")
    do ..Save("2", "76", "43")
    do ..Save("55", "77", "44")
    do ..Save("230", "77", "44")
    do ..Save("231", "77", "44")
    do ..Save("196", "78", "45")
    do ..Save("200", "78", "45")
    do ..Save("196", "79", "46")
    do ..Save("200", "79", "46")
    do ..Save("232", "79", "46")
    do ..Save("233", "79", "46")
    do ..Save("234", "80", "47")
    do ..Save("235", "80", "47")
    do ..Save("236", "80", "47")
    do ..Save("237", "80", "47")
    do ..Save("238", "80", "47")
    do ..Save("239", "80", "47")
    do ..Save("495", "80", "47")
    do ..Save("57", "81", "47")
    do ..Save("240", "81", "47")
    do ..Save("241", "82", "48")
    do ..Save("242", "82", "48")
    do ..Save("224", "83", "48")
    do ..Save("58", "84", "48")
    do ..Save("59", "85", "49")
    do ..Save("243", "85", "49")
    do ..Save("244", "85", "49")
    do ..Save("245", "85", "49")
    do ..Save("246", "85", "49")
    do ..Save("198", "86", "49")
    do ..Save("60", "87", "50")
    do ..Save("247", "87", "50")
    do ..Save("61", "88", "50")
    do ..Save("248", "89", "51")
    do ..Save("249", "89", "51")
    do ..Save("251", "89", "51")
    do ..Save("252", "89", "51")
    do ..Save("253", "89", "51")
    do ..Save("254", "89", "51")
    do ..Save("255", "89", "51")
    do ..Save("256", "89", "51")
    do ..Save("257", "89", "51")
    do ..Save("250", "90", "51")
    do ..Save("258", "90", "51")
    do ..Save("248", "91", "52")
    do ..Save("254", "91", "52")
    do ..Save("255", "91", "52")
    do ..Save("62", "92", "53")
    do ..Save("102", "92", "53")
    do ..Save("259", "92", "53")
    do ..Save("260", "92", "53")
    do ..Save("261", "92", "53")
    do ..Save("262", "92", "53")
    do ..Save("263", "92", "53")
    do ..Save("264", "92", "53")
    do ..Save("265", "92", "53")
    do ..Save("266", "92", "53")
    do ..Save("267", "92", "53")
    do ..Save("268", "92", "53")
    do ..Save("269", "92", "53")
    do ..Save("270", "92", "53")
    do ..Save("271", "92", "53")
    do ..Save("272", "92", "53")
    do ..Save("273", "92", "53")
    do ..Save("274", "92", "53")
    do ..Save("71", "93", "53")
    do ..Save("63", "94", "54")
    do ..Save("275", "94", "54")
    do ..Save("276", "94", "54")
    do ..Save("64", "95", "54")
    do ..Save("277", "95", "54")
    do ..Save("278", "96", "55")
    do ..Save("279", "96", "55")
    do ..Save("280", "96", "55")
    do ..Save("281", "96", "55")
    do ..Save("282", "96", "55")
    do ..Save("283", "96", "55")
    do ..Save("284", "96", "55")
    do ..Save("285", "96", "55")
    do ..Save("286", "97", "56")
    do ..Save("287", "97", "56")
    do ..Save("288", "97", "56")
    do ..Save("289", "97", "56")
    do ..Save("290", "97", "56")
    do ..Save("291", "97", "56")
    do ..Save("292", "97", "56")
    do ..Save("293", "97", "56")
    do ..Save("294", "97", "56")
    do ..Save("295", "97", "56")
    do ..Save("296", "97", "56")
    do ..Save("297", "97", "56")
    do ..Save("298", "97", "56")
    do ..Save("299", "97", "56")
    do ..Save("300", "97", "56")
    do ..Save("301", "97", "56")
    do ..Save("302", "97", "56")
    do ..Save("303", "97", "56")
    do ..Save("304", "97", "56")
    do ..Save("496", "97", "56")
    do ..Save("66", "98", "57")
    do ..Save("305", "98", "57")
    do ..Save("306", "98", "57")
    do ..Save("307", "98", "57")
    do ..Save("308", "98", "57")
    do ..Save("309", "98", "57")
    do ..Save("310", "98", "57")
    do ..Save("311", "98", "57")
    do ..Save("312", "98", "57")
    do ..Save("313", "98", "57")
    do ..Save("314", "98", "57")
    do ..Save("315", "98", "57")
    do ..Save("316", "98", "57")
    do ..Save("67", "99", "58")
    do ..Save("317", "99", "58")
    do ..Save("318", "99", "58")
    do ..Save("319", "99", "58")
    do ..Save("320", "99", "58")
    do ..Save("321", "99", "58")
    do ..Save("322", "99", "58")
    do ..Save("323", "99", "58")
    do ..Save("68", "100", "59")
    do ..Save("324", "100", "59")
    do ..Save("325", "100", "59")
    do ..Save("326", "100", "59")
    do ..Save("327", "100", "59")
    do ..Save("328", "100", "59")
    do ..Save("329", "100", "59")
    do ..Save("330", "100", "59")
    do ..Save("331", "100", "59")
    do ..Save("332", "100", "59")
    do ..Save("333", "100", "59")
    do ..Save("3", "101", "59")
    do ..Save("93", "102", "59")
    do ..Save("69", "103", "60")
    do ..Save("334", "103", "60")
    do ..Save("335", "103", "60")
    do ..Save("336", "103", "60")
    do ..Save("337", "104", "60")
    do ..Save("69", "105", "61")
    do ..Save("334", "105", "61")
    do ..Save("335", "105", "61")
    do ..Save("336", "105", "61")
    do ..Save("337", "106", "61")
    do ..Save("338", "107", "62")
    do ..Save("339", "107", "62")
    do ..Save("70", "108", "63")
    do ..Save("340", "108", "63")
    do ..Save("341", "108", "63")
    do ..Save("342", "108", "63")
    do ..Save("343", "108", "63")
    do ..Save("344", "108", "63")
    do ..Save("345", "108", "63")
    do ..Save("346", "108", "63")
    do ..Save("347", "108", "63")
    do ..Save("348", "108", "63")
    do ..Save("349", "108", "63")
    do ..Save("350", "108", "63")
    do ..Save("351", "108", "63")
    do ..Save("352", "108", "63")
    do ..Save("353", "108", "63")
    do ..Save("62", "109", "64")
    do ..Save("102", "109", "64")
    do ..Save("259", "109", "64")
    do ..Save("261", "109", "64")
    do ..Save("262", "109", "64")
    do ..Save("263", "109", "64")
    do ..Save("264", "109", "64")
    do ..Save("265", "109", "64")
    do ..Save("268", "109", "64")
    do ..Save("271", "109", "64")
    do ..Save("273", "109", "64")
    do ..Save("274", "109", "64")
    do ..Save("71", "110", "64")
    do ..Save("354", "110", "64")
    do ..Save("343", "111", "64")
    do ..Save("345", "111", "64")
    do ..Save("351", "111", "64")
    do ..Save("352", "111", "64")
    do ..Save("353", "111", "64")
    do ..Save("355", "112", "65")
    do ..Save("356", "112", "65")
    do ..Save("357", "112", "65")
    do ..Save("358", "112", "65")
    do ..Save("359", "112", "65")
    do ..Save("360", "112", "65")
    do ..Save("361", "112", "65")
    do ..Save("362", "112", "65")
    do ..Save("363", "112", "65")
    do ..Save("364", "112", "65")
    do ..Save("365", "112", "65")
    do ..Save("366", "112", "65")
    do ..Save("367", "112", "65")
    do ..Save("368", "112", "65")
    do ..Save("369", "112", "65")
    do ..Save("497", "112", "65")
    do ..Save("73", "113", "66")
    do ..Save("370", "113", "66")
    do ..Save("371", "113", "66")
    do ..Save("372", "113", "66")
    do ..Save("373", "113", "66")
    do ..Save("374", "113", "66")
    do ..Save("375", "113", "66")
    do ..Save("376", "113", "66")
    do ..Save("377", "113", "66")
    do ..Save("279", "114", "67")
    do ..Save("280", "114", "67")
    do ..Save("282", "114", "67")
    do ..Save("283", "114", "67")
    do ..Save("284", "114", "67")
    do ..Save("285", "114", "67")
    do ..Save("279", "115", "68")
    do ..Save("280", "115", "68")
    do ..Save("282", "115", "68")
    do ..Save("283", "115", "68")
    do ..Save("284", "115", "68")
    do ..Save("285", "115", "68")
    do ..Save("74", "116", "69")
    do ..Save("378", "116", "69")
    do ..Save("379", "116", "69")
    do ..Save("380", "116", "69")
    do ..Save("381", "116", "69")
    do ..Save("382", "117", "70")
    do ..Save("75", "118", "70")
    do ..Save("76", "119", "70")
    do ..Save("383", "119", "70")
    do ..Save("384", "119", "70")
    do ..Save("77", "120", "71")
    do ..Save("385", "120", "71")
    do ..Save("386", "120", "71")
    do ..Save("78", "121", "71")
    do ..Save("387", "121", "71")
    do ..Save("388", "121", "71")
    do ..Save("79", "122", "72")
    do ..Save("389", "122", "72")
    do ..Save("390", "122", "72")
    do ..Save("391", "122", "72")
    do ..Save("392", "122", "72")
    do ..Save("393", "122", "72")
    do ..Save("394", "123", "73")
    do ..Save("395", "124", "73")
    do ..Save("396", "125", "73")
    do ..Save("397", "126", "73")
    do ..Save("80", "127", "73")
    do ..Save("398", "128", "74")
    do ..Save("399", "128", "74")
    do ..Save("400", "128", "74")
    do ..Save("401", "128", "74")
    do ..Save("402", "128", "74")
    do ..Save("405", "128", "74")
    do ..Save("81", "129", "74")
    do ..Save("403", "130", "74")
    do ..Save("498", "130", "74")
    do ..Save("83", "131", "74")
    do ..Save("404", "131", "74")
    do ..Save("84", "132", "74")
    do ..Save("85", "133", "75")
    do ..Save("406", "133", "75")
    do ..Save("407", "133", "75")
    do ..Save("408", "133", "75")
    do ..Save("409", "133", "75")
    do ..Save("410", "133", "75")
    do ..Save("411", "133", "75")
    do ..Save("412", "133", "75")
    do ..Save("413", "133", "75")
    do ..Save("414", "133", "75")
    do ..Save("415", "133", "75")
    do ..Save("86", "134", "75")
    do ..Save("416", "135", "75")
    do ..Save("88", "136", "75")
    do ..Save("417", "136", "75")
    do ..Save("89", "137", "75")
    do ..Save("394", "138", "76")
    do ..Save("397", "139", "76")
    do ..Save("90", "140", "76")
    do ..Save("396", "141", "76")
    do ..Save("80", "142", "76")
    do ..Save("91", "143", "76")
    do ..Save("392", "144", "77")
    do ..Save("47", "145", "77")
    do ..Save("16", "146", "77")
    do ..Save("21", "146", "77")
    do ..Save("394", "146", "77")
    do ..Save("80", "147", "77")
    do ..Save("397", "148", "77")
    do ..Save("396", "149", "77")
    do ..Save("92", "150", "78")
    do ..Save("418", "150", "78")
    do ..Save("419", "150", "78")
    do ..Save("420", "151", "78")
    do ..Save("93", "152", "79")
    do ..Save("421", "152", "79")
    do ..Save("422", "152", "79")
    do ..Save("236", "153", "79")
    do ..Save("423", "154", "80")
    do ..Save("424", "155", "80")
    do ..Save("16", "156", "80")
    do ..Save("394", "156", "80")
    do ..Save("499", "157", "81")
    do ..Save("16", "158", "81")
    do ..Save("95", "159", "81")
    do ..Save("425", "160", "82")
    do ..Save("426", "160", "82")
    do ..Save("427", "160", "82")
    do ..Save("428", "160", "82")
    do ..Save("429", "160", "82")
    do ..Save("430", "160", "82")
    do ..Save("431", "160", "82")
    do ..Save("432", "160", "82")
    do ..Save("433", "160", "82")
    do ..Save("434", "160", "82")
    do ..Save("500", "160", "82")
    do ..Save("501", "161", "83")
    do ..Save("435", "162", "83")
    do ..Save("499", "163", "83")
    do ..Save("44", "164", "5")
    do ..Save("420", "164", "5")
    do ..Save("442", "164", "5")
    do ..Save("11", "165", "5")
    do ..Save("543", "165", "5")
    do ..Save("11", "166", "4")
    do ..Save("472", "166", "4")
    do ..Save("543", "166", "4")
    do ..Save("12", "167", "85")
    do ..Save("445", "167", "85")
    do ..Save("447", "167", "85")
    do ..Save("449", "167", "85")
    do ..Save("450", "167", "85")
    do ..Save("451", "167", "85")
    do ..Save("452", "167", "85")
    do ..Save("453", "167", "85")
    do ..Save("454", "167", "85")
    do ..Save("456", "167", "85")
    do ..Save("457", "167", "85")
    do ..Save("458", "167", "85")
    do ..Save("459", "167", "85")
    do ..Save("460", "167", "85")
    do ..Save("461", "167", "85")
    do ..Save("462", "167", "85")
    do ..Save("471", "167", "85")
    do ..Save("475", "167", "85")
    do ..Save("40", "174", "87")
    do ..Save("463", "174", "87")
    do ..Save("464", "174", "87")
    do ..Save("465", "174", "87")
    do ..Save("466", "174", "87")
    do ..Save("467", "174", "87")
    do ..Save("468", "174", "87")
    do ..Save("44", "175", "4")
    do ..Save("472", "176", "5")
    do ..Save("474", "177", "87")
    do ..Save("65", "179", "91")
    do ..Save("56", "180", "91")
    do ..Save("72", "181", "91")
    do ..Save("479", "181", "91")
    do ..Save("480", "181", "91")
    do ..Save("481", "181", "91")
    do ..Save("482", "181", "91")
    do ..Save("483", "181", "91")
    do ..Save("485", "181", "91")
    do ..Save("72", "182", "92")
    do ..Save("479", "182", "92")
    do ..Save("481", "182", "92")
    do ..Save("482", "182", "92")
    do ..Save("483", "182", "92")
    do ..Save("484", "182", "92")
    do ..Save("485", "182", "92")
    do ..Save("65", "183", "92")
    do ..Save("56", "184", "92")
    do ..Save("486", "185", "90")
    do ..Save("488", "185", "90")
    do ..Save("82", "186", "90")
    do ..Save("487", "186", "90")
    do ..Save("82", "187", "93")
    do ..Save("487", "187", "93")
    do ..Save("486", "188", "93")
    do ..Save("488", "188", "93")
    do ..Save("82", "189", "94")
    do ..Save("487", "189", "94")
    do ..Save("530", "189", "94")
    do ..Save("486", "190", "94")
    do ..Save("488", "190", "94")
    do ..Save("529", "190", "94")
    do ..Save("96", "192", "96")
    do ..Save("97", "193", "96")
    do ..Save("491", "194", "97")
    do ..Save("503", "196", "98")
    do ..Save("505", "196", "98")
    do ..Save("506", "196", "98")
    do ..Save("507", "196", "98")
    do ..Save("508", "196", "98")
    do ..Save("504", "197", "98")
    do ..Save("509", "197", "98")
    do ..Save("510", "197", "98")
    do ..Save("511", "197", "98")
    do ..Save("512", "197", "98")
    do ..Save("514", "197", "98")
    do ..Save("515", "197", "98")
    do ..Save("516", "197", "98")
    do ..Save("513", "198", "98")
    do ..Save("517", "199", "99")
    do ..Save("518", "199", "99")
    do ..Save("519", "199", "99")
    do ..Save("520", "199", "99")
    do ..Save("521", "199", "99")
    do ..Save("522", "199", "99")
    do ..Save("523", "199", "99")
    do ..Save("524", "199", "99")
    do ..Save("525", "199", "99")
    do ..Save("526", "199", "99")
    do ..Save("500", "200", "102")
    do ..Save("517", "200", "102")
    do ..Save("518", "200", "102")
    do ..Save("520", "200", "102")
    do ..Save("521", "200", "102")
    do ..Save("522", "200", "102")
    do ..Save("523", "200", "102")
    do ..Save("524", "200", "102")
    do ..Save("526", "200", "102")
    do ..Save("388", "201", "102")
    do ..Save("527", "201", "102")
    do ..Save("105", "202", "102")
    do ..Save("528", "202", "102")
    do ..Save("531", "203", "104")
    do ..Save("532", "203", "104")
    do ..Save("533", "203", "104")
    do ..Save("534", "203", "104")
    do ..Save("535", "203", "104")
    do ..Save("536", "203", "104")
    do ..Save("537", "203", "104")
    do ..Save("538", "203", "104")
    do ..Save("541", "205", "105")
    do ..Save("540", "206", "105")
    do ..Save("500", "207", "103")
    do ..Save("517", "207", "103")
    do ..Save("518", "207", "103")
    do ..Save("519", "207", "103")
    do ..Save("521", "207", "103")
    do ..Save("524", "207", "103")
    do ..Save("526", "207", "103")
    do ..Save("544", "207", "103")
    do ..Save("542", "208", "103")
    do ..Save("105", "209", "103")
    do ..Save("528", "209", "103")
    do ..Save("388", "210", "103")
    do ..Save("527", "210", "103")
    do ..Save("545", "211", "107")
    do ..Save("546", "211", "107")
    do ..Save("547", "211", "107")
    do ..Save("548", "211", "107")
    do ..Save("549", "211", "107")
    do ..Save("554", "211", "107")
    do ..Save("559", "211", "107")
    do ..Save("552", "212", "107")
    do ..Save("553", "213", "107")
    do ..Save("555", "214", "107")
    do ..Save("561", "215", "109")
    do ..Save("562", "215", "109")
    do ..Save("563", "215", "109")
    do ..Save("564", "215", "109")
    do ..Save("565", "215", "109")
    do ..Save("566", "215", "109")
    do ..Save("567", "215", "109")
    do ..Save("568", "215", "109")
    do ..Save("569", "215", "109")
    do ..Save("570", "215", "109")
    do ..Save("571", "215", "109")
    do ..Save("572", "215", "109")
    do ..Save("573", "215", "109")
    do ..Save("574", "215", "109")
    do ..Save("575", "215", "109")
    do ..Save("576", "216", "108")
    do ..Save("578", "217", "108")
    do ..Save("576", "218", "112")
    do ..Save("576", "219", "110")
    do ..Save("20", "220", "112")
    do ..Save("578", "220", "112")
    do ..Save("578", "221", "110")
    do ..Save("580", "222", "111")
    do ..Save("582", "222", "111")
    do ..Save("583", "222", "111")
    do ..Save("584", "222", "111")
    do ..Save("585", "222", "111")
    do ..Save("575", "223", "110")
    do ..Save("536", "224", "111")
    do ..Save("590", "224", "111")
    do ..Save("392", "225", "111")
    do ..Save("535", "225", "111")
    do ..Save("591", "225", "111")
    do ..Save("592", "225", "111")
    do ..Save("595", "227", "110")
    do ..Save("596", "228", "110")
    do ..Save("687", "229", "114")
    do ..Save("688", "230", "114")
    do ..Save("688", "231", "113")
    do ..Save("597", "232", "113")
    do ..Save("598", "232", "113")
    do ..Save("599", "232", "113")
    do ..Save("601", "232", "113")
    do ..Save("603", "232", "113")
    do ..Save("598", "233", "114")
    do ..Save("599", "233", "114")
    do ..Save("601", "233", "114")
    do ..Save("603", "233", "114")
    do ..Save("606", "234", "113")
    do ..Save("689", "234", "113")
    do ..Save("611", "235", "115")
    do ..Save("613", "235", "115")
    do ..Save("615", "235", "115")
    do ..Save("616", "235", "115")
    do ..Save("617", "235", "115")
    do ..Save("625", "235", "115")
    do ..Save("626", "235", "115")
    do ..Save("629", "235", "115")
    do ..Save("635", "235", "115")
    do ..Save("636", "235", "115")
    do ..Save("640", "235", "115")
    do ..Save("641", "235", "115")
    do ..Save("642", "235", "115")
    do ..Save("643", "235", "115")
    do ..Save("690", "235", "115")
    do ..Save("608", "236", "113")
    do ..Save("691", "236", "113")
    do ..Save("692", "237", "113")
    do ..Save("614", "238", "116")
    do ..Save("618", "238", "116")
    do ..Save("619", "238", "116")
    do ..Save("620", "238", "116")
    do ..Save("621", "238", "116")
    do ..Save("622", "238", "116")
    do ..Save("623", "238", "116")
    do ..Save("624", "238", "116")
    do ..Save("627", "238", "116")
    do ..Save("628", "238", "116")
    do ..Save("630", "238", "116")
    do ..Save("631", "238", "116")
    do ..Save("632", "238", "116")
    do ..Save("633", "238", "116")
    do ..Save("634", "238", "116")
    do ..Save("637", "238", "116")
    do ..Save("638", "238", "116")
    do ..Save("694", "238", "116")
    do ..Save("693", "239", "113")
    do ..Save("689", "240", "114")
    do ..Save("695", "241", "117")
    do ..Save("693", "242", "114")
    do ..Save("647", "243", "117")
    do ..Save("648", "243", "117")
    do ..Save("649", "243", "117")
    do ..Save("650", "243", "117")
    do ..Save("651", "243", "117")
    do ..Save("652", "243", "117")
    do ..Save("653", "243", "117")
    do ..Save("654", "243", "117")
    do ..Save("655", "243", "117")
    do ..Save("656", "243", "117")
    do ..Save("657", "243", "117")
    do ..Save("658", "243", "117")
    do ..Save("659", "243", "117")
    do ..Save("660", "243", "117")
    do ..Save("661", "243", "117")
    do ..Save("696", "243", "117")
    do ..Save("697", "244", "115")
    do ..Save("647", "246", "118")
    do ..Save("648", "246", "118")
    do ..Save("649", "246", "118")
    do ..Save("650", "246", "118")
    do ..Save("651", "246", "118")
    do ..Save("652", "246", "118")
    do ..Save("654", "246", "118")
    do ..Save("655", "246", "118")
    do ..Save("656", "246", "118")
    do ..Save("657", "246", "118")
    do ..Save("658", "246", "118")
    do ..Save("659", "246", "118")
    do ..Save("661", "246", "118")
    do ..Save("663", "246", "118")
    do ..Save("696", "246", "118")
    do ..Save("665", "247", "119")
    do ..Save("666", "247", "119")
    do ..Save("667", "247", "119")
    do ..Save("699", "247", "119")
    do ..Save("664", "248", "119")
    do ..Save("698", "248", "119")
    do ..Save("695", "249", "118")
    do ..Save("700", "250", "118")
    do ..Save("668", "251", "119")
    do ..Save("671", "251", "119")
    do ..Save("672", "251", "119")
    do ..Save("673", "251", "119")
    do ..Save("674", "251", "119")
    do ..Save("677", "251", "119")
    do ..Save("701", "251", "119")
    do ..Save("702", "252", "119")
    do ..Save("678", "253", "120")
    do ..Save("687", "253", "120")
    do ..Save("598", "254", "120")
    do ..Save("601", "254", "120")
    do ..Save("666", "255", "122")
    do ..Save("667", "255", "122")
    do ..Save("679", "255", "122")
    do ..Save("699", "255", "122")
    do ..Save("680", "257", "120")
    do ..Save("681", "258", "122")
    do ..Save("682", "259", "122")
    do ..Save("683", "259", "122")
    do ..Save("684", "259", "122")
    do ..Save("685", "259", "122")
    do ..Save("686", "259", "122")
    do ..Save("449", "260", "123")
    do ..Save("703", "260", "123")
    do ..Save("704", "260", "123")
    do ..Save("705", "260", "123")
    do ..Save("706", "260", "123")
    do ..Save("707", "260", "123")
    do ..Save("708", "260", "123")
    do ..Save("710", "262", "124")
    do ..Save("711", "262", "124")
    do ..Save("712", "262", "124")
    do ..Save("715", "264", "124")
    do ..Save("716", "264", "124")
    do ..Save("717", "265", "125")
    do ..Save("710", "266", "125")
    do ..Save("711", "266", "125")
    do ..Save("712", "266", "125")
    do ..Save("719", "266", "125")
    do ..Save("569", "267", "126")
    do ..Save("570", "267", "126")
    do ..Save("573", "267", "126")
    do ..Save("720", "267", "126")
    do ..Save("721", "267", "126")
    do ..Save("722", "267", "126")
    do ..Save("723", "267", "126")
    do ..Save("724", "267", "126")
    do ..Save("725", "267", "126")
    do ..Save("726", "267", "126")
    do ..Save("727", "267", "126")
    do ..Save("728", "267", "126")
    do ..Save("729", "267", "126")
    do ..Save("730", "267", "126")
    do ..Save("731", "267", "126")
    do ..Save("733", "268", "127")
    do ..Save("736", "268", "127")
    do ..Save("737", "268", "127")
    do ..Save("738", "268", "127")
    do ..Save("739", "268", "127")
    do ..Save("740", "268", "127")
    do ..Save("741", "268", "127")
    do ..Save("742", "268", "127")
    do ..Save("743", "268", "127")
    do ..Save("744", "268", "127")
    do ..Save("746", "268", "127")
    do ..Save("747", "268", "127")
    do ..Save("748", "268", "127")
    do ..Save("749", "268", "127")
    do ..Save("750", "268", "127")
    do ..Save("751", "268", "127")
    do ..Save("752", "268", "127")
    do ..Save("754", "268", "127")
    do ..Save("757", "268", "127")
    do ..Save("758", "268", "127")
    do ..Save("40", "270", "129")
    do ..Save("463", "270", "129")
    do ..Save("464", "270", "129")
    do ..Save("466", "270", "129")
    do ..Save("753", "270", "129")
    do ..Save("763", "272", "130")
    do ..Save("764", "273", "130")
    do ..Save("765", "273", "130")
    do ..Save("766", "273", "130")
    do ..Save("767", "273", "130")
    do ..Save("768", "273", "130")
    do ..Save("769", "273", "130")
    do ..Save("774", "273", "130")
    do ..Save("772", "275", "130")
    do ..Save("773", "275", "130")
    do ..Save("74", "276", "131")
    do ..Save("379", "276", "131")
    do ..Save("775", "276", "131")
    do ..Save("776", "276", "131")
    do ..Save("777", "276", "131")
    do ..Save("778", "276", "131")
    do ..Save("779", "276", "131")
    do ..Save("783", "276", "131")
    do ..Save("784", "276", "131")
    do ..Save("785", "276", "131")
    do ..Save("786", "276", "131")
    do ..Save("787", "276", "131")
    do ..Save("780", "277", "131")
    do ..Save("781", "278", "131")
    do ..Save("782", "279", "131")
    do ..Save("788", "280", "131")
    do ..Save("790", "281", "131")
    do ..Save("789", "282", "131")
    do ..Save("607", "283", "132")
    do ..Save("791", "283", "132")
    do ..Save("792", "283", "132")
    do ..Save("793", "283", "132")
    do ..Save("794", "283", "132")
    do ..Save("803", "283", "132")
    do ..Save("804", "283", "132")
    do ..Save("781", "284", "133")
    do ..Save("800", "284", "133")
    do ..Save("792", "285", "133")
    do ..Save("793", "285", "133")
    do ..Save("794", "285", "133")
    do ..Save("802", "285", "133")
    do ..Save("804", "285", "133")
    do ..Save("780", "286", "132")
    do ..Save("74", "287", "132")
    do ..Save("775", "287", "132")
    do ..Save("776", "287", "132")
    do ..Save("777", "287", "132")
    do ..Save("779", "287", "132")
    do ..Save("783", "287", "132")
    do ..Save("811", "287", "132")
    do ..Save("795", "288", "133")
    do ..Save("796", "288", "133")
    do ..Save("799", "288", "133")
    do ..Save("789", "290", "132")
    do ..Save("790", "291", "133")
    do ..Save("801", "291", "133")
    do ..Save("788", "292", "132")
    do ..Save("223", "293", "134")
    do ..Save("792", "293", "134")
    do ..Save("793", "293", "134")
    do ..Save("794", "293", "134")
    do ..Save("803", "293", "134")
    do ..Save("804", "293", "134")
    do ..Save("800", "294", "134")
    do ..Save("806", "295", "120")
    do ..Save("807", "295", "120")
    do ..Save("808", "295", "120")
    do ..Save("806", "296", "99")
    do ..Save("807", "296", "99")
    do ..Save("808", "296", "99")
    do ..Save("806", "297", "97")
    do ..Save("807", "297", "97")
    do ..Save("808", "297", "97")
    do ..Save("809", "298", "136")
    do ..Save("842", "298", "136")
    do ..Save("845", "298", "136")
    do ..Save("846", "298", "136")
    do ..Save("848", "298", "136")
    do ..Save("850", "298", "136")
    do ..Save("851", "298", "136")
    do ..Save("852", "298", "136")
    do ..Save("812", "299", "135")
    do ..Save("813", "299", "135")
    do ..Save("817", "299", "135")
    do ..Save("819", "299", "135")
    do ..Save("820", "299", "135")
    do ..Save("821", "299", "135")
    do ..Save("825", "299", "135")
    do ..Save("826", "299", "135")
    do ..Save("828", "299", "135")
    do ..Save("830", "299", "135")
    do ..Save("831", "299", "135")
    do ..Save("832", "299", "135")
    do ..Save("833", "299", "135")
    do ..Save("834", "299", "135")
    do ..Save("837", "299", "135")
    do ..Save("840", "299", "135")
    do ..Save("812", "301", "138")
    do ..Save("813", "301", "138")
    do ..Save("814", "301", "138")
    do ..Save("819", "301", "138")
    do ..Save("820", "301", "138")
    do ..Save("821", "301", "138")
    do ..Save("824", "301", "138")
    do ..Save("825", "301", "138")
    do ..Save("826", "301", "138")
    do ..Save("828", "301", "138")
    do ..Save("830", "301", "138")
    do ..Save("831", "301", "138")
    do ..Save("832", "301", "138")
    do ..Save("835", "301", "138")
    do ..Save("840", "301", "138")
    do ..Save("853", "301", "138")
    do ..Save("854", "301", "138")
    do ..Save("864", "301", "138")
    do ..Save("870", "301", "138")
    do ..Save("855", "302", "140")
    do ..Save("856", "302", "140")
    do ..Save("857", "302", "140")
    do ..Save("858", "302", "140")
    do ..Save("859", "302", "140")
    do ..Save("863", "302", "140")
    do ..Save("867", "302", "140")
    do ..Save("868", "302", "140")
    do ..Save("860", "303", "139")
    do ..Save("861", "303", "139")
    do ..Save("862", "303", "139")
    do ..Save("871", "303", "139")
    do ..Save("872", "303", "139")
    do ..Save("855", "304", "141")
    do ..Save("856", "304", "141")
    do ..Save("857", "304", "141")
    do ..Save("858", "304", "141")
    do ..Save("859", "304", "141")
    do ..Save("863", "304", "141")
    do ..Save("867", "304", "141")
    do ..Save("868", "304", "141")
    do ..Save("781", "305", "141")
    do ..Save("865", "306", "140")
    do ..Save("866", "307", "139")
    do ..Save("789", "308", "141")
    do ..Save("873", "310", "139")
    do ..Save("865", "311", "141")
    do ..Save("447", "312", "142")
    do ..Save("451", "312", "142")
    do ..Save("471", "312", "142")
    do ..Save("874", "312", "142")
    do ..Save("875", "312", "142")
    do ..Save("876", "312", "142")
    do ..Save("877", "312", "142")
    do ..Save("878", "312", "142")
    do ..Save("879", "312", "142")
    do ..Save("880", "312", "142")
    do ..Save("881", "312", "142")
    do ..Save("882", "312", "142")
    do ..Save("883", "312", "142")
    do ..Save("884", "312", "142")
    do ..Save("885", "312", "142")
    do ..Save("897", "312", "142")
    do ..Save("898", "312", "142")
    do ..Save("899", "312", "142")
    do ..Save("886", "313", "143")
    do ..Save("887", "313", "143")
    do ..Save("888", "313", "143")
    do ..Save("889", "313", "143")
    do ..Save("890", "313", "143")
    do ..Save("891", "313", "143")
    do ..Save("892", "313", "143")
    do ..Save("896", "313", "143")
    do ..Save("893", "314", "144")
    do ..Save("894", "314", "144")
    do ..Save("895", "314", "144")
    do ..Save("900", "316", "146")
    do ..Save("901", "316", "146")
    do ..Save("902", "316", "146")
    do ..Save("903", "316", "146")
    do ..Save("904", "316", "146")
    do ..Save("905", "316", "146")
    do ..Save("906", "316", "146")
    do ..Save("907", "316", "146")
    do ..Save("908", "316", "146")
    do ..Save("909", "316", "146")
    do ..Save("910", "316", "146")
    do ..Save("911", "316", "146")
    do ..Save("912", "316", "146")
    do ..Save("913", "316", "146")
    do ..Save("914", "317", "145")
    do ..Save("916", "319", "145")
    do ..Save("917", "320", "145")
    do ..Save("918", "320", "145")
    do ..Save("684", "321", "148")
    do ..Save("686", "321", "148")
    do ..Save("920", "321", "148")
    do ..Save("921", "321", "148")
    do ..Save("923", "322", "147")
    do ..Save("924", "322", "147")
    do ..Save("925", "322", "147")
    do ..Save("926", "322", "147")
    do ..Save("927", "322", "147")
    do ..Save("917", "323", "149")
    do ..Save("666", "324", "148")
    do ..Save("667", "324", "148")
    do ..Save("914", "325", "149")
    do ..Save("916", "326", "149")
    do ..Save("930", "326", "149")
    do ..Save("918", "327", "149")
    do ..Save("931", "328", "151")
    do ..Save("932", "328", "151")
    do ..Save("933", "328", "151")
    do ..Save("934", "328", "151")
    do ..Save("935", "328", "151")
    do ..Save("938", "328", "151")
    do ..Save("939", "328", "151")
    do ..Save("940", "328", "151")
    do ..Save("941", "328", "151")
    do ..Save("942", "328", "151")
    do ..Save("943", "328", "151")
    do ..Save("945", "328", "151")
    do ..Save("916", "329", "150")
    do ..Save("936", "331", "151")
    do ..Save("918", "332", "150")
    do ..Save("937", "333", "150")
    do ..Save("944", "334", "151")
    do ..Save("946", "335", "152")
    do ..Save("947", "335", "152")
    do ..Save("948", "335", "152")
    do ..Save("949", "335", "152")
    do ..Save("950", "335", "152")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.SubGroupStudentD</DataLocation>
<DefaultData>SubGroupStudentDefaultData</DefaultData>
<IdLocation>^Stc.Data.SubGroupStudentD</IdLocation>
<IndexLocation>^Stc.Data.SubGroupStudentI</IndexLocation>
<StreamLocation>^Stc.Data.SubGroupStudentS</StreamLocation>
<Data name="SubGroupStudentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Student</Value>
</Value>
<Value name="3">
<Value>SubGroup</Value>
</Value>
<Value name="4">
<Value>AttendedStatusCode</Value>
</Value>
<Value name="5">
<Value>Training</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Data.Training">
<Description>
Training</Description>
<Super>%Persistent</Super>
<TimeCreated>63098,13359.879291</TimeCreated>

<Property name="Teacher">
<Description>
Teacher</Description>
<Type>Person</Type>
<Required>1</Required>
</Property>

<Property name="CuratorFullName">
<Description>
Curator full name</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="CuratorEmail">
<Description>
Curator full name</Description>
<Type>%String</Type>
</Property>

<Property name="CuratorPhone">
<Description>
Curator phone</Description>
<Type>%String</Type>
</Property>

<Property name="CuratorPhoneSecret">
<Description>
Curator secret phone</Description>
<Type>%String</Type>
</Property>

<Property name="Course">
<Description>
Course</Description>
<Type>Course</Type>
<Required>1</Required>
</Property>

<Property name="SubGroups">
<Description>
Subgroups with students</Description>
<Type>SubGroup</Type>
<Collection>array</Collection>
</Property>

<Property name="City">
<Description>
City of training</Description>
<Type>Region</Type>
<Required>1</Required>
</Property>

<Property name="Street">
<Description>
Address</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Room">
<Description>
Room</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Latitude">
<Description>
Latitude</Description>
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="Longitude">
<Description>
Longitude</Description>
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="DateStart">
<Description>
Training start date</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="DateFinish">
<Description>
Training finish date</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="TimeStart">
<Description>
Training start time</Description>
<Type>%Time</Type>
<Required>1</Required>
</Property>

<Property name="TimeFinish">
<Description>
Training finish time</Description>
<Type>%Time</Type>
<Required>1</Required>
</Property>

<Property name="IsCompleted">
<Description>
Training is finished</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="IsStudentsAutoMailing">
<Description>
Automailing to students in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsFeedBackAutoMailing">
<Description>
Automailing to students in after training</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsTeacherAutoMailing">
<Description>
Automailing to teachers in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsCuratorAutoMailing">
<Description>
Automailing to curator in n - days before start</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IsOrdersAutoMailing">
<Description>
Automailing to contacts in approved orders in the evening </Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="OtherInfo">
<Description>
Other information</Description>
<Type>Stc.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="CalendarEvent">
<Description>
EventId Google Calendar</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="NewStudents">
<Description>
New applications from students for this certain training</Description>
<Type>Stc.Data.OrderNewStudent</Type>
<Cardinality>many</Cardinality>
<Inverse>Training</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="FeedBacks">
<Description>
FeedBacks</Description>
<Type>Stc.Data.FeedBack</Type>
<Cardinality>children</Cardinality>
<Inverse>Training</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="AccessCode">
<Description>
Access code to training for teacher</Description>
<Type>%String</Type>
</Property>

<Property name="CreatedTS">
<Description>
Time of creation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="IsCertificatesDone">
<Description>
Certificates printed and dilivered</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="TeacherPayout">
<Description>
Payout for teacher</Description>
<Type>%Float</Type>
</Property>

<Property name="IsPublic">
<Description>
Is public training or not (shows in calendar)</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="GeoLocationAddress">
<Description>
GeoLocationAddress</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="StudentsCount">
<Description>
Students Count</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {StudentsCount} = ##class({%%CLASSNAME}).GetStudentsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DeliveryAddressOfCertificates">
<Description>
Delivery address of certificates</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="400"/>
</Property>

<Index name="AccessCodeIdx">
<Properties>AccessCode</Properties>
<Unique>1</Unique>
</Index>

<Index name="CourseIdx">
<Properties>Course</Properties>
</Index>

<Index name="TeacherIdx">
<Properties>Teacher</Properties>
</Index>

<Method name="CheckDeletePrivilege">
<Description>
Check delete privilege</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    SET SQLCODE=""
    &sql(%CHECKPRIV DELETE ON Stc_Data.Training)
    if (SQLCODE = 100) quit ##class(Stc.Utils.Msg).GetErrorStatus("NoPrivilege", " USERNAME="_$USERNAME)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="BuildCubes">
<Description>
Build TrainingCube and SubGroupCube</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(%DeepSee.Utils).%BuildCube("TrainingCube",1,0)
    do ##class(%DeepSee.Utils).%BuildCube("SubGroupCube",1,0)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateFacts">
<Description>
UpdateFact in TrainingCube and all subgroup facts in SubGroupCube</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(%DeepSee.Utils).%ProcessFact("TrainingCube",trId)
    
    &sql(DECLARE TrCur CURSOR FOR 
             SELECT ID 
             FROM Stc_Data.Training_SubGroups
             WHERE Training = :trId)    
        
    &sql(OPEN TrCur)
    for  
    {   
        &sql(FETCH TrCur INTO :trSgId) 
        quit:(SQLCODE '= 0)
        
        do ##class(%DeepSee.Utils).%ProcessFact("SubGroupCube",trSgId)  
    }
        
    &sql(CLOSE TrCur)
    
    q $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<FormalSpec>shortInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.isLoaded = $$$YES
    set proxy.accessCode = ..AccessCode
    set proxy.event = ..CalendarEvent
    set proxy.city = ..City.ConvertToProxyObject()
    set proxy.course = ..Course.ConvertToProxyObject(1)
    set proxy.teacher = ..Teacher.ConvertToProxyObject()
    set proxy.dateStart = $ZDATE(..DateStart, 3)
    set proxy.dateFinish = $ZDATE(..DateFinish, 3)
    set proxy.isCompleted = ..IsCompleted   
    set proxy.isCertificatesDone = ..IsCertificatesDone
    set proxy.isPublic = ..IsPublic
    set proxy.deliveryAddressOfCertificates = ..DeliveryAddressOfCertificates
    
    set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart), 1, 5)
    set proxy.timeStartType = "24"
    set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish), 1, 5)
    set proxy.timeFinishType = "24"
    set proxy.timeStartFinish = proxy.timeStart_" - "_proxy.timeFinish
    
    if ($FIND($$$SessionLanguage, "ru") = 0){
        if (..TimeStart > ##class(%Library.Time).DisplayToLogical("12:00")){
            set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart - ##class(%Library.Time).DisplayToLogical("12:00")), 1, 5)
            set proxy.timeStartType = "p.m."
        }
        else{
            set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart), 1, 5)
            set proxy.timeStartType = "a.m."
        }
        
        if (..TimeFinish > ##class(%Library.Time).DisplayToLogical("12:00")){
            set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish - ##class(%Library.Time).DisplayToLogical("12:00")), 1, 5)
            set proxy.timeFinishType = "p.m."
        }
        else{
            set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish), 1, 5)
            set proxy.timeFinishType = "a.m."
        }
        
        set proxy.timeStartFinish = proxy.timeStart_" "_proxy.timeStartType_" - "_proxy.timeFinish_" "_proxy.timeFinishType
    }
    
    
    set proxy.otherInfo = ..OtherInfo.Value
    set proxy.room = ..Room
    set proxy.street = ..Street.Value
    
    set proxy.address = ##class(%ZEN.proxyObject).%New()
    set proxy.address.title = ..GeoLocationAddress
    set proxy.address.point = ..Longitude_" "_..Latitude
    set proxy.isStudentsAutoMailing = ..IsStudentsAutoMailing
    set proxy.isTeacherAutoMailing = ..IsTeacherAutoMailing
    set proxy.isCuratorAutoMailing = ..IsCuratorAutoMailing
    set proxy.isFeedBackAutoMailing = ..IsFeedBackAutoMailing

    if (shortInfo = 1) quit proxy
    
    set proxy.curator = ##class(%ZEN.proxyObject).%New() 
    set proxy.curator.fullName = ..CuratorFullName.Value
    set proxy.curator.email = ..CuratorEmail
    set proxy.curator.phone = ..CuratorPhone
    set proxy.curator.phoneSecret = ..CuratorPhoneSecret
    
    set proxy.feedBacks = ##class(%ZEN.proxyObject).%New()
    set proxy.feedBacks.count = ..FeedBacks.Count()
    
    set proxy.certificates = 0
    &sql(SELECT COUNT(ID) INTO :proxy.certificates FROM Stc_Data.Certificate WHERE Training = :proxy.id)
    
    set proxy.newStudents = ..NewStudents.Count()
    set proxy.sgroups = ..SubGroups.Count()
    set proxy.students = ..StudentsCount
    
    // Training's cost and currency
    set proxy.cost = ##class(%ZEN.proxyObject).%New()
    set proxy.cost.price = ..Course.Price
    set proxy.cost.currency = ..Course.Currency.ConvertToProxyObject()
    
    set proxy.payout = ..TeacherPayout
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&status]]></FormalSpec>
<ReturnType>Training</ReturnType>
<Implementation><![CDATA[
    do ##class(Stc.Utils.Log).Create(..%ClassName(1)_".Save", 
    "ID="_data.id_
    "; CourseID="_data.course.id_
    "; CityID="_data.city.id_
    "; TeacherID="_data.teacher.id_
    "; CuratorFullName="_$ZCONVERT(data.curator.fullName, "I","UTF8")_
    "; CuratorEmail="_data.curator.email_
    "; CuratorPhone="_data.curator.phone_
    "; DateStart="_data.dateStart_
    "; DateFinish="_data.dateFinish_
    "; Street="_$ZCONVERT(data.street, "I","UTF8")_
    "; Point="_data.address.point_
    "; OtherInfo="_$ZCONVERT(data.otherInfo, "I","UTF8")_
    "; Payout="_data.payout)
    
    if (..%ExistsId(data.id) = $$$NO){
        set tr = ..%New()
        set tr.CreatedTS = $ZDT($ZTS, 3)
        set tr.CuratorFullName = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.curator.fullName, "I","UTF8"),"Stc.Data.Localization.Translation;PersonLTextValue")
        set tr.CuratorEmail = data.curator.email
        set tr.CuratorPhone = data.curator.phone
        
        set tr.Street = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.street, "I","UTF8"))
        set tr.OtherInfo = ##class(Stc.Data.Localization.LText).Create($ZCONVERT(data.otherInfo, "I","UTF8"))
        set tr.AccessCode = $SYSTEM.Util.CreateGUID()
    }
    else{
        set tr = ..%OpenId(data.id)
        set tr.CuratorFullName.Value = $ZCONVERT(data.curator.fullName, "I","UTF8")
        set tr.Street.Value = $ZCONVERT(data.street, "I","UTF8")
        set tr.OtherInfo.Value = $ZCONVERT(data.otherInfo, "I","UTF8")
    }
    
    set tr.GeoLocationAddress = $ZCONVERT(data.address.title, "I","UTF8")
    set tr.CuratorEmail = data.curator.email
    set tr.CuratorPhone = $ZCONVERT(data.curator.phone, "I","UTF8")
    set tr.CuratorPhoneSecret = data.curator.phoneSecret
    set tr.IsCertificatesDone = data.isCertificatesDone = $$$YES
    set tr.IsPublic = data.isPublic = $$$YES    
    set tr.DeliveryAddressOfCertificates = $ZCONVERT(data.deliveryAddressOfCertificates, "I","UTF8")
        
    set tr.DateFinish = $ZDATEH(data.dateFinish, 15)
    set tr.DateStart = $ZDATEH(data.dateStart, 15)
    
    if (data.timeStartType = "p.m."){
        set tr.TimeStart = ##class(%Library.Time).DisplayToLogical(data.timeStartType) + ##class(%Library.Time).DisplayToLogical("12:00")
    }
    else{
        set tr.TimeStart = ##class(%Library.Time).DisplayToLogical(data.timeStart)
    }
    
    if (data.timeFinishType = "p.m."){
        set tr.TimeFinish = ##class(%Library.Time).DisplayToLogical(data.timeFinish) + ##class(%Library.Time).DisplayToLogical("12:00")
    }
    else{
        set tr.TimeFinish = ##class(%Library.Time).DisplayToLogical(data.timeFinish)
    }
    
    if (tr.TimeFinish < tr.TimeStart){
        set tr.TimeFinish = tr.TimeStart
    }
    
    set tr.Room = $ZCONVERT(data.room, "I","UTF8")
    set tr.Latitude = $p(data.address.point, " ", 2)
    set tr.Longitude = $p(data.address.point, " ", 1)
    
    set tr.Course = ##class(Course).%OpenId(data.course.id)
    set tr.Teacher = tr.Course.Teachers.GetAt(data.teacher.id) // ##class(Person).%OpenId(data.teacher.id)
    set tr.City = ##class(Region).%OpenId(data.city.id)
    
    set tr.TeacherPayout = data.payout
    
    set status = tr.%Save()
    quit tr
]]></Implementation>
</Method>

<Method name="DeleteSubGroup">
<Description>
Delete subgroup from training, without deleting students</Description>
<FormalSpec>sgId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..SubGroups.RemoveAt(sgId)
    
    set sgroup = ##class(Stc.Data.SubGroup).%OpenId(sgId)
    
    set st = ##class(Stc.Data.Localization.LText).Delete(sgroup.SignerFullName.%Id())
    quit:$$$ISERR(st) st
    
    set st = ##class(Stc.Data.Localization.LText).Delete(sgroup.DocumentInfo.%Id())
    quit:$$$ISERR(st) st
    
    quit ##class(Stc.Data.SubGroup).%DeleteId(sgId)
]]></Implementation>
</Method>

<Method name="CreateCertificates">
<Description>
Create certificates for all students</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set listOfStudents = ##class(%ListOfObjects).%New()
    
    set trId = ..%Id()
    
    &sql(DECLARE TrCur2 CURSOR FOR 
             SELECT Student
             FROM Stc_Data.SubGroupStudent
             WHERE Training = :trId AND AttendedStatusCode <> 'NotVisited') 
        
    &sql(OPEN TrCur2)
    for  
    {   
        &sql(FETCH TrCur2 INTO :stId) 
        quit:(SQLCODE '= 0)
        
        set student = ##class(Person).%OpenId(stId)
        do listOfStudents.Insert(student)
    }
        
    &sql(CLOSE TrCur2)
    
    quit ##class(Stc.Data.Certificate).CreateAll($this, listOfStudents)
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete training with applications</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set training = ..%OpenId(id, 4)
    
    set key = ""
    for i=1:1:training.NewStudents.Count(){
        set key = training.NewStudents.Next(key)
        set order = training.NewStudents.GetAt(key)
        set st = ##class(Stc.Data.OrderNewStudent).Delete(order.%Id())
        if $$$ISERR(st) RETURN st
    }
    
    set st = ##class(Stc.Data.Localization.LText).Delete(training.CuratorFullName.%Id())
    quit:$$$ISERR(st) st
    
    set st = ##class(Stc.Data.Localization.LText).Delete(training.Street.%Id())
    quit:$$$ISERR(st) st
    
    set st = ##class(Stc.Data.Localization.LText).Delete(training.OtherInfo.%Id())
    quit:$$$ISERR(st) st
    
    kill training
    
    quit ..%DeleteId(id, 4)
]]></Implementation>
</Method>

<Method name="AddPersonIntoTraining">
<Description>
Add person to training, subgroup is detirmining automatically</Description>
<FormalSpec>personId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    set trainingId = ..%Id()
    
    // Search student in training to avoid situation, 
    // when student in two different subgroups of one training
    set contains = 0
    &sql(SELECT COUNT(ID) INTO :contains
         FROM Stc_Data.SubGroupStudent
         WHERE SubGroup IN (SELECT $PIECE(ID,'||',2) 
                            FROM Stc_Data.Training_SubGroups 
                            WHERE Training = :trainingId) 
                        AND Student = :personId)
    
     
    if (contains '= 0) quit ##class(Stc.Utils.Msg).GetErrorStatus("personContainsInTraining")
    
    // If training has no this person, maybe training his organization's subgroup
    set person = ##class(Stc.Data.Person).%OpenId(personId)
    set personCompanyId = person.Company.%Id()
    set sgroupId = ""
    
    &sql(SELECT $PIECE(ID,'||',2) INTO :sgroupId FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId AND SubGroups->Payer = :personCompanyId)
    
    if (sgroupId = ""){
        // If training has no organization's subgroup, create subgroup and add person to it
        set sgroup = ##class(Stc.Data.SubGroup).Create(person.Company, ..Course, .status)
        if $$$ISERR(status) quit status
        
        do ##class(SubGroupStudent).Save(person.%Id(), sgroup.%Id(), ..%Id(), .status)
        if $$$ISERR(status) quit status
        
        do ..SubGroups.SetAt(sgroup, sgroup.%Id())
    }
    else{
        // If training has organization's subgroup, just add person to it
        do ##class(Stc.Data.SubGroupStudent).Save(personId, sgroupId, ..%Id(), .status)  
        if $$$ISERR(status) quit status
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="ConvertToProxyObjectForPublic">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.city = ..City.ConvertToProxyObject()
    set proxy.course = ..Course.ConvertToProxyObject()
    set proxy.teacher = ..Teacher.ConvertToProxyObject()
    set proxy.teacher.phone = ""
    set proxy.teacher.company = ""
    set proxy.street = ..Street.Value
    
    set proxy.dateStart = $ZDATE(..DateStart, 3)
    set proxy.dateFinish = $ZDATE(..DateFinish, 3)
    set proxy.dateGoogleCalendar = $REPLACE($ZD(..DateStart, 3)_"/"_$ZD(..DateFinish+1, 3), "-", "")
    
    set proxy.isCompleted = ..IsCompleted   
    
    if (..TimeStart > ##class(%Library.Time).DisplayToLogical("12:00")){
        set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart - ##class(%Library.Time).DisplayToLogical("12:00")), 1, 5)
        set proxy.timeStartType = "p.m."
    }
    else{
        set proxy.timeStart = $e(##class(%Library.Time).LogicalToDisplay(..TimeStart), 1, 5)
        set proxy.timeStartType = "a.m."
    }
    
    if (..TimeFinish > ##class(%Library.Time).DisplayToLogical("12:00")){
        set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish - ##class(%Library.Time).DisplayToLogical("12:00")), 1, 5)
        set proxy.timeFinishType = "p.m."
    }
    else{
        set proxy.timeFinish = $e(##class(%Library.Time).LogicalToDisplay(..TimeFinish), 1, 5)
        set proxy.timeFinishType = "a.m."
    }

    set proxy.timeStartFinish = proxy.timeStart_" "_proxy.timeStartType_" - "_proxy.timeFinish_" "_proxy.timeFinishType
    
    
    set proxy.otherInfo = ..OtherInfo.Value
    set proxy.room = ..Room
    set proxy.address = ##class(%ZEN.proxyObject).%New()
    set proxy.address.title = ..GeoLocationAddress
    set proxy.address.point = ..Longitude_" "_..Latitude
    set proxy.address.lat = ..Latitude
    set proxy.address.lng = ..Longitude
    
    set proxy.curator = ##class(%ZEN.proxyObject).%New() 
    set proxy.curator.fullName = ..CuratorFullName.Value
    set proxy.curator.email = ..CuratorEmail
    set proxy.curator.phone = ..CuratorPhone
    
    quit proxy
]]></Implementation>
</Method>

<Method name="GetCalendarEventDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set descr = ""
    
    try{
        /*
            <a href='http://%1'>Программа курса</a><br><br>
            <a href='http://%2'>Записаться на обучение</a><br><br>
            Место проведения:<br>
            %3<br><br>
            Преподаватель:<br>
            %4<br><br>
            Время проведения: %5<br>
            %6%7
        */
        
        set pattern = ##class(Stc.Utils.Msg).GetMsg("CalendarEvent")
        set urlJoin = ##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/order" 
        set urlCourse = tr.Course.ProgramUrl
        set cityFullName = tr.City.Name.Value_", "_tr.City.ParentRegion.Name.Value_", "_tr.City.ParentRegion.ParentRegion.Name.Value
        set street = tr.Street.Value
        set room = tr.Room
        set time = $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5)_" - "_$e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5)
        set teacherData = tr.Teacher.LastName.Value_" "_tr.Teacher.FirstName.Value_", "_tr.Teacher.Email                                
        set curatorData = ""
        
        if (tr.CuratorFullName.Value '= ""){
            set curatorData = "<br>"_##class(Stc.Utils.Msg).GetMsg("contactPerson")_":<br>"_tr.CuratorFullName.Value
            
            if (tr.CuratorPhone '= ""){
                set curatorData = curatorData_", "_tr.CuratorPhone
            }
            
            set curatorData = curatorData_"<br>"
        }
                    
        set otherInfoData = ""
        if (tr.OtherInfo.Value '= ""){
            set otherInfoData = "<br>"_tr.OtherInfo.Value
        }
                    
        set descr = ##class(%MessageDictionary).FormatText(pattern, urlCourse, urlJoin, cityFullName_"<br>"_street_", "_room, teacherData, time, curatorData, otherInfoData)
    }
    catch(ex){
        set descr = ex.AsStatus()
    }
    
    quit descr
]]></Implementation>
</Method>

<Method name="GetStudentsContacts">
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set contacts = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE TrStudEmCur CURSOR FOR 
                 SELECT Student As ID, Student->FullName As FullName, Student->Email 
                 FROM Stc_Data.SubGroupStudent
                 WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trId)
                 ORDER BY FullName) 
            
    &sql(OPEN TrStudEmCur)
    for  
    {   
        &sql(FETCH TrStudEmCur INTO :id, :fullName, :email) 
        quit:(SQLCODE '= 0)
        set item = ##class(%ZEN.proxyObject).%New()
        set item.id = id
        set item.name = fullName
        set item.email = email
        do contacts.Insert(item)    
    }
    &sql(CLOSE TrStudEmCur)
    
    quit contacts
]]></Implementation>
</Method>

<Method name="GetAccessCodeForFeedbackList">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash(..AccessCode_..Teacher.Email)), "/", "")
]]></Implementation>
</Method>

<Method name="GetTeacherPayout">
<Description>
Get teacher payout for training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[trainingId:%String,teacherId:%String,&resultData:%ZEN.proxyObject]]></FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
    /* 
    Формула расчета: p = Y * x * v * h; Y = 1 + (y1-1) + (y2-1) + (y3-1) <= 1.5
    v - стоимость нормочаса обучения - величина v
    x - Коэф. сложности курса 
    h - Продолжительность курса в часах
    y1 - количество обучений любых курсов этого преподавателя за последний год до обучения. изменяется от 0.8 до 1.1 с шагом 0.1
    y2 - опыт обучений именно этого курса за всю историю. Изменяется от 0.75 до 1.25 c шагом 0.05. Если это первое обучение этому курсу в жизни, то y2=0.75
    y3 - рейтинг преподавателя по отзывам слушателей. Отзывы ставят оценки. Учитывается средняя оценка именно по этому курсу.Оценки меняются от 1 до 5. коэффициент меняется от 0,9 до 1.1 в пропорции.
    */
    
    set tr = ..%OpenId(trainingId)
    set trDateStart = tr.DateStart
    set trCourseId = tr.Course.%Id()
    
    set (Y, y1, y2, y3) = 0
    
    // 1. Количество любых обучений за последний год
    &sql(SELECT %NOLOCK COUNT(ID) INTO :y1
         FROM Stc_Data.Training
         WHERE ID <> :trainingId AND 
               Teacher = :teacherId AND 
               DateFinish >= (:trDateStart - 365) AND 
               DateStart <= :trDateStart)
    
    set y1 = 0.8 + (y1 * 0.1)
    if (y1 > 1.1) set y1 = 1.1
    
    // 2. Количество обучений этого курса за всё время
    &sql(SELECT %NOLOCK COUNT(ID) INTO :y2
         FROM Stc_Data.Training
         WHERE ID <> :trainingId AND 
               Teacher = :teacherId AND 
               Course = :trCourseId)
    
    set y2 = 0.75 + (y2 * 0.05)
    if (y2 > 1.25) set y2 = 1.25
    
    // 3. Средняя оценка по курсу (отзывы)
    &sql(SELECT ROUND(AVG(AvgInstructorRating), 2) INTO :y3 
         FROM Stc_Data.FeedBack 
         WHERE Training <> :trainingId AND 
               Training->Course = :trCourseId AND 
               Training->Teacher = :teacherId)
    
    // 2,3,4,5; колы не учитываем
    if (+y3 '= 0){
        set y3 = ((y3 - 1) * 0.05) + 0.9
    }
    else{
        // Ну если нет отзывов вообще
        set y3 = 1
    }
    
    set Y = $NORMALIZE(1 + (y1-1) + (y2-1) + (y3-1), 2)
    set P = Y * tr.Course.DifficultyCoefficient * tr.Course.HourPayout * tr.Course.Hours
    set PRound = $NORMALIZE(((P + 49)/100), 0) * 100 // Округление до сотни в сторону увеличения
    
    set resultData = ##class(%ZEN.proxyObject).%New()
    set resultData.P = P
    set resultData.PRound = PRound
    set resultData.Y = Y
    set resultData.y1 = y1
    set resultData.y2 = y2
    set resultData.y3 = y3
    set resultData.x = tr.Course.DifficultyCoefficient
    set resultData.v = tr.Course.HourPayout
    set resultData.h = tr.Course.Hours
    set resultData.currency = tr.Course.Currency.Name.Value
   
    quit PRound
]]></Implementation>
</Method>

<Method name="GetStudentsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    &SQL(SELECT %NOLOCK COUNT(Student) INTO :count
         FROM Stc_Data.SubGroupStudent
         WHERE SubGroup IN (SELECT %NOLOCK SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trId))
    
    quit count
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Data.TrainingD</DataLocation>
<DefaultData>TrainingDefaultData</DefaultData>
<IdLocation>^Stc.Data.TrainingD</IdLocation>
<IndexLocation>^Stc.Data.TrainingI</IndexLocation>
<StreamLocation>^Stc.Data.TrainingS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SubGroups">
<Attribute>SubGroups</Attribute>
<Structure>subnode</Structure>
<Subscript>"SubGroups"</Subscript>
</Data>
<Data name="TrainingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Teacher</Value>
</Value>
<Value name="3">
<Value>City</Value>
</Value>
<Value name="4">
<Value>Course</Value>
</Value>
<Value name="5">
<Value>Street</Value>
</Value>
<Value name="6">
<Value>Room</Value>
</Value>
<Value name="7">
<Value>Latitude</Value>
</Value>
<Value name="8">
<Value>Longitude</Value>
</Value>
<Value name="9">
<Value>TrainingTS</Value>
</Value>
<Value name="10">
<Value>DateStart</Value>
</Value>
<Value name="11">
<Value>DateFinish</Value>
</Value>
<Value name="12">
<Value>TimeStart</Value>
</Value>
<Value name="13">
<Value>TimeFinish</Value>
</Value>
<Value name="14">
<Value>OtherInfo</Value>
</Value>
<Value name="15">
<Value>IsCompleted</Value>
</Value>
<Value name="16">
<Value>SubGroupNumber</Value>
</Value>
<Value name="17">
<Value>CalendarEvent</Value>
</Value>
<Value name="18">
<Value>IsAutoMailing</Value>
</Value>
<Value name="19">
<Value>AccessCode</Value>
</Value>
<Value name="20">
<Value>IsStudentsAutoMailing</Value>
</Value>
<Value name="21">
<Value>IsTeacherAutoMailing</Value>
</Value>
<Value name="22">
<Value>CuratorFullName</Value>
</Value>
<Value name="23">
<Value>CuratorEmail</Value>
</Value>
<Value name="24">
<Value>CuratorPhone</Value>
</Value>
<Value name="25">
<Value>IsFeedBackAutoMailing</Value>
</Value>
<Value name="26">
<Value>IsCuratorAutoMailing</Value>
</Value>
<Value name="27">
<Value>CuratorPhoneSecret</Value>
</Value>
<Value name="28">
<Value>IsOrdersAutoMailing</Value>
</Value>
<Value name="29">
<Value>CreatedTS</Value>
</Value>
<Value name="30">
<Value>IsCertificatesDone</Value>
</Value>
<Value name="31">
<Value>TeacherPayout</Value>
</Value>
<Value name="32">
<Value>IsPublic</Value>
</Value>
<Value name="33">
<Value>GeoLocationAddress</Value>
</Value>
<Value name="34">
<Value>DeliveryAddressOfCertificates</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.DeepSee.FeedBackCube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeCreated>63584,56275.532248</TimeCreated>
<DependsOn>Stc.Data.FeedBack</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="FeedBackCube" displayName="FeedBackCube" disabled="false" abstract="false" sourceClass="Stc.Data.FeedBack" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
  <dimension name="Name" disabled="false" hasAll="false" allCaption="All Name" allDisplayName="Name" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="Training.Course" name="Course" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="Training.Course.Name.Value" name="Value" disabled="false" hidden="false" isName="true" isDescription="false" isReference="false" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Teacher" disabled="false" hasAll="false" allCaption="All Teacher" allDisplayName="Teacher" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="Training.Teacher" name="Teacher" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="Training.Teacher.LastName.Value" name="Value" disabled="false" hidden="false" isName="true" isDescription="false" isReference="false" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <!--<measure sourceProperty="AvgInstructorRating" name="AvgInstructorRating" displayName="Суммарная оценка" disabled="false" aggregate="SUM" type="integer" hidden="false" searchable="false"></measure>
  <measure sourceProperty="AvgInstructorRating" name="AvgInstructorRating" displayName="Средняя оценка" disabled="false" aggregate="AVG" type="integer" hidden="false" searchable="false"></measure>
  <listing name="FeedBackListing" disabled="false" listingType="table" fieldList="Training-&gt;Course-&gt;Name-&gt;Value,Training-&gt;DateStart,Training-&gt;Teacher-&gt;FullName,Author,AboutTeacher,AvgInstructorRating"></listing>
-->
</cube>
]]></Data>
</XData>
</Class>


<Class name="Stc.DeepSee.KPI.TrainingPoints">
<Description>
Stc.DeepSee.KPI.TrainingPoints.</Description>
<Super>%DeepSee.KPI</Super>
<TimeCreated>63246,4017.552393</TimeCreated>

<Parameter name="DOMAIN">
</Parameter>

<Parameter name="RESOURCE">
</Parameter>

<XData name="KPI">
<Description>
Этот блок XData содержит определение KPI</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="TrainingPointsKPI" sourceType="sql"
 caption="TrainingPointsKPI"
 sql=""
>
<property name="ID"         columnNo="1"/>
<property name="Course"     columnNo="2"/>
<property name="PlacemarkPreset" columnNo="3"/>
<property name="City"       columnNo="4"/>
<property name="Street"     columnNo="5"/>
<property name="Room"       columnNo="6"/>
<property name="DateStart"  columnNo="7"/>
<property name="DateFinish" columnNo="8"/>
<property name="Teacher"    columnNo="9"/>
<property name="StudentsCount"   columnNo="10"/>
<property name="SubGroupsCount"  columnNo="11"/>
<property name="Latitude"    columnNo="12"/>
<property name="Longitude"   columnNo="13"/>
<property name="CourseDescription" columnNo="14"/>

<filter name="Course" sql="SELECT Name->Value As Name FROM Stc_Data.Course ORDER BY Name"/>
<filter name="CompanyType" sql="SELECT Name->Value As Name FROM Stc_Data.CompanyType"/>
<filter name="Status"/>
<filter name="Year" sql="SELECT DISTINCT DATEPART('YEAR',DateStart) as Name FROM Stc_Data.Training ORDER BY Name"/>
<filter name="Teacher" sql="SELECT DISTINCT %EXACT(Teacher->FullName) as FullName FROM Stc_Data.Training ORDER BY FullName"/>
<filter name="Company" sql="SELECT DISTINCT %EXACT(SubGroups->Payer->ShortName->Value) as ShortName FROM Stc_Data.Training_SubGroups ORDER BY ShortName"/>
</kpi>
]]></Data>
</XData>

<Method name="%OnGetSQL">
<Description>
Return an SQL statement to execute.</Description>
<FormalSpec><![CDATA[&pSQL:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pSQL = ..GetSql(..%filterValues.Year, ..%filterValues.Status, ..%filterValues.Course, ..%filterValues.Teacher, ..%filterValues.Company, ..%filterValues.CompanyType)
	set ^temp("kpisql") = pSQL
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSql">
<ClassMethod>1</ClassMethod>
<FormalSpec>year,status,course,teacher,company,companyType</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set whereCondition = ""
	
	// ГОД
	if (year '= "")	set whereCondition = ..GetSqlConditionForFilter(whereCondition, "DATEPART('YEAR', tr.DateStart) "_..GetMultiValueFromFilter(year))
	
	// СТАТУС
	if (status '= "") set whereCondition = ..GetSqlConditionForFilter(whereCondition, "tr.IsCompleted = "_status)
	
	// КУРС
	if (course '= "") set whereCondition = ..GetSqlConditionForFilter(whereCondition, "tr.Course->Name->Value "_..GetMultiValueFromFilter(course))
		
	// ПРЕПОДАВАТЕЛЬ
	if (teacher '= "") set whereCondition = ..GetSqlConditionForFilter(whereCondition, "tr.Teacher->FullName "_..GetMultiValueFromFilter(teacher))
	
	// ОРГАНИЗАЦИЯ
	if (company '= "") set whereCondition = ..GetSqlConditionForFilter(whereCondition, "0 < (SELECT COUNT(SubGroups) FROM Stc_Data.Training_SubGroups WHERE Training = tr.ID AND SubGroups->Payer->ShortName->Value "_..GetMultiValueFromFilter(company))
	
	// ТИП ОРГАНИЗАЦИИ
	if (companyType '= "") set whereCondition = ..GetSqlConditionForFilter(whereCondition, "0 < (SELECT COUNT(SubGroups) FROM Stc_Data.Training_SubGroups WHERE Training = tr.ID AND SubGroups->Payer->Type->Name->Value='"_companyType_"')")
	
	
	quit $replace(##class(Stc.DeepSee.KPI.Utils).GetStringFromXData("sql", ..%ClassName(1)), ":WHERECondition", whereCondition)
]]></Implementation>
</Method>

<Method name="GetSqlConditionForFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>whereCondition,customCondition</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (whereCondition = ""){
		quit "WHERE "_customCondition
	}
	
	quit whereCondition_" AND "_customCondition
]]></Implementation>
</Method>

<Method name="GetMultiValueFromFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set not = ""
	if ($FIND(value, "%NOT") '= 0){
			set not = "NOT"
			set value = $REPLACE(value, "%NOT ", "")
	}
	
	quit not_" IN ('"_$REPLACE($REPLACE($REPLACE(value,"{",""),"}",""), ",", "','")_"')"
]]></Implementation>
</Method>

<Method name="%OnGetFilterMembers">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pFilter:%String,*pMembers:%List,pSearchKey:%String="",pDataSourceName:%String="",&pFilterValues:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status = $$$OK

    Try {
        If (pFilter = "Status") {
            Set pMembers($I(pMembers)) = $LB(##class(Stc.Utils.Msg).GetMsg("completed"),1)
            Set pMembers($I(pMembers)) = $LB(##class(Stc.Utils.Msg).GetMsg("uncompleted"),0)
        }
    }
    Catch(ex) {
        Set status = ex.AsStatus()
    }

    Quit status
]]></Implementation>
</Method>

<XData name="sql">
<Data><![CDATA[
<xml><![CDATA[
SELECT
tr.ID, 
tr.Course->Name->Value As Course,
tr.Course->YandexPlacemarkPreset As PlacemarkPreset,
tr.City->Name->Value As City,
tr.Street->Value As Street,
tr.Room As Room,
TO_CHAR(tr.DateStart,'DD-MM-YYYY'),
TO_CHAR(tr.DateFinish,'DD-MM-YYYY'),
tr.Teacher->FullName ||', '|| tr.Teacher->Email As Teacher,
(SELECT COUNT(Student) FROM Stc_Data.SubGroupStudent WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = tr.ID)) As StudentsCount,
(SELECT COUNT(SubGroups) FROM Stc_Data.Training_SubGroups WHERE Training = tr.ID) As SubGroupsCount,
tr.Latitude,
tr.Longitude,
tr.Course->Description->Value As CourseDescription
FROM Stc_Data.Training as tr 
:WHERECondition
ORDER BY  tr.Course->Name->Value, tr.DateStart DESC
]]]]><![CDATA[></xml>
]]></Data>
</XData>
</Class>


<Class name="Stc.DeepSee.KPI.TrainingStudents">
<Description>
Stc.DeepSee.KPI.TrainingStudents</Description>
<Super>%DeepSee.KPI</Super>
<TimeCreated>63246,4363.099841</TimeCreated>

<Parameter name="DOMAIN">
</Parameter>

<Parameter name="RESOURCE">
</Parameter>

<XData name="KPI">
<Description>
Этот блок XData содержит определение KPI</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="TrainingStudentsKPI" sourceType="sql"
 caption="TrainingStudentsKPI"
 sql=""
>
<property name="FullName" displayName="FullName" columnNo="1"/>
<property name="Company" displayName="Company" columnNo="2"/>
<property name="Email" displayName="Email" columnNo="3"/>
<property name="Phone" displayName="Phone" columnNo="4"/>

<filter name="Training" displayName="Training" filterProperty=""/>
</kpi>
]]></Data>
</XData>

<Method name="%OnGetSQL">
<Description>
Return an SQL statement to execute.</Description>
<FormalSpec><![CDATA[&pSQL:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (..%filterValues.Training = "") {
		set pSQL = "SELECT NULL WHERE 1>2"
		quit $$$OK
	}
	elseif (..%filterValues.Training = "0"){
		set pSQL = "SELECT NULL"
		quit $$$OK
	}
	
	//=============== Костыль =======================
	/*
	Назначение и причина:
	Если таблица scorecard пустая и мы нажали на обучение, у которого нет студентов, то всё ок.
	Если мы нажали на обучение со студентами - таблица заполнилась -> OK.
	Потом мы нажали на обучение без студентов, то тут начинается зависание виджета, т.е. заполненную таблицу scorecard не получается обновить - обнулить, т.к. студентов нет.
	
	Поэтому приходится проверять - если подгрупп нет, то выводить 1 запись-пустую. Но может зависнуть, если подгруппа есть, а в ней студентов нет, но это возникает крайне редко, а запрос усложнять не стоит. 
	*/
	set trainingId = ..%filterValues.Training
	set sgroupsCount = 0
	&sql(SELECT COUNT(SubGroups) INTO :sgroupsCount FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId)
	if (sgroupsCount = 0){
		set pSQL = "SELECT NULL"
		quit $$$OK
	}
	//===============================================	
	
	set pSQL = $replace(##class(Stc.DeepSee.KPI.Utils).GetStringFromXData("sql", ..%ClassName(1)), ":trainingId", ..%filterValues.Training)
	
	Quit $$$OK
]]></Implementation>
</Method>

<XData name="sql">
<Data><![CDATA[
<xml><![CDATA[
SELECT 
Student->LastName->Value || ' ' || SUBSTRING(Student->FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(Student->MiddleName->Value,''),1,1) || '. ' As FullName,
Student->Company->ShortName->Value As Company,
Student->Email,
Student->Phone
FROM Stc_Data.SubGroupStudent
WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId)
ORDER BY Company, FullName
]]]]><![CDATA[></xml>
]]></Data>
</XData>
</Class>


<Class name="Stc.DeepSee.KPI.Utils">
<TimeCreated>63246,3767.058813</TimeCreated>

<Method name="GetStringFromXData">
<Description>
Извлечение SQL-запроса из блока XData с указанным именем</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,className:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status
	#dim result As %String = ""
	
	#dim xdata As %Persistent = ##class(%Dictionary.CompiledXData).%OpenId(className_ "||" _ name,, .sc)
	if $$$ISOK(sc) && $isObject(xdata)
	{
		#dim node As %XML.TextReader
		set sc = ##class(%XML.TextReader).ParseStream(xdata.Data, .node)
		if $$$ISOK(sc)
		{
			do node.MoveToContent()
			while (node.NodeType '= "chars") && (node.NodeType '= "cdata") && node.Read() {}
			
			if (node.NodeType = "chars") || (node.NodeType = "cdata") set result = node.Value
		}
	}	
	
	quit result
]]></Implementation>
</Method>
</Class>


<Class name="Stc.DeepSee.OrderCube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeCreated>63399,80662.230296</TimeCreated>
<DependsOn>Stc.Data.Order</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="OrderCube" displayName="OrderCube" disabled="false" abstract="false" sourceClass="Stc.Data.Order" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
  <dimension name="Course" displayName="Курс" disabled="false" hasAll="false" allCaption="All Name" allDisplayName="Name" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="Course" displayName="Курс" disabled="false">
      <level sourceProperty="Course.Name" name="Name" displayName="Курс" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="Course.Name.Value" name="Value" displayName="Курс" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <dimension name="OrderStatus" displayName="Статус" disabled="false" hasAll="false" allCaption="All Name1" allDisplayName="Name1" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="OrderStatus.Name" name="OrderStatus" displayName="Статус" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="OrderStatus.Name.Value" name="Value" displayName="Статус" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <measure sourceProperty="StudentsNumber" name="StudentsNumber" displayName="Слушатели" disabled="false" aggregate="SUM" type="integer" hidden="false" searchable="false"></measure>
  <listing name="Orders" disabled="false" listingType="table" sql="SELECT Course-&gt;Name-&gt;Value As &quot;$$$TEXT[&quot;Курс/Stc&quot;]&quot;,
Company-&gt;ShortName-&gt;Value As &quot;$$$TEXT[&quot;Организация/Stc&quot;]&quot;,
StudentsNumber As &quot;$$$TEXT[&quot;Слушатели/Stc&quot;]&quot;,
CreatedTS As &quot;$$$TEXT[&quot;Дата создания/Stc&quot;]&quot;
FROM $$$SOURCE WHERE $$$RESTRICT"></listing>
</cube>
]]></Data>
</XData>
</Class>


<Class name="Stc.DeepSee.SubGroupCube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeCreated>63258,11138.406341</TimeCreated>
<DependsOn>Stc.Data.TrainingSubGroups</DependsOn>

<Parameter name="DOMAIN">
<Default>Stc</Default>
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="SubGroupCube" displayName="SubGroupCube" description="после компиляции выполните do ##class(Stc.Utils.Msg).DeepSeeMsg() т.к. затираются лейблы" disabled="false" abstract="false" sourceClass="Stc.Data.TrainingSubGroups" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
  <dimension name="Company" displayName="Организация" disabled="false" hasAll="false" allCaption="All Value" allDisplayName="Value" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="SubGroups.Payer.ShortName" name="CompanyShortName" displayName="Организация" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="SubGroups.Payer.ShortName.Value" name="Value" displayName="Организация" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
    </hierarchy>
    <hierarchy name="H2" displayName="География" disabled="false">
      <level sourceProperty="SubGroups.Payer.City.ParentRegion.ParentRegion.Name" name="Country" displayName="Страна" disabled="false" list="false" nullReplacement="- - -" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="SubGroups.Payer.City.ParentRegion.ParentRegion.Name.Value" name="CountryName" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
      <level sourceProperty="SubGroups.Payer.City.Name" name="City" displayName="Город" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="SubGroups.Payer.City.Name.Value" name="CityName" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
      <level sourceProperty="SubGroups.Payer.ShortName" name="ShortName" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="SubGroups.Payer.ShortName.Value" name="Value" disabled="false" hidden="false" isName="true" isDescription="false" isReference="false" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <dimension name="CompanyType" displayName="Тип организации" disabled="false" hasAll="false" allCaption="All Type" allDisplayName="Type" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="SubGroups.Payer.Type.Name" name="Name" displayName="Тип организации" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="SubGroups.Payer.Type.Name.Value" name="Value" displayName="Тип организации" disabled="false" hidden="false" isName="true" isDescription="false" isReference="true" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Year" displayName="Год" disabled="false" hasAll="false" allCaption="All DateFinish" allDisplayName="DateFinish" sourceProperty="Training.DateFinish" type="time" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level name="Year" displayName="Год" disabled="false" timeFunction="Year" list="false" useDisplayValue="true" useAsFilter="true">
      </level>
      <level name="Month" displayName="Месяц" disabled="false" timeFunction="MonthYear" list="false" useDisplayValue="true" useAsFilter="true">
      </level>
    </hierarchy>
  </dimension>
  <measure sourceExpression="%cube.GetStudentsCount(%source.%ID)" name="Students" displayName="Слушатели" disabled="false" aggregate="SUM" type="integer" hidden="false" searchable="false" iKnowSource="string"></measure>
  <measure sourceProperty="SubGroups.Amount" name="Amount" displayName="Оплата" disabled="false" aggregate="SUM" type="number" hidden="false" searchable="true"></measure>
  <relationship sourceProperty="Training" name="TrainingCubeRelation" disabled="false" relatedCube="TrainingCube" inverse="SubGroupCubeRelation" cardinality="one"></relationship>
  <calculatedMember name="CountryName" disabled="false" dimension="Company" valueExpression="left([Company].[H2].[CountryNew].Members, 3)" hidden="false"></calculatedMember>
  <listing name="Students" displayName="Слушатели" disabled="false" listingType="table" fieldList="SubGroups-&gt;Students-&gt;Email" sql="SELECT stud.Student-&gt;FullName As &quot;$$$TEXT[&quot;Слушатели/Stc&quot;]&quot;,  stud.Student-&gt;Email As Email,  stud.Student-&gt;Phone as &quot;$$$TEXT[&quot;Телефон/Stc&quot;]&quot;,  sg.Training-&gt;DateFinish As &quot;$$$TEXT[&quot;Дата/Stc&quot;]&quot;,   sg.Training-&gt;Course-&gt;Name-&gt;Value As &quot;$$$TEXT[&quot;Курс/Stc&quot;]&quot;,   sg.Training-&gt;City-&gt;Name-&gt;Value As &quot;$$$TEXT[&quot;Город/Stc&quot;]&quot;   FROM Stc_Data.SubGroupStudent As stud   INNER JOIN Stc_Data.Training_SubGroups as sg ON sg.SubGroups=stud.SubGroup   WHERE stud.SubGroup IN (SELECT SubGroups FROM $$$SOURCE WHERE $$$RESTRICT)   ORDER BY &quot;$$$TEXT[&quot;Дата/Stc&quot;]&quot;, &quot;$$$TEXT[&quot;Курс/Stc&quot;]&quot;, &quot;$$$TEXT[&quot;Город/Stc&quot;]&quot;, &quot;$$$TEXT[&quot;Слушатели/Stc&quot;]&quot;"></listing>
</cube>
]]></Data>
</XData>

<Method name="GetStudentsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set count = 0
	
	&sql(SELECT SubGroups INTO :sgId FROM Stc_Data.Training_SubGroups WHERE ID=:id)
	
	&sql(SELECT COUNT(Student) INTO :count 
		 FROM Stc_Data.SubGroupStudent
		 WHERE SubGroup = :sgId)
	
	quit count
]]></Implementation>
</Method>
</Class>


<Class name="Stc.DeepSee.TrainingCube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeCreated>63245,72855.695693</TimeCreated>
<DependsOn>Stc.Data.Training</DependsOn>

<Parameter name="DOMAIN">
<Default>Stc</Default>
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="TrainingCube" displayName="TrainingCube" description="после компиляции выполните do ##class(Stc.Utils.Msg).DeepSeeMsg() т.к. затираются лейблы" disabled="false" abstract="false" sourceClass="Stc.Data.Training" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
  <dimension name="Course" displayName="Курс" disabled="false" hasAll="false" allCaption="All Value" allDisplayName="Value" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="Course.Name" name="CourseName" displayName="Курс" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="Course.Name.Value" name="Value" displayName="Курс" disabled="false" hidden="false" isName="true" isReference="true" useDisplayValue="false"></property>
        <property sourceProperty="Course.Description.Value" name="Description"  disabled="false" hidden="false" isName="false" isReference="false" useDisplayValue="false" isDescription="true"> </property>
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Year" displayName="Год" disabled="false" hasAll="false" allCaption="All DateFinish" allDisplayName="DateFinish" sourceProperty="DateFinish" type="time" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level name="Year" displayName="Год" disabled="false" timeFunction="Year" list="false" useDisplayValue="true" useAsFilter="true">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Teacher" displayName="Преподаватель" disabled="false" hasAll="false" allCaption="All Teacher" allDisplayName="Teacher" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="Teacher" name="TeacherFullName" displayName="Преподаватель" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
        <property sourceProperty="Teacher.FullName" name="FullName" displayName="Преподаватель" disabled="false" hidden="false" isName="true" isReference="true" useDisplayValue="false"></property>
      </level>
    </hierarchy>
  </dimension>
  <measure sourceProperty="%ID" name="Trainings" displayName="Обучения" disabled="false" aggregate="COUNT" type="integer" hidden="false" searchable="false" iKnowSource="string"></measure>
  <relationship name="SubGroupCubeRelation" disabled="false" relatedCube="SubGroupCube" inverse="TrainingCubeRelation" cardinality="many"></relationship>
  <listing name="Trainings" displayName="Обучения" disabled="false" listingType="table" sql="SELECT trTab.Course-&gt;Name-&gt;Value As &quot;$$$TEXT[&quot;Курс/Stc&quot;]&quot;,  trTab.City-&gt;Name-&gt;Value As &quot;$$$TEXT[&quot;Город/Stc&quot;]&quot;,  trTab.DateStart As &quot;$$$TEXT[&quot;Дата начала/Stc&quot;]&quot;,  trTab.DateFinish As &quot;$$$TEXT[&quot;Дата окончания/Stc&quot;]&quot;,  (SELECT COUNT(SubGroups) FROM Stc_Data.Training_SubGroups WHERE Training = trTab.ID) As &quot;$$$TEXT[&quot;Подгруппы/Stc&quot;]&quot;,  (SELECT COUNT(Student) FROM Stc_Data.SubGroupStudent as sgStuds INNER JOIN Stc_Data.Training_SubGroups As trSubs ON trSubs.Training = trTab.ID AND sgStuds.SubGroup=trSubs.SubGroups) As &quot;$$$TEXT[&quot;Слушатели/Stc&quot;]&quot;  FROM Stc_Data.Training as trTab WHERE trTab.ID IN (SELECT ID FROM $$$SOURCE WHERE $$$RESTRICT) ORDER BY &quot;$$$TEXT[&quot;Дата окончания/Stc&quot;]&quot;, &quot;$$$TEXT[&quot;Город/Stc&quot;]&quot;, &quot;$$$TEXT[&quot;Курс/Stc&quot;]&quot; "></listing>
</cube>
]]></Data>
</XData>

<Method name="GetStudentsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set count = 0
	
	&sql(SELECT COUNT(sgStudents.Student) INTO :count 
		 FROM Stc_Data.SubGroupStudent as sgStudents INNER JOIN 
		 	  Stc_Data.Training_SubGroups as trSubGroups ON trSubGroups.SubGroups = sgStudents.SubGroup
		 WHERE trSubGroups.Training = :id)
	
	quit count
]]></Implementation>
</Method>

<Method name="GetTeacherFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set training = ##class(Stc.Data.Training).%OpenId(id)
	set fullName = training.Teacher.LastName.Value
	if (training.Teacher.FirstName.Value '= "-") set fullName = fullName_" "_training.Teacher.FirstName.Value
	quit fullName
]]></Implementation>
</Method>

<Method name="GetCompanies">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set training = ##class(Stc.Data.Training).%OpenId(id)
	set companies = ""
	set key = ""
	for i=1:1:training.SubGroups.Count(){
		set key = training.SubGroups.Next(key)
		//set companies = companies_training.SubGroups.GetAt(key).Payer.ShortName.Value_","
		set companies = companies_training.SubGroups.GetAt(key).Payer.%Id()_","
	}
	
	quit $E(companies,1,*-1)
]]></Implementation>
</Method>

<Method name="GetCompanyNameById">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set name = "--"
	&sql(SELECT ShortName->Value INTO :name FROM Stc_Data.Company WHERE ID = :id)
	quit name
]]></Implementation>
</Method>
</Class>


<Class name="Stc.DeepSee.TrainingPointsMapPortlet">
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeCreated>63246,1484.235656</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Parameter INCLUDEFILES = "script:http://maps.google.com/maps/api/js?sensor=false&language=ru";

]]></Content>
</UDLText>

<Parameter name="XMLTYPE">
<Description>
Portlet that displays a clickable google map. Supports 2012.2 and higher versions of Cache.
Improvements compared to %DeepSee.Component.Widget.map:
1) Polygon support. In addition to markers, this widget supports clickable colored polygons with tooltips.
   The "coordsProperty" widget setting should be set to the name of a data source property that provides polygon coordinates. The value of this property is expected to contain one or more ordered sequences of coordinates each of which designates a closed loop.
   Sequences are delimited by ; (semicolon). Coordinates in such a sequence are delimited by spaces, for example: 42.725042,55.257428,0 42.727162,55.270206,0 42.737196,55.27019,0 42.725042,55.257428,0
   Each coordinate triple consists of latitude / longitude numbers and a noWrap flag (see http://code.google.com/intl/en/apis/maps/documentation/javascript/reference.html#LatLng for details).
   An alternative approach is to store polygon coordinates in a static js file rather than in the database. See coordsJsFile property description for details.
2) Configurable names of data source properties that provide marker and polygon data (latitude, longitude, color, opacity etc).
3) Configurable "onclick" handler for markers and polygons. Configurable "onaddpolygon" and "onaddmarker" handlers.
4) Drilldown capabilities.
5) Convenience javascript methods: createInfoWindowAtPosition() and getControl().</Description>
<Default>TRAININGPINTSXMLTYPE</Default>
</Parameter>

<Property name="latitude">
<Description>
Initial latitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>42.36</InitialExpression>
</Property>

<Property name="longitude">
<Description>
Initial longitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>288.92</InitialExpression>
</Property>

<Property name="zoom">
<Description>
Initial zoom level (0 shows entire globe).</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>12</InitialExpression>
</Property>

<Property name="mapType">
<Description>
Initial map display.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"ROADMAP"</InitialExpression>
<Parameter name="VALUELIST" value=",ROADMAP,SATELLITE,HYBRID,TERRAIN"/>
</Property>

<Property name="markersDraggable">
<Description>
If true, then the markers on this map are draggable.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="latitudeProperty">
<Description>
Name of property in data source that provides the latitude value for a marker.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="longitudeProperty">
<Description>
Name of property in data source that provides the longitude value for a marker.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="coordsProperty">
<Description>
Name of property in data source that provides the coordinates array for a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="colorProperty">
<Description>
Name of property in data source that provides the color of a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onclickmarker">
<Description>
onclickmarker event handler: if defined, this event is fired when a marker is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onrightclickmarker">
<Description>
onrightclickmarker event handler: if defined, this event is fired when a marker is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onclickpolygon">
<Description>
onclickpolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onrightclickpolygon">
<Description>
onrightclickpolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="markerTitleProperty">
<Description>
Name of property in data source that provides the title of a marker (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonTitleProperty">
<Description>
Name of property in data source that provides the title of a polygon (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current marker. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current polygon. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="ondrilldown">
<Description>
ondrilldown event handler: if defined, this event is fired from drillDown() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="ondrillup">
<Description>
ondrillup event handler: if defined, this event is fired from drillUp() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="fillOpacityProperty">
<Description>
Name of property in data source that provides polygon fill opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="isClickableProperty">
<Description>
Name of property in data source that provides "сlickable" attribute value for markers and polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="hoverOpacity">
<Description>
Hover opacity for clickable polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="strokeOpacity">
<Description>
Polygon stroke opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="strokeWeight">
<Description>
Polygon stroke weight.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="fillOpacity">
<Description>
Default fillOpacity for polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerIconProperty">
<Description>
Name of property in data source that provides icon href for markers.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerIcon">
<Description>
Default marker icon href.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerSpecialIcon">
<Description>
Special marker icon href.                                                                     [+]</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerSpecialProperty">
<Description>
Special marker property                                                                       [+]</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="markerIconSize">
<Description>
Marker icon size (ignored if both markerIcon and markerIconProperty are not set).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onapplyfilters">
<Description>
onapplyfilters event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onaddpolygon">
<Description>
onaddpolygon event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onaddmarker">
<Description>
onaddmarker event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="coordsJsFile">
<Description><![CDATA[
JS file containing "function loadCoordinates(polygonCoordsArray) {}" that populates a polygon coordinates associative array.
If <var>coordsJsFile</var> is specified then <var>coordsProperty</var> must contain name of the property that provides keys for the coordinates associative array.]]></Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="drillUpButtonPosition">
<Description><![CDATA[
Where "<< Back" button is located]]></Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"top"</InitialExpression>
<Parameter name="VALUELIST" value="top,bottom"/>
</Property>

<Method name="%OnGetPortletName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "Training Points Map"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "deepsee/world_48.gif"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pInfo:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill pInfo
	// $LB(name,value,type,caption,title)

	set tTypeList = "ENUM^"_$$$Text("Roadmap","%DeepSee")_":ROADMAP,"_
			$$$Text("Satellite","%DeepSee")_":SATELLITE,"_
			$$$Text("Hybrid","%DeepSee")_":HYBRID,"_
			$$$Text("Terrain","%DeepSee")_":TERRAIN"

	set pInfo($I(pInfo)) = $LB("mapType","",tTypeList,$$$Text("Map Type","%DeepSee"),$$$Text("Initial display type for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("zoom",12,"%Integer",$$$Text("Zoom","%DeepSee"),$$$Text("Initial zoom level for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("latitude",55.74,"%Number",$$$Text("Starting latitude","%DeepSee"),$$$Text("Initial latitude for the map","%DeepSee"))
	set pInfo($I(pInfo)) = $LB("longitude",37.6,"%Number",$$$Text("Starting longitude","%DeepSee"),$$$Text("Initial longitude for the map","%DeepSee"))

	set pInfo($I(pInfo)) = $LB("onclickmarker","","%ZEN.Datatype.eventHandler","'onclickmarker' event handler","User callback for onclickmarker event")
	set pInfo($I(pInfo)) = $LB("onrightclickmarker","","%ZEN.Datatype.eventHandler","'onrightclickmarker' event handler","User callback for onrightclickmarker event")
	set pInfo($I(pInfo)) = $LB("markersdraggable",1,"%Boolean","Draggable markers?","Toggle markers drag'n'drop.")

	set pInfo($I(pInfo)) = $LB("latitudeProperty","","%ZEN.Datatype.string","Latitude property","Latitude property for markers")
	set pInfo($I(pInfo)) = $LB("longitudeProperty","","%ZEN.Datatype.string","Longitude property","Longitude property for markers")
	set pInfo($I(pInfo)) = $LB("markerTitleProperty","","%ZEN.Datatype.string","Marker title property","Title property for markers")
	set pInfo($I(pInfo)) = $LB("markerDataProperties","","%ZEN.Datatype.string","Marker data properties","List of data properties for markers")
	set pInfo($I(pInfo)) = $LB("markerIconProperty","","%ZEN.Datatype.string","Marker icon property","Marker icon property")
	set pInfo($I(pInfo)) = $LB("markerIcon","","%ZEN.Datatype.string","Marker icon","Default marker icon")
	set pInfo($I(pInfo)) = $LB("markerSpecialIcon","","%ZEN.Datatype.string","Marker special icon","Marker icon for special place")
	set pInfo($I(pInfo)) = $LB("markerSpecialProperty","","%ZEN.Datatype.string","Marker special property","Marker special property for special icon")
	set pInfo($I(pInfo)) = $LB("markerIconSize","","%ZEN.Datatype.string","Marker icon size","Default marker icon size (ingored if Marker icon is not set)")
	
	set pInfo($I(pInfo)) = $LB("coordsJsFile","","%ZEN.Datatype.string","JS file with coords","JS file with javascript 'function loadCoordinates(polygonCoordsArray) {...}' that populates polygonCoordsArray argument with polygon coordinates keyed by values from the data source property specified in 'Polygon coords property' setting.")
	set pInfo($I(pInfo)) = $LB("coordsProperty","","%ZEN.Datatype.string","Polygon coords property","Data source property that provides coordinates for polygons if 'JS file with coords' is not specified. Otherwise this setting should contain name of data source property that provides keys for associative array which is populated by javascript code in 'JS file with coords'.")
	
	set pInfo($I(pInfo)) = $LB("onclickpolygon","","%ZEN.Datatype.eventHandler","'onclickpolygon' event handler","User callback for onclickpolygon event")	
	set pInfo($I(pInfo)) = $LB("onrightclickpolygon","","%ZEN.Datatype.eventHandler","'onrightclickpolygon' event handler","User callback for onrightclickpolygon event")	
	
	
	set pInfo($I(pInfo)) = $LB("colorProperty","","%ZEN.Datatype.string","Polygon сolor property","Color property for polygons")
	set pInfo($I(pInfo)) = $LB("polygonTitleProperty","","%ZEN.Datatype.string","Polygon title property","Title property for polygons")
	set pInfo($I(pInfo)) = $LB("polygonDataProperties","","%ZEN.Datatype.string","Polygon data properties","List of data properties for polygons")
	set pInfo($I(pInfo)) = $LB("fillOpacityProperty","","%ZEN.Datatype.string","Fill opacity property","Fill opacity property for polygons")
	set pInfo($I(pInfo)) = $LB("isClickableProperty","","%ZEN.Datatype.string","IsClickable flag property","IsClickable flag property for polygons")
	
	set pInfo($I(pInfo)) = $LB("fillOpacity","","%ZEN.Datatype.string","Fill opacity","Default fill opacity for polygons")
	set pInfo($I(pInfo)) = $LB("hoverOpacity","","%ZEN.Datatype.string","Hover opacity","Hover opacity for clickable polygons")
	set pInfo($I(pInfo)) = $LB("strokeOpacity","","%ZEN.Datatype.string","Stroke opacity","Stroke opacity for polygons")
	set pInfo($I(pInfo)) = $LB("strokeWeight","","%ZEN.Datatype.string","Stroke weight","Stroke weight for polygons")
	
	set pInfo($I(pInfo)) = $LB("drillUpButtonPosition","top","ENUM^top,bottom","Drill-up button position","Where ""<< Back"" button is located")
		
	set pInfo($I(pInfo)) = $LB("ondrilldown","","%ZEN.Datatype.eventHandler","'ondrilldown' event handler","User callback for ondrilldown event")
	set pInfo($I(pInfo)) = $LB("ondrillup","","%ZEN.Datatype.eventHandler","'ondrillup' event handler","User callback for ondrillup event")
	
	set pInfo($I(pInfo)) = $LB("onapplyfilters","","%ZEN.Datatype.eventHandler","'onapplyfilters' event handler","User callback for onapplyfilters event")
	set pInfo($I(pInfo)) = $LB("onaddpolygon","","%ZEN.Datatype.eventHandler","'onaddpolygon' event handler","User callback for onaddpolygon event")
	set pInfo($I(pInfo)) = $LB("onaddmarker","","%ZEN.Datatype.eventHandler","'onaddmarker' event handler","User callback for onaddmarker event")

	quit $$$OK
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this._mapObject = null;
	var mapDiv = this.getEnclosingDiv();

	// test if we have not been rendered yet
	if (mapDiv == null) return;

	// make sure our div has some area
	var width = isNaN(parseFloat(this.width)) ? 200 : parseFloat(this.width);
	var height = isNaN(parseFloat(this.height)) ? 200 : parseFloat(this.height);
	if ('' == this.enclosingStyle) {
		mapDiv.style.width = width + 'px';
		mapDiv.style.height = height + 'px';
	}

	// get data from controller, if present.
	this.acquireData();

	// create map
	this.initMap(mapDiv);

	// add markers
	this.syncMarkers();
	
	// add polygons
	this.syncPolygons();
	
	zenPage.dashboardEventHandler('', '', '', 'refresh', '*', '');
	
	//============================ Локализация столбцов в виджете-таблице со студунтами ================
	try{
		var sc = findScoreCardWidgetByName('TrainingStudents');
		for(var i=0; i < sc.parent.parent.children[1].children[0].columns.length; i++){
			sc.parent.parent.children[1].children[0].columns[i].label = dict.localize(sc.parent.parent.children[1].children[0].columns[i].label);
		}
	}
	catch(ex){
		console.log('Portlet Map Error, renderContents(), localize scorecard columns');
	}
]]></Implementation>
</Method>

<Method name="initMap">
<Description>
Initialize the map</Description>
<FormalSpec>mapDiv</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (('undefined' == typeof google)||('undefined' == typeof google.maps)) {
		mapDiv.innerHTML = $$$Text('Unable to load google map api.');
		return;
	}
	
	// Отключить использование тестовых версий карты
	google.maps.visualRefresh = false;


	var mapTypeId = this.getMapTypeId(this.mapType);
	
	this.latitude = parseFloat(this.latitude);
	if (isNaN(this.latitude)) this.latitude = 42.36;
	
	this.longitude = parseFloat(this.longitude);
	if (isNaN(this.longitude)) this.longitude = 288.92;
	
	var mapLatlng = new google.maps.LatLng(this.latitude, this.longitude);
	
	this.zoom = parseInt(this.zoom, 10);
	if (isNaN(this.zoom)) this.zoom = 0;
	
	var mapOptions = {
		zoom: this.zoom,
		center: mapLatlng,
		mapTypeId: mapTypeId
	}
	var map = new google.maps.Map(mapDiv, mapOptions);
	this._mapObject = map;
	
	// array of markers
	this._markers = [];
	
	// array of polygons
	this._polygons = [];
	
	// drilldown arrays
	this._prevZoom = [];
	this._prevCenter = [];
	this._drillDownTitle = [];
	
	this._infoWindow = new google.maps.InfoWindow();

	
	// add listeners
	var code = new Function('zenPage.getComponent('+this.index+').zoomChangedHandler();');
	google.maps.event.addListener(map, 'zoom_changed', code);

	var code = new Function('zenPage.getComponent('+this.index+').dragendHandler();');
	google.maps.event.addListener(map, 'dragend', code);
	
	var code = new Function('zenPage.getComponent('+this.index+').centerChangedHandler();');
	google.maps.event.addListener(map, 'center_changed', code);
]]></Implementation>
</Method>

<Method name="zoomChangedHandler">
<Description>
Callback for zoom-changed event.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		this.zoom = map.getZoom();
	}
]]></Implementation>
</Method>

<Method name="dragendHandler">
<Description>
Callback for map dragend event.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var latLng = map.getCenter();
		this.latitude = latLng.lat();
		this.longitude = latLng.lng();
	}
]]></Implementation>
</Method>

<Method name="getMapObject">
<Description>
Return the google map API object used by the map view.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._mapObject;
]]></Implementation>
</Method>

<Method name="getMapTypeId">
<Description>
Given the name of a map type, convert to a map type id.</Description>
<FormalSpec>type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (('undefined' == typeof google)||('undefined' == typeof google.maps)) {
		return '';
	}

	var mapType = google.maps.MapTypeId.ROADMAP;
	switch (type) {
	case 'HYBRID':
		mapType = google.maps.MapTypeId.HYBRID;
		break;
	case 'SATELLITE':
		mapType = google.maps.MapTypeId.SATELLITE;
		break;
	case 'TERRAIN':
		mapType = google.maps.MapTypeId.TERRAIN;
		break;
	case 'ROADMAP':
	default:
		break;
	}

	return mapType;
]]></Implementation>
</Method>

<Method name="setProperty">
<Description>
Set the value of a named property.</Description>
<FormalSpec>property,value,value2</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();

	switch(property) {
	case 'latitude':
	case 'longitude':
		this[property] = value;
		if (map) {
			var mapLatlng = new google.maps.LatLng(parseFloat(this.latitude), parseFloat(this.longitude));
			map.panTo(mapLatlng);
		}
		break;

	case 'zoom':
		this[property] = value;
		if (map) {
			map.setZoom(parseInt(this.zoom,10));
		}
		break;

	case 'mapType':
		this[property] = value;
		if (map) {
			var mapTypeId = this.getMapTypeId(this.mapType);
			map.setMapTypeId(mapTypeId);
		}
		break;

	default:
		return this.invokeSuper('setProperty',arguments);
	}
	return true;
]]></Implementation>
</Method>

<Method name="notifyViewHandler">
<Description>
Notification that the dataController associated with this dataView has raised an event.</Description>
<FormalSpec>reason,data1,data2,data3</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(reason) {
	case 'dataChange':
		this.onApplyFilters(true);
	case 'modelChange':
		// some change in dataController
		this.acquireData();
		this.syncMarkers();
		this.syncPolygons();
		break;
	case 'seriesChange':
		break;
	}
]]></Implementation>
</Method>

<Method name="addMarker">
<Description><![CDATA[
Add a marker to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the marker.<br/>
Returns the marker object.]]></Description>
<FormalSpec>id,latitude,longitude,title,isClickable,icon,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var marker = null;
	var map = this.getMapObject();
	if (map && !isNaN(parseFloat(latitude)) && !isNaN(parseFloat(longitude))) {
		var mapLatlng = new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude));
		marker = new google.maps.Marker({
			position: mapLatlng,
			map: map,
			draggable: this.markersDraggable,
			title:title,
			clickable: (isClickable == 1),
			icon: (icon ? (this.markerIconSize ? new google.maps.MarkerImage(icon, null, null, null, new google.maps.Size(this.markerIconSize, this.markerIconSize)) : icon) : null),
			data: data});

		// add to list
		marker._id = id;
		var index = this._markers.length;
		this._markers[index] = marker;

		// add event handler(s)
		if (this.markersDraggable) {
			var code = new Function('zenPage.getComponent('+this.index+').markerDragEndHandler("'+index+'");');
			google.maps.event.addListener(marker, 'dragend', code);
		}

		var code = new Function('zenPage.getComponent('+this.index+').markerClickHandler("'+index+'");');
		google.maps.event.addListener(marker, 'click', code);
		
		code = new Function('zenPage.getComponent('+this.index+').markerRightClickHandler("'+index+'");');
		google.maps.event.addListener(marker, 'rightclick', code);
	}
	return marker;
]]></Implementation>
</Method>

<Method name="addPolygon">
<Description><![CDATA[
Add a polygon to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the polygon.<br/>
Returns the polygon object.]]></Description>
<FormalSpec>id,coords,color,fo,isClickable,title,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var polygon = null;
	var map = this.getMapObject();
	if (map) 
	{
		if (color.substring(0, 4) === "rgb(" && color.indexOf(")") == (color.length - 1) && color.indexOf(".") > -1)
		{
			var colorAr = color.substring(4, color.length - 1).split(",");
			color = "rgb(" + String(parseFloat(colorAr[0])).split(".")[0] + "," + String(parseFloat(colorAr[1])).split(".")[0] + "," + String(parseFloat(colorAr[2])).split(".")[0] + ")";
		}
		
		polygon = new google.maps.Polygon({
			tooltip: '',
			title: title,
			fillColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
			fillOpacity: fo,
			clickable: (isClickable == 1),
			strokeColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
			strokeOpacity: (this.strokeOpacity ? this.strokeOpacity : 0.5),
			strokeWeight: (this.strokeWeight ? this.strokeWeight : 3),
			paths: coords,
			map: map,
			data: data,
			defaultFO: fo});
			
		// add to list
		polygon._id = id;
		var index = this._polygons.length;
		this._polygons[index] = polygon;

		var code = new Function('event', 'zenPage.getComponent('+this.index+').polygonClickHandler("'+index+'", event);');
		google.maps.event.addListener(polygon, 'click', code);

		code = new Function('event', 'zenPage.getComponent('+this.index+').polygonRightClickHandler("'+index+'", event);');
		google.maps.event.addListener(polygon, 'rightclick', code);
		
		code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseOver("'+index+'", event);');
		google.maps.event.addListener(polygon, 'mouseover', code);
		
		code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseMove("'+index+'", event);');
		google.maps.event.addListener(polygon, 'mousemove', code);

		code = new Function('event', 'zenPage.getComponent('+this.index+').polygonMouseOut("'+index+'", event);');
		google.maps.event.addListener(polygon, 'mouseout', code);
	}
	return polygon;
]]></Implementation>
</Method>

<Method name="polygonMouseOver">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon && polygon.clickable) polygon.setOptions({fillOpacity: (this.hoverOpacity ? this.hoverOpacity : 0.35)});
	}
]]></Implementation>
</Method>

<Method name="polygonMouseMove">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon && polygon.tooltip) 
		{	
			clearTimeout(polygon.tooltipTimer);
			polygon.tooltipTimer = setTimeout('zenPage.getComponent('+this.index+').polygonTooltipTimer('+index+',' + event.latLng.lat() + ',' + event.latLng.lng() + ');', 100);
		}
	}
]]></Implementation>
</Method>

<Method name="polygonTooltipTimer">
<Internal>1</Internal>
<FormalSpec>index,lat,lng</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon && polygon.tooltip) polygon.tooltip.show(new google.maps.LatLng(lat, lng));
	}
]]></Implementation>
</Method>

<Method name="polygonMouseOut">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon) 
		{
			if (polygon.clickable) polygon.setOptions({fillOpacity: polygon.defaultFO});
			
			if (polygon.tooltip)
			{
				polygon.tooltip.hide();
				clearTimeout(polygon.tooltipTimer);
			}
		}
	}
]]></Implementation>
</Method>

<Method name="polygonClickHandler">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon) {
			if (polygon.tooltip)
			{
				polygon.tooltip.hide();
				clearTimeout(polygon.tooltipTimer);
			}
			zenInvokeCallbackMethod(this.onclickpolygon,this,'onclickpolygon','polygon',polygon,'position',event.latLng);
		}
	}
]]></Implementation>
</Method>

<Method name="polygonRightClickHandler">
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var polygon = this.getPolygon(index);
		if (polygon) {
			if (polygon.tooltip)
			{
				polygon.tooltip.hide();
				clearTimeout(polygon.tooltipTimer);
			}
			zenInvokeCallbackMethod(this.onrightclickpolygon,this,'onrightclickpolygon','polygon',polygon,'position',event.latLng);
		}
	}
]]></Implementation>
</Method>

<Method name="getMarker">
<Description>
Find marker in marker list by index # (0-based).</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._markers ? this._markers[index] : null;
]]></Implementation>
</Method>

<Method name="getPolygon">
<Description>
Find polygon in polygon list by index # (0-based).</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this._polygons ? this._polygons[index] : null;
]]></Implementation>
</Method>

<Method name="markerDragEndHandler">
<Description>
Callback for marker dragend event.</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var marker = this.getMarker(index);
		if (marker) {
			this.createInfoWindow(marker,'Marker moved to:<br/>' + marker.getPosition());
		}
	}
]]></Implementation>
</Method>

<Method name="markerClickHandler">
<Description>
Callback for marker click event.</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var marker = this.getMarker(index);
		if (marker) {
			zenInvokeCallbackMethod(this.onclickmarker,this,'onclickmarker','marker',marker);
		}
	}
]]></Implementation>
</Method>

<Method name="markerRightClickHandler">
<Description>
Callback for marker click event.</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map) {
		var marker = this.getMarker(index);
		if (marker) {
			zenInvokeCallbackMethod(this.onrightclickmarker,this,'onrightclickmarker','marker',marker);
		}
	}
]]></Implementation>
</Method>

<Method name="openInfoWindowAtPosition">
<Description>
Show an info window at the specified position.</Description>
<FormalSpec>position,content</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	if (map && position) 
	{
		this._infoWindow.setContent(content);
 		this._infoWindow.setPosition(position);
	    this._infoWindow.open(map);
	}
]]></Implementation>
</Method>

<Method name="removeMarker">
<Description><![CDATA[
Remove a marker from the map.
<var>marker</var> is the marker to remove.]]></Description>
<FormalSpec>marker</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		marker.setMap(null);
	}
	catch(ex) {
		// swallow google error!
	}
]]></Implementation>
</Method>

<Method name="removePolygon">
<Description><![CDATA[
Remove a polygon from the map.
<var>polygon</var> is the polygon to remove.]]></Description>
<FormalSpec>polygon</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		if (polygon.tooltip) polygon.tooltip.setMap(null);
		polygon.setMap(null);
	}
	catch(ex) {
		// swallow google error!
	}
]]></Implementation>
</Method>

<Method name="acquireData">
<Description>
Internal method: acquire data for this view and store a copy in a local cache.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = this.getController();
	if (null == controller) {
		// try to connect to dataController
		this.connectToController();
		controller = this.getController();
	}

	// array of marker data
	this._markerData = [];
	
	if (controller && (this.latitudeProperty != '') && (this.longitudeProperty != ''))
	{
		// get data from controller (make sure data is loaded)
		var dims = controller.getDimensions();
		
		// are we connected to a pivot table?
		var invert = controller.getSelectedRange;
		if (!invert) {
			var seriesSize = controller.getDimSize(1);
			var seriesCount = controller.getDimSize(2);
			var labelDim = 2;
			var titleCol = -1;
			var latCol = -1;
			var longCol = -1;
			var clickableCol = -1;
			var miCol = -1;
			var specIconCol = -1;
		}
		else {
			var seriesSize = controller.getDimSize(2);
			var seriesCount = controller.getDimSize(1);
			var labelDim = 1;
		}
		
		if (seriesCount > 0)
		{
			// find long and lat and title columns
			if (!invert)
				for (var p = 0; p < seriesSize; p++) 
				{
					var pname = controller.getPropertyName(p);
					if (pname == this.latitudeProperty) {
						latCol = p;
					}
					if (pname == this.longitudeProperty) {
						longCol = p;
					}
					if (pname == this.markerTitleProperty) {
						titleCol = p;
					}
					if (pname == this.isClickableProperty) {
						clickableCol = p;
					}
					if (pname == this.markerIconProperty) {
						miCol = p;
					}
					if (pname == this.markerSpecialProperty) {
						specIconCol = p;
					}
				}
		
			
			// each series corresponds to a marker
			if (invert || (latCol >= 0 && longCol >= 0))
				for (var n = 0; n < seriesCount; n++) 
				{
					var isClickable = 1;
					var mi = null;
					var specIcon = 0;
					var sname = controller.getLabel(n,labelDim);

					if (!invert) {
						var lat = controller.getData(latCol,n);
						var long = controller.getData(longCol,n);
						if (titleCol >= 0) sname = controller.getData(titleCol,n);
						if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
						if (miCol >= 0) mi = controller.getData(miCol,n);
						if (specIconCol >= 0) specIcon = controller.getData(specIconCol,n);
					}
					else {
						var lat = controller.getDataByName(this.latitudeProperty,n);
						var long = controller.getDataByName(this.longitudeProperty,n);
						if (this.markerTitleProperty != '') sname = controller.getDataByName(this.markerTitleProperty,n);
						if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
						if (this.markerIconProperty != '') mi = controller.getDataByName(this.markerIconProperty,n);
						if (this.markerSpecialProperty != '') specIcon = controller.getDataByName(this.markerSpecialProperty,n);
					}
			
					if (!isNaN(parseFloat(lat)) && !isNaN(parseFloat(long))) {
						var data = [];
						if (this.markerDataProperties != '')
						{
							var props = this.markerDataProperties.split(",");
							for (var i = 0; i < props.length; i++) {
							    data[props[i]] = controller.getDataByName(props[i],n);
							}
						}
						
						if (!mi) mi = this.markerIcon;
					
						this._markerData[this._markerData.length] = {
							title: sname,
							latitude: lat,
							longitude: long,
							isClickable: (!isClickable ? 1 : isClickable),
							icon: mi,
							specialIcon: specIcon,
							data: data
						};
					}
				}
		}
	}
	
	// array of polygon data
	this._polygonData = [];
	
	if (this.coordsJsFile && !this._polygonCoords)
	{
		this._polygonCoords = [];
		loadCoordinates(this._polygonCoords);
	}
	
	if (controller && (this.coordsProperty != '')) 
	{
		// get data from controller (make sure data is loaded)
		var dims = controller.getDimensions();
		
		// are we connected to a pivot table?
		var invert = controller.getSelectedRange;
		if (!invert) {
			var seriesSize = controller.getDimSize(1);
			var seriesCount = controller.getDimSize(2);
			var labelDim = 2;
			var titleCol = -1;
			var coordsCol = -1;
			var colorCol = -1;
			var foCol = -1;
			var clickableCol = -1;
		}
		else {
			var seriesSize = controller.getDimSize(2);
			var seriesCount = controller.getDimSize(1);
			var labelDim = 1;
		}

		if (seriesCount > 0)
		{
			// find coords and color columns
			if (!invert)
				for (var p = 0; p < seriesSize; p++) 
				{
					var pname = controller.getPropertyName(p);
					if (pname == this.coordsProperty) {
						coordsCol = p;
					}
					if (pname == this.colorProperty) {
						colorCol = p;
					}
					if (pname == this.fillOpacityProperty) {
						foCol = p;
					}
					if (pname == this.isClickableProperty) {
						clickableCol = p;
					}					
					if (pname == this.polygonTitleProperty) {
						titleCol = p;
					}
				}

			// each series corresponds to a poly
			for (var n = 0; n < seriesCount; n++)
			{
				var color = 'purple';
				var fo = this.fillOpacity;  // default opacity
				var isClickable = 1;
				
				var sname = controller.getLabel(n,labelDim);

				if (!invert) {
					if (coordsCol<0) break;
					var coords = controller.getData(coordsCol,n);
					if (colorCol >= 0) color = controller.getData(colorCol,n);
					if (foCol >= 0) fo = controller.getData(foCol,n);
					if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
					if (titleCol >= 0) sname = controller.getData(titleCol,n);
				}
				else {
					var coords = controller.getDataByName(this.coordsProperty,n);
					if (this.colorProperty != '') color = controller.getDataByName(this.colorProperty,n);
					if (this.fillOpacityProperty != '') fo = controller.getDataByName(this.fillOpacityProperty,n);
					if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
					if (this.polygonTitleProperty != '') sname = controller.getDataByName(this.polygonTitleProperty,n);
				}
				
				if (!fo) fo = this.fillOpacity;  // default opacity

				if (this.coordsJsFile) coords = this._polygonCoords[coords];
				
				if (!coords) continue;
				
				var pathsSets = coords.split(";");
				for (var j = 0; j < pathsSets.length; j++) {
					var paths = pathsSets[j].split(" ");
					for (var i = 0; i < paths.length; i++) {
						var p = paths[i].split(",")
					    paths[i] = new google.maps.LatLng(p[1], p[0], p[2]);
					}
					pathsSets[j] = paths;
				}
			
				var data = [];
			
				if (this.polygonDataProperties != '')
				{
					var props = this.polygonDataProperties.split(",");
					for (var i = 0; i < props.length; i++) {
					    data[props[i]] = controller.getDataByName(props[i],n);
					}
				}
				
				this._polygonData[this._polygonData.length] = {
					title: sname,
					coords: pathsSets,
					color: (!color ? 'purple' : color),
					fo: (!fo ? 0.1 : fo),
					isClickable: (!isClickable ? 1 : isClickable),
					data: data
				};

			}
		}
	}
]]></Implementation>
</Method>

<Method name="syncMarkers">
<Description>
Internal method: sync markers to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		var controller = this.getController();
		if (null == controller) {
			return;
		}
	
		this.clearMarkers();

		if (this._markerData) {
			for (var n = 0; n < this._markerData.length; n++) {
				var md = this._markerData[n];
				if (md) 
				{
					if(this.markerSpecialIcon != "" && md.specialIcon == 1)
						md.icon = this.markerSpecialIcon;
					var title = md.data.Course + ' (' + md.data.StudentsCount + ')';
					var marker = this.addMarker(n,md.latitude,md.longitude,title,md.isClickable,md.icon,md.data);
					if (marker) zenInvokeCallbackMethod(this.onaddmarker,this,'onaddmarker','marker',marker);
				}
			}
		}
	}
	catch(ex) {
		alert('Error in syncMarkers ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="syncPolygons">
<Description>
Internal method: sync polygons to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	function TooltipOverlay(map, title)
	{
		this.map_ = map; 
		this.div_ = null;
		this.title_ = title;
		this.setMap(map);
	};
  	
	TooltipOverlay.prototype = new google.maps.OverlayView();
	
	TooltipOverlay.prototype.onAdd = function()
	{
		var div = document.createElement('div');
		div.appendChild(document.createTextNode(this.title_));
		div.style.border = 'solid 1px #000000';
		div.style.color = '#000000';
		div.style.backgroundColor = '#ffffe1';
		div.style.whiteSpace = 'nowrap';
		div.style.font = 'icon';
		if (navigator.userAgent.indexOf("Safari")>=0 || navigator.userAgent.indexOf("Chrome")>=0)
		{
			div.style.fontFamily = "Tahoma,sans-serif";
			div.style.fontSize = "13px";
		}
		div.style.MozBoxShadow = '2px 2px 4px #7f7f7f';
		div.style.boxShadow = '2px 2px 4px #7f7f7f';
		div.style.padding = '2px 3px'; 
		div.style.position = 'absolute';
		div.style.visibility = "hidden";
		this.div_ = div;
		
		var panes = this.getPanes();
		panes.floatShadow.appendChild(div);
	}
	
	TooltipOverlay.prototype.onRemove = function() 
	{
		if (this.div_) this.div_.parentNode.removeChild(this.div_);
		this.div_ = null;
	}
	
	TooltipOverlay.prototype.draw = function() {}
	
	TooltipOverlay.prototype.hide = function() 
	{
		if (this.div_) this.div_.style.visibility = "hidden";
	}

	TooltipOverlay.prototype.show = function(latLng)
	{
		if (this.div_) 
		{
			var point = this.getProjection().fromLatLngToDivPixel(latLng)
			this.div_.style.left = point.x + 'px';
			this.div_.style.top = (point.y - parseInt(this.div_.offsetHeight)) + 'px';
			this.div_.style.visibility = "visible";
		}
	}
	
	var map = this.getMapObject();
	
	try {
		var controller = this.getController();
		if (null == controller) {
			return;
		}
	
		this.clearPolygons();
		
		if (this._polygonData && this._polygonData.length > 0) 
		{
			
			for (var n = 0; n < this._polygonData.length; n++) 
			{
				var md = this._polygonData[n];
				if (md) 
				{
					
					var poly = this.addPolygon(n, md.coords, md.color, md.fo, md.isClickable, md.title, md.data);
					
					if (poly && map && md.title) 
						poly.tooltip = new TooltipOverlay(map, md.title);
					
					if (poly) 
						zenInvokeCallbackMethod(this.onaddpolygon,this,'onaddpolygon','polygon',poly);
				}
			}
			
			
		}
	}
	catch(ex) {
		alert('Error in syncPolygons ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="drillDown">
<Description>
Perform a drilldown</Description>
<Internal>1</Internal>
<FormalSpec>title,latLng,zoom,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	var map = this.getMapObject();
	
	if (map)
	{
		this._prevZoom.push(map.getZoom());
		this._prevCenter.push(map.getCenter());
	
		map.setZoom(parseInt(zoom));
		map.setCenter(latLng);
	
		if (this._drillDownTitle.length > 0) this._drillDownTitle[this._drillDownTitle.length - 1].hide();
		
		this._drillDownTitle.push(this.newDrillDownTitleOverlay(map, 'zenPage.getComponent('+this.index+').drillUp();', title, this.drillUpButtonPosition));
		this._drillDownTitle[this._drillDownTitle.length - 1].show();
	
		zenInvokeCallbackMethod(this.ondrilldown,this,'ondrilldown','data',data);
	}
]]></Implementation>
</Method>

<Method name="newDrillDownTitleOverlay">
<Internal>1</Internal>
<FormalSpec>mapRef,clickHandler,text,drillUpButtonPosition</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
 	function DrillDownTitleOverlay(map, onclickHandler, titleText, drillUpButtonPosition) 
	{
		this.map_ = map; 
		this.div_ = null;
		this.divTitle_ = null;
		this.titleText_ = titleText;
		this.onclickHandler_ = onclickHandler;
		this.rect_ = null;
		this.visible_ = false;
		this.drillUpButtonPosition_ = drillUpButtonPosition;
		this.setMap(map);
	};

	DrillDownTitleOverlay.prototype = new google.maps.OverlayView();

	DrillDownTitleOverlay.prototype.onAdd = function() 
	{
		this.visible_ = true;
	}

	DrillDownTitleOverlay.prototype.onRemove = function() 
	{
		if (this.div_) this.div_.parentNode.removeChild(this.div_);
		if (this.divTitle_) this.divTitle_.parentNode.removeChild(this.divTitle_);
		if (this.rect_) this.rect_.setMap(null);
		this.div_ = null;
		this.divTitle_ = null;
		this.rect_ = null;
	}

	DrillDownTitleOverlay.prototype.draw = function() 
	{
		var overlayProjection = this.getProjection();
		
		if (this.div_) this.div_.parentNode.removeChild(this.div_);
		if (this.divTitle_) this.divTitle_.parentNode.removeChild(this.divTitle_);
		if (this.rect_) this.rect_.setMap(null);

		var div = document.createElement('div');
		div.appendChild(document.createTextNode('<<  ' + 'Back'));
		div.style.border = 'solid 1px #000000';
		div.style.color = '#ffffff';
		div.style.backgroundColor = '#356B8D';
		div.style.MozBoxShadow = '2px 2px 4px #7f7f7f';
		div.style.boxShadow = '2px 2px 4px #7f7f7f';
		div.style.whiteSpace = 'nowrap';
		div.style.font = 'icon';
		if (navigator.userAgent.indexOf("Safari")>=0 || navigator.userAgent.indexOf("Chrome")>=0)
		{
			div.style.fontFamily = "Tahoma,sans-serif";
			div.style.fontSize = "13px";
		}
		div.style.padding = '2px 8px'; 
		div.style.position = 'absolute';
		div.style.display = 'block';
		div.style.visibility = (this.visible_ ? "visible" : "hidden");
		this.div_ = div;
		var div2 = document.createElement('div');
		div2.appendChild(document.createTextNode(this.titleText_));
		div2.style.border = 'solid 1px #000000';
		div2.style.color = '#000000';
		if (navigator.userAgent.indexOf("MSIE")>=0)
		{
			div2.style.backgroundColor = 'white';
		}
		else
		{
			div2.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
		}	
		div2.style.MozBoxShadow = '2px 2px 4px #7f7f7f';
		div2.style.boxShadow = '2px 2px 4px #7f7f7f';
		div2.style.whiteSpace = 'nowrap';
		div2.style.font = 'icon';
		if (navigator.userAgent.indexOf("Safari")>=0 || navigator.userAgent.indexOf("Chrome")>=0)
		{
			div2.style.fontFamily = "Tahoma,sans-serif";
			div2.style.fontSize = "13px";
		}
		div2.style.fontWeight = 'bold';
		div2.style.padding = '2px 8px'; 
		div2.style.position = 'absolute';
		div2.style.display = 'block';
		div2.style.visibility = (this.visible_ ? "visible" : "hidden");
		this.divTitle_ = div2;

		var panes = this.getPanes();
		panes.floatPane.appendChild(this.div_);
		panes.floatPane.appendChild(this.divTitle_);
	
		if (this.drillUpButtonPosition_ == 'bottom')
		{
			var x = 12
			var y = parseInt(this.map_.getDiv().style.height) - 50
		}
		else
		{
			var x = 70
			var y = 5
		}
		var point = overlayProjection.fromLatLngToDivPixel(overlayProjection.fromContainerPixelToLatLng(new google.maps.Point(x, y)));
		this.div_.style.left = point.x + 'px';
		this.div_.style.top = point.y + 'px';

		var sw = overlayProjection.fromDivPixelToLatLng(new google.maps.Point(point.x, point.y + parseInt(this.div_.offsetHeight)));
		var ne = overlayProjection.fromDivPixelToLatLng(new google.maps.Point(point.x + parseInt(this.div_.offsetWidth), point.y));
		var rectBounds = new google.maps.LatLngBounds(sw, ne);

		this.rect_ = new google.maps.Rectangle({
			bounds: rectBounds,
			clickable: true,
			fillOpacity: 0,
			strokeOpacity: 0,
			zIndex: 10,
			map: (this.visible_ ? this.map_ : null)});

		google.maps.event.addListener(this.rect_, 'click', new Function(this.onclickHandler_));

		var point = new google.maps.Point(x + parseInt(this.div_.offsetWidth) - 1, 5);
		point = overlayProjection.fromLatLngToDivPixel(overlayProjection.fromContainerPixelToLatLng(point));
		this.divTitle_.style.left = point.x + 'px';
		this.divTitle_.style.top = this.div_.style.top;
		
		this.div_.style.height = (parseInt(this.divTitle_.offsetHeight) - 6) + 'px';
		this.divTitle_.style.height = (parseInt(this.divTitle_.offsetHeight) - 6) + 'px';
	}

	DrillDownTitleOverlay.prototype.hide = function() 
	{
		if (this.div_) this.div_.style.visibility = "hidden";
		if (this.divTitle_) this.divTitle_.style.visibility = "hidden";
		if (this.rect_) this.rect_.setMap(null);
		
		this.visible_ = false;
	}

	DrillDownTitleOverlay.prototype.show = function() 
	{
		if (this.div_) this.div_.style.visibility = "visible";
		if (this.divTitle_) this.divTitle_.style.visibility = "visible";
		if (this.rect_) this.rect_.setMap(this.map_);
		
		this.visible_ = true;
	}
	
	return new DrillDownTitleOverlay(mapRef, clickHandler, text, drillUpButtonPosition);
]]></Implementation>
</Method>

<Method name="centerChangedHandler">
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	if (this._drillDownTitle.length > 0) this._drillDownTitle[this._drillDownTitle.length - 1].draw();
]]></Implementation>
</Method>

<Method name="drillUp">
<Description>
Restores map parameters (center, zoom and "drilldown title") to their state before drilldown was performed</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var map = this.getMapObject();
	
	if (map)
	{
		if (this._drillDownTitle.length > 0)
		{
			this._drillDownTitle[this._drillDownTitle.length - 1].hide();
			this._drillDownTitle[this._drillDownTitle.length - 1].setMap(null);
			this._drillDownTitle.pop();
			if (this._drillDownTitle.length > 0) this._drillDownTitle[this._drillDownTitle.length - 1].show();
		}

		if (this._prevZoom.length > 0)
		{
			map.setZoom(this._prevZoom[this._prevZoom.length - 1]);
			this._prevZoom.pop();
		}
		
		if (this._prevCenter.length > 0)
		{
			map.setCenter(this._prevCenter[this._prevCenter.length - 1]);
			this._prevCenter.pop();
		}
	
		zenInvokeCallbackMethod(this.ondrillup,this,'ondrillup');
	}
]]></Implementation>
</Method>

<Method name="getControl">
<Description>
Obtain a reference to a filter (or any other widget control).</Description>
<FormalSpec>ind</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[  return zenPage.getComponent(this.parent.parent.controlIndices[ind]);
]]></Implementation>
</Method>

<Method name="getFilterStateArray">
<Description>
Get the array of filter state information for the widget.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return this.parent.parent.getFilterStateArray();
]]></Implementation>
</Method>

<Method name="clearMarkers">
<Description>
Internal method: clear markers from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// kill old markers
		if (this._markers) {
			for (var n = 0; n < this._markers.length; n++) {
				this.removeMarker(this._markers[n]);
			}
		}
		this._markers = [];
	}
	catch(ex) {
		alert('Error in clearMarkers ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="clearPolygons">
<Description>
Internal method: clear polygons from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		// kill old polygons
		if (this._polygons) {
			for (var n = 0; n < this._polygons.length; n++) {
				this.removePolygon(this._polygons[n]);
			}
		}
		this._polygons = [];
	}
	catch(ex) {
		alert('Error in clearPolygons ' + ex.message);
	}
]]></Implementation>
</Method>

<Method name="panToAddress">
<Description>
Invoke the google geocoder api to lookup an address string and move the map to view it.
Applications that call this are responsible for adhering to the google geocoder api terms of use.</Description>
<FormalSpec>address</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (('undefined' == typeof google)||('undefined' == typeof google.maps)) {
		return '';
	}

	var callback = new Function('results','status','zenPage.getComponent('+this.index+').geocodeAddressHandler(results,status)');
	var geocoder = new google.maps.Geocoder();
	geocoder.geocode({ 'address': address}, callback);
]]></Implementation>
</Method>

<Method name="geocodeAddressHandler">
<Description>
Callback for geocoder API.</Description>
<Internal>1</Internal>
<FormalSpec>results,status</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (status == google.maps.GeocoderStatus.OK) {
		var map = this.getMapObject();
		if (map) {
			map.setCenter(results[0].geometry.location);
		}
	}
	else {
		alert("Address not found: " + status);
	}
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
	// This causes ZEN to render this component on the client.
	set ..renderFlag = ..renderFlag + 1
	
	// copy ..settings into properties
	#dim propName As %String = $order(..settings(""))
	while (propName '= "")
	{
		if ("" '= $get(..settings(propName)))
			try
			{
				set $property($this, propName) = ..settings(propName)
			}
			catch {}

		set propName = $order(..settings(propName))
	}
	
	&html<<script type="text/javascript">
	function hsv2rgb(h,s,v) 
	{
		// Adapted from http://www.easyrgb.com/math.html
		// hsv values = 0 - 1, rgb values = 0 - 255
		var r, g, b;
		var RGB = new Array();
		if(s == 0)
		{
		  RGB['red']=RGB['green']=RGB['blue']=Math.round(v*255);
		}
		else
		{
		  var var_h = h * 6;  // h must be < 1
		  if (var_h == 6) var_h = 0;
		  var var_i = Math.floor( var_h );
		  var var_1 = v*(1-s);
		  var var_2 = v*(1-s*(var_h-var_i));
		  var var_3 = v*(1-s*(1-(var_h-var_i)));
		  if (var_i == 0)
		  {
		    var_r = v; 
		    var_g = var_3; 
		    var_b = var_1;
		  }
		  else if (var_i == 1)
		  {
		    var_r = var_2;
		    var_g = v;
		    var_b = var_1;
		  }
		  else if (var_i == 2)
		  {
		    var_r = var_1;
		    var_g = v;
		    var_b = var_3
		  }
		  else if (var_i == 3)
		  {
		    var_r = var_1;
		    var_g = var_2;
		    var_b = v;
		  }
		  else if (var_i == 4)
		  {
		    var_r = var_3;
		    var_g = var_1;
		    var_b = v;
		  }
		  else
		  {
		    var_r = v;
		    var_g = var_1;
		    var_b = var_2
		  }
		  RGB['red'] = Math.round(var_r * 255);
		  RGB['green'] = Math.round(var_g * 255);
		  RGB['blue'] = Math.round(var_b * 255);
		}
		return '#' + RGB['red'].toString(16) + RGB['green'].toString(16) + RGB['blue'].toString(16);
	};
	</script>>
	
	if (..coordsJsFile '= "")
	{
		&html<<script type='text/javascript' src='#(..coordsJsFile)#'></script>>
	}
	
	&html<
	<script type='text/javascript'>
	
	var selectTrTableRow = function(data){
		data = data.split(';');
		var portlet = zenPage.getComponent(data[0]);
		
		var idx = 0, isFound = false;
		for(idx=0; idx < portlet._markers.length; idx++){
			if (portlet._markers[idx].data.ID == data[1]){
				isFound = true;
				break;
			}
		}
		
		if (!isFound) return;
	
		portlet.openInfoWindowForSingleTraining(portlet._markers[idx], true);	
	};

	var backToTable=function(portletIdx, trainingId){
		var portlet = zenPage.getComponent(portletIdx);
		
		var idx = 0;
		for(idx=0; idx < portlet._markers.length; idx++){
			if (portlet._markers[idx].data.ID == trainingId)
				break;
		}
		
		portlet.markerClickHandler(idx);
	};
	
	var changeTraining = function(id){
		window.open('/csp/stc/stc/index.csp#/training/'+id,  'trEdit');
	};
	
	 var findScoreCardWidgetByName = function(name)
	 {
	  	var result = null;
	  	var desktop = zen('desktop');
	  	if (desktop) {
	    	for (var n = 0; desktop.children.length; n++) {
	      		var widget = desktop.children[n];
	      		if (widget && name==widget.name) {
	        		result = zen(widget.id+'/scoreCard');
	        		break;
	      		}
	    	}
	  	}
	  	return result;
	 };
   </script>>
   
   
   set lang = ##class(%MessageDictionary).GetSessionLanguage()
	
	// Словарь для контента в окнах
	&html<<script language="javascript">
		var dict = {lang: '#(lang)#',
					dict:{
					'Город': 
						{'ru':'Город', 
						 'en': 'City'},
					'Адрес'  : 
						{'ru': 'Адрес', 
						 'en': 'Address'},
					'Дата начала обучения': 
						{'ru': 'Дата начала обучения', 
						 'en': 'Training start date'},
					'Дата окончания обучения': 
						{'ru': 'Дата окончания обучения', 
						 'en': 'Training end date'},
					'Подгрупп / слушателей':
						{'ru': 'Подгрупп / слушателей', 
						 'en': 'Sub-groups / students'},
					'Преподаватель':
						{'ru': 'Преподаватель', 
						 'en': 'Teacher'},
					'Назад': 
						{'ru': 'Назад', 
						 'en': 'Back'},
					'Детали': 
						{'ru': 'Детали', 
						 'en': 'Details'},
					'ФИО': 
						{'ru': 'ФИО', 
						 'en': 'Full name'},
					'Телефон': 
						{'ru': 'Телефон', 
						 'en': 'Phone'},
					'Организация': 
						{'ru': 'Организация', 
						 'en': 'Organization'},
					'Слушатели курса': 
						{'ru': 'Слушатели курса', 
						 'en': 'Students'},	
					'Вернуться к таблице': 
						{'ru': 'Вернуться к таблице', 
						 'en': 'Back to table'},
					'Открыть в другом окне': 
						{'ru': 'Открыть в другом окне', 
						 'en': 'Open in another window'}	
					}, localize: function(str){
									var value;
									
									try{
										value = this.dict[str][this.lang];
									}catch(ex){
										value = str;
									}
									return value ? value : str;
							   }};
	</script>>
	
	// Подключение google API для текущего языка
	&html<<script src="http://maps.google.com/maps/api/js?v=3&sensor=false&language=#(lang)#"></script>>
]]></Implementation>
</Method>

<Method name="onApplyFilters">
<Internal>1</Internal>
<FormalSpec>refresh</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenInvokeCallbackMethod(this.onapplyfilters,this,'onapplyfilters','refresh',refresh);
]]></Implementation>
</Method>

<Method name="openInfoWindowForSingleTraining">
<FormalSpec>marker,isBackOn</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try{
		var sc=findScoreCardWidgetByName('TrainingStudents'); 
	  	sc.parent.parent.parent.titleDiv.innerHTML = dict.localize("Слушатели курса")+" - " + marker.data.Course + '. ' + marker.data.City + '.';
	  	
	  	if (marker.data.StudentsCount == 0){
		  	zenPage.dashboardEventHandler(zenThis,'click', '0', 'applyFilter', 'TrainingStudents', 'Training');
	  	}
	  	else{
	  		zenPage.dashboardEventHandler(zenThis,'click', marker.data.ID, 'applyFilter', 'TrainingStudents', 'Training');
	  	}
	  	
		var content = "<div id='infoWindowContentId' class='infoWindowContent'>" 
		                + "<span style='font-weight: bold;'>" + marker.data.Course + "</span><br><br>"
			            + "<span>" + dict.localize("Город") + ": " + marker.data.City + "</span><br>"
			            + "<span>" + dict.localize("Адрес") + ": " + marker.data.Street + (marker.data.Room=='-' ? '' : ('; ' + marker.data.Room)) + "</span><br>"
			            + "<span>" + dict.localize("Дата начала обучения") + ": " + marker.data.DateStart + "</span><br>"
			            + "<span>" + dict.localize("Дата окончания обучения") + ": " + marker.data.DateFinish + "</span><br>"
			            + "<span>" + dict.localize("Преподаватель") + ": " + marker.data.Teacher + "</span><br>"
			            + "<span>" + dict.localize("Подгрупп / слушателей") + ": " + marker.data.SubGroupsCount + ' / ' + marker.data.StudentsCount + "</span><br>"
			            + "<button class='trTableSingle_Btn' title='"+dict.localize("Вернуться к таблице")+"' style='" + (isBackOn ? '' : 'display: none;') + "' onclick=\"backToTable(\'" + this.index + "\',\'" + marker.data.ID + "\')\">"+dict.localize("Назад")+"</button>"
						+ "<button class='trTableSingle_Btn' style='float: right;' title='"+dict.localize("Открыть в другом окне")+"' onclick='changeTraining("+marker.data.ID+")'>"+dict.localize("Детали")+"</button>"
					+ "</div>";
					  
		this.openInfoWindowAtPosition(marker.position, content);
	}
	catch(ex){
		alert(ex);
		console.log(ex);
	}
]]></Implementation>
</Method>

<Method name="openInfoWindowForManyTrainings">
<FormalSpec>marker,content</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try{		
		content = "<div id='infoWindowContentId' class='infoWindowContent'>" + content + '</div>';
		this.openInfoWindowAtPosition(marker.position, content);
	}
	catch(ex){
		alert(ex);
		console.log(ex);
	}
]]></Implementation>
</Method>

<Method name="getAllFiltersValues">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var result;
	
	try{		
		var filterState = this.parent.parent.filterState;
		
		result = "Year*" + (filterState.Year ? filterState.Year : "") 
			   + ";Status*" + (filterState.Status ? filterState.Status : "")
			   + ";Course*" + (filterState.Course ? filterState.Course : "")
			   + ";Teacher*" + (filterState.Teacher ? filterState.Teacher : "")
			   + ";Company*" + (filterState.Company ? filterState.Company : "")
			   + ";CompanyType*" + (filterState.CompanyType ? filterState.CompanyType : "");
		
		console.log(result);
	}
	catch(ex){
		console.log(ex);
	}
	
	return result;
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====================================================================================================================

]]></Content>
</UDLText>

<Method name="FindTrainingNeighbors">
<FormalSpec>filterValues:%String,portletIndex:%Integer,trainingId:%String,latitude:%Float,longitude:%Float</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	try{
		set (id,city)=""
		
		set content = ""_
			"<span style='font-weight: bold;'>"_##class(Stc.Utils.Msg).GetMsg("city")_": %city</span><br><br>"_
		    "<table id='trTable' class='trainingTable' border='1' cellspacing='0'>"_
		      "<tr id='trTableTrHeader'><th>№</th><th>"_##class(Stc.Utils.Msg).GetMsg("course")_"</th><th>"_##class(Stc.Utils.Msg).GetMsg("date")_"</th><th>"_##class(Stc.Utils.Msg).GetMsg("address")_"</th></tr>"	
			
		set count = 0
		
		set filterValues = $LISTFROMSTRING(filterValues, ";")
		
		set sql = ##class(Stc.DeepSee.KPI.TrainingPoints).GetSql(
				  $P($LIST(filterValues,1),"*",2),
				  $P($LIST(filterValues,2),"*",2),
				  $P($LIST(filterValues,3),"*",2),
				  $P($LIST(filterValues,4),"*",2),
				  $P($LIST(filterValues,5),"*",2),
				  $P($LIST(filterValues,6),"*",2))
		
		set idxWHEREends = $FIND(sql, "FROM Stc_Data.Training as tr WHERE")
		
		if (idxWHEREends = 0){
			set sql = "SELECT tr.ID FROM Stc_Data.Training as tr WHERE tr.Latitude="_latitude_" AND tr.Longitude="_longitude
		}
		else{
			set sql = "SELECT tr.ID FROM Stc_Data.Training as tr WHERE tr.Latitude="_latitude_" AND tr.Longitude="_longitude_" "_
					   "AND "_$EXTRACT(sql, idxWHEREends, *)
		}
		
		set sql = sql_" ORDER BY tr.DateStart DESC"
		set ^temp("sql") = sql
		
		set statement = ##class(%SQL.Statement).%New()
		set st = statement.%Prepare(sql)
		
		set resultSet = statement.%Execute()
		
		while (resultSet.%Next() '= 0) 
		{
			set id = resultSet.%GetData(1)
			
			set count = count + 1
			
			set tr = ##class(Stc.Data.Training).%OpenId(id)
			set city = tr.City.Name.Value
			set content = content_##class(%MessageDictionary).FormatText("<tr title='"_tr.Course.Name.Value_"' onclick='selectTrTableRow(""%1"")'><td>%2</td><td>%3</td><td nowrap>%4</td><td>%5</td></tr>",
								 portletIndex_";"_id,
								 count, $E(tr.Course.Name.Value,1,25)_"...", $REPLACE($ZD(tr.DateStart,4),"/","-"), tr.Street.Value)
		}
		
		do statement.%Close()
		
		if (count = 1){
			set content = ""
		}
		else{
			set content = $REPLACE(content_"</table>", "%city", city)
		}
		
		/*
		&sql(DECLARE TRCur CURSOR FOR 
			 SELECT ID
			 FROM Stc_Data.Training
			 WHERE Latitude=:latitude AND Longitude=:longitude)	
			
		&sql(OPEN TRCur)
		for  
		{	
			&sql(FETCH TRCur INTO :id) 
			quit:(SQLCODE '= 0)
			set count = count + 1
			
			set tr = ##class(Stc.Data.Training).%OpenId(id)
			set city = tr.City.Name.Value
			set content = content_##class(%MessageDictionary).FormatText("<tr title='"_tr.Course.Name.Value_"' onclick='selectTrTableRow(""%1"")'><td>%2</td><td>%3</td><td nowrap>%4</td><td>%5</td></tr>",
								 portletIndex_";"_id,
								 count, $E(tr.Course.Name.Value,1,25)_"...", $REPLACE($ZD(tr.DateStart,4),"/","-"), tr.Street.Value)		
			
		}
			
		&sql(CLOSE TRCur)
		
		if (count = 1){
			set content = ""
		}
		else{
			set content = $REPLACE(content_"</table>", "%city", city)
		}
		*/
	}
	catch(ex){
		set content = "<div class='infoWindowContent'>"_ex.Name_", "_ex.Location_"</div>"
	}
	
	quit content
]]></Implementation>
</Method>

<XData name="Style">
<Description>
Style for the portlet</Description>
<Data><![CDATA[
<style type="text/css">

.portletDiv {
	padding: 5px;
	font-size: 25px;
}

.gm-style-iw{
	max-height:200px!important;

    overflow-y:auto;
}

.trainingTable{
	width: 450px;
	border-color: #dddddd;
	
}

.trainingTable tr td, .trainingTable tr th{
	padding: 0 4px 0 4px;
}

.trainingTable tr th{
	text-align: left;
}

.trainingTable tr:hover{
	background-color: #c4e3f3;
	cursor: pointer;
}

#trTableTrHeader:hover{
	background-color: white;
	cursor: default;
}

.infoWindowContent{
	font-size:12px; 
	font-family:arial;
}

.trTableSingle_Btn{
	background-color: white;
	cursor: pointer;
	border: none;
	font-style: italic;
	color: blue;
	padding: 2px;
	margin-top: 7px;
}

.trTableSingle_Btn:hover{
	color: darkblue;
}
</style>
]]></Data>
</XData>
</Class>


<Class name="Stc.DeepSee.TrainingPointsMapPortletYandexVersion">
<Description>
Portlet that displays a clickable yandex map. Supports 2012.2 and higher versions of Cache.
Improvements compared to %DeepSee.Component.Widget.map:
1) Polygon support. In addition to placemarksmarks, this widget supports clickable colored polygons with tooltips.
   The "polygonCoordsProperty" widget setting should be set to the name of a data source property that provides polygon coordinates. The value of this property is expected to contain one or more ordered sequences of coordinates each of which designates a closed loop.
   Sequences are delimited by ; (semicolon). Coordinates in such a sequence are delimited by spaces, for example: 42.725042,55.257428,0 42.727162,55.270206,0 42.737196,55.27019,0 42.725042,55.257428,0
   An alternative approach is to store polygon coordinates in a static js file rather than in the database. See polygonCoordsJsFile property description for details.
2) Configurable names of data source properties that provide placemark and polygon data (latitude, longitude, color, opacity etc).
3) Configurable "onclick", "oncontextmenu" handler for placemarks and polygons. Configurable "onaddpolygon" and "onaddplacemark" handlers.
4) Drilldown capabilities.
5) Slider range for polygons. If polygonColorProperty not empty, that created slider component on map and load jquery libraries(in method %DrawHTML).
   SaveBordersMethod - method for save range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X, minValue: X, maxValue: X}. parentRegionId - may be null if this first level
   LoadBordersMethod - method to get an range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X}. parentRegionId - may be null if this first level
6) getAdditionInfoForObjectById - method to get an proxyObject with other information, pattern - 'ClassName;MethodName', method takes a single parameter(string) - object id. Call this method like this - 'var otherInfo = zenThis.GetAdditionInformationForObjectById(id);'</Description>
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeCreated>63223,54909.281803</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Parameter INCLUDEFILES = "script:http://api-maps.yandex.ru/2.1/?load=package.full&lang=ru-RU,script:http://yandex.github.io/ymaps-pie-chart-clusterer/build/pie-chart-clusterer.min.js";

]]></Content>
</UDLText>

<Property name="latitude">
<Description>
Yandex map API

MAP Properties -------------------------------------------------------------------------------------- 

Initial latitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>60</InitialExpression>
</Property>

<Property name="longitude">
<Description>
Initial longitude (as a decimal number).</Description>
<Type>%ZEN.Datatype.float</Type>
<InitialExpression>85</InitialExpression>
</Property>

<Property name="zoom">
<Description>
Initial zoom level (0 shows entire globe).</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="mapType">
<Description>
Initial map display.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"yandex#map"</InitialExpression>
<Parameter name="VALUELIST" value=",yandex#map,yandex#satellite,yandex#hybrid"/>
</Property>

<Property name="onaddplacemark">
<Description>

PLACEMARK Properties ------------------------------------------------------------------------------- 

onaddplacemark event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onclickplacemark">
<Description>
onclickplacemark event handler: if defined, this event is fired when a placemark is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="oncontextmenuplacemark">
<Description>
oncontextmenuplacemark event handler: if defined, this event is fired when a placemark is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="placemarkDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current placemark. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkLatitudeProperty">
<Description>
Name of property in data source that provides the latitude value for a placemark.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkLongitudeProperty">
<Description>
Name of property in data source that provides the longitude value for a placemark.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkTitleProperty">
<Description>
Name of property in data source that provides the title of a placemark (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIcon">
<Description>
Default placemark icon href.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIconProperty">
<Description>
Name of property in data source that provides icon href for placemarks.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkSpecialIcon">
<Description>
Special placemark icon href.                                                                     </Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkSpecialProperty">
<Description>
Special placemark property                                                                       </Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="placemarkIconSize">
<Description>
Placemark icon size (ignored if both placemarkIcon and placemarkIconProperty are not set).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="onaddpolygon">
<Description>

POLYGON Properties ---------------------------------------------------------------------------------

onaddpolygon event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onclickpolygon">
<Description>
onclickpolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="oncontextmenupolygon">
<Description>
oncontextmenupolygon event handler: if defined, this event is fired when a polygon is clicked.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="polygonCoordsProperty">
<Description>
Name of property in data source that provides the coordinates array for a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonCoordsJsFile">
<Description><![CDATA[
JS file containing "function loadCoordinates(polygonCoordsArray) {}" that populates a polygon coordinates associative array.
If <var>polygonCoordsJsFile</var> is specified then <var>polygonCoordsProperty</var> must contain name of the property that provides keys for the coordinates associative array.]]></Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonColorProperty">
<Description>
Name of property in data source that provides the color of a polygon.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonTitleProperty">
<Description>
Name of property in data source that provides the title of a polygon (used for tooltip text).</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonDataProperties">
<Description>
List of properties in data source that provides data to be stored within the current polygon. This data is visible from onclick event handler.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonFillOpacity">
<Description>
Default fillOpacity for polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonFillOpacityProperty">
<Description>
Name of property in data source that provides polygon fill opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonHoverOpacity">
<Description>
Hover opacity for clickable polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonStrokeOpacity">
<Description>
Polygon stroke opacity.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonStrokeWeight">
<Description>
Polygon stroke weight.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonSaveBordersMethod">
<Description>
Method name for save slider range borders</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="polygonLoadBordersMethod">
<Description>
Method name to get slider range borders</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="isClickableProperty">
<Description>

COMMON Properties ---------------------------------------------------------------------------------

Name of property in data source that provides "сlickable" attribute value for placemarks and polygons.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="ondrilldown">
<Description>
ondrilldown event handler: if defined, this event is fired from drillDown() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="ondrillup">
<Description>
ondrillup event handler: if defined, this event is fired from drillUp() method.</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="onapplyfilters">
<Description>
onapplyfilters event handler</Description>
<Type>%ZEN.Datatype.eventHandler</Type>
</Property>

<Property name="drillUpButtonPosition">
<Description><![CDATA[
Where "<< Back" button is located]]></Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"top"</InitialExpression>
<Parameter name="VALUELIST" value="top,bottom"/>
</Property>

<Property name="getAdditionInfoForObjectById">
<Description>
Method name to get proxyObject with other info for object</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Method name="%OnGetPortletName">
<Description>

PORTLET Methods ---------------------------------------------------------------------------------------
</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "KZ Map"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "deepsee/world_48.gif"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pInfo:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    kill pInfo

    set tTypeList = "ENUM^"_
            $$$Text("Roadmap","%DeepSee")_":yandex#map,"_
            $$$Text("Satellite","%DeepSee")_":yandex#satellite,"_
            $$$Text("Hybrid","%DeepSee")_":yandex#hybrid"
    
    set pInfo($I(pInfo)) = $LB("mapType","",tTypeList,$$$Text("Map Type","%DeepSee"),$$$Text("Initial display type for the map","%DeepSee"))
    set pInfo($I(pInfo)) = $LB("zoom",2,"%Integer",$$$Text("Zoom","%DeepSee"),$$$Text("Initial zoom level for the map","%DeepSee"))
    set pInfo($I(pInfo)) = $LB("latitude",60,"%Number",$$$Text("Starting latitude","%DeepSee"),$$$Text("Initial latitude for the map","%DeepSee"))
    set pInfo($I(pInfo)) = $LB("longitude",85,"%Number",$$$Text("Starting longitude","%DeepSee"),$$$Text("Initial longitude for the map","%DeepSee"))
    
    set pInfo($I(pInfo)) = $LB("onclickplacemark","","%ZEN.Datatype.eventHandler","'onclickplacemark' event handler","User callback for onclickplacemark event")
    set pInfo($I(pInfo)) = $LB("oncontextmenuplacemark","","%ZEN.Datatype.eventHandler","'oncontextmenuplacemark' event handler","User callback for oncontextmenuplacemark event")
    
    set pInfo($I(pInfo)) = $LB("placemarkLatitudeProperty","","%ZEN.Datatype.string","Latitude property","Latitude property for placemarks")
    set pInfo($I(pInfo)) = $LB("placemarkLongitudeProperty","","%ZEN.Datatype.string","Longitude property","Longitude property for placemarks")
    set pInfo($I(pInfo)) = $LB("placemarkTitleProperty","","%ZEN.Datatype.string","Placemark title property","Title property for placemarks")
    set pInfo($I(pInfo)) = $LB("placemarkDataProperties","","%ZEN.Datatype.string","Placemark data properties","List of data properties for placemarks")
    set pInfo($I(pInfo)) = $LB("placemarkIconProperty","","%ZEN.Datatype.string","Placemark icon property","Placemark icon property")
    set pInfo($I(pInfo)) = $LB("placemarkIcon","","%ZEN.Datatype.string","Placemark icon","Default placemark icon")
    set pInfo($I(pInfo)) = $LB("placemarkSpecialIcon","","%ZEN.Datatype.string","Placemark special icon","Placemark icon for special place")
    set pInfo($I(pInfo)) = $LB("placemarkSpecialProperty","","%ZEN.Datatype.string","Placemark special property","Placemark special property for special icon")
    set pInfo($I(pInfo)) = $LB("placemarkIconSize","","%ZEN.Datatype.string","Placemark icon size","Default placemark icon size (ingored if Placemark icon is not set)")
    
    set pInfo($I(pInfo)) = $LB("polygonCoordsJsFile","","%ZEN.Datatype.string","JS file with coords","JS file with javascript 'function loadCoordinates(polygonCoordsArray) {...}' that populates polygonCoordsArray argument with polygon coordinates keyed by values from the data source property specified in 'Polygon coords property' setting.")
    set pInfo($I(pInfo)) = $LB("polygonCoordsProperty","","%ZEN.Datatype.string","Polygon coords property","Data source property that provides coordinates for polygons if 'JS file with coords' is not specified. Otherwise this setting should contain name of data source property that provides keys for associative array which is populated by javascript code in 'JS file with coords'.")
    
    set pInfo($I(pInfo)) = $LB("onclickpolygon","","%ZEN.Datatype.eventHandler","'onclickpolygon' event handler","User callback for onclickpolygon event")  
    set pInfo($I(pInfo)) = $LB("oncontextmenupolygon","","%ZEN.Datatype.eventHandler","'oncontextmenupolygon' event handler","User callback for oncontextmenupolygon event")    
    
    
    set pInfo($I(pInfo)) = $LB("polygonColorProperty","","%ZEN.Datatype.string","Polygon сolor property","Color property for polygons")
    set pInfo($I(pInfo)) = $LB("polygonTitleProperty","","%ZEN.Datatype.string","Polygon title property","Title property for polygons")
    set pInfo($I(pInfo)) = $LB("polygonDataProperties","","%ZEN.Datatype.string","Polygon data properties","List of data properties for polygons")
    set pInfo($I(pInfo)) = $LB("polygonFillOpacityProperty","","%ZEN.Datatype.string","Fill opacity property","Fill opacity property for polygons")
    set pInfo($I(pInfo)) = $LB("isClickableProperty","","%ZEN.Datatype.string","IsClickable flag property","IsClickable flag property for polygons")
    
    set pInfo($I(pInfo)) = $LB("polygonFillOpacity","","%ZEN.Datatype.string","Fill opacity","Default fill opacity for polygons")
    set pInfo($I(pInfo)) = $LB("polygonHoverOpacity","","%ZEN.Datatype.string","Hover opacity","Hover opacity for clickable polygons")
    set pInfo($I(pInfo)) = $LB("polygonStrokeOpacity","","%ZEN.Datatype.string","Stroke opacity","Stroke opacity for polygons")
    set pInfo($I(pInfo)) = $LB("polygonStrokeWeight","","%ZEN.Datatype.string","Stroke weight","Stroke weight for polygons")
    
    set pInfo($I(pInfo)) = $LB("drillUpButtonPosition","top","ENUM^top,bottom","Drill-up button position","Where ""<< Back"" button is located")
        
    set pInfo($I(pInfo)) = $LB("ondrilldown","","%ZEN.Datatype.eventHandler","'ondrilldown' event handler","User callback for ondrilldown event")
    set pInfo($I(pInfo)) = $LB("ondrillup","","%ZEN.Datatype.eventHandler","'ondrillup' event handler","User callback for ondrillup event")
    
    set pInfo($I(pInfo)) = $LB("onapplyfilters","","%ZEN.Datatype.eventHandler","'onapplyfilters' event handler","User callback for onapplyfilters event")
    set pInfo($I(pInfo)) = $LB("onaddpolygon","","%ZEN.Datatype.eventHandler","'onaddpolygon' event handler","User callback for onaddpolygon event")
    set pInfo($I(pInfo)) = $LB("onaddplacemark","","%ZEN.Datatype.eventHandler","'onaddplacemark' event handler","User callback for onaddplacemark event")
    

    //[+]
    set pInfo($I(pInfo)) = $LB("polygonSaveBordersMethod","ClassName;MethodName","%String","Save borders method","Method for save range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X, minValue: X, maxValue: X}. parentRegionId - may be null if this first level")     
    set pInfo($I(pInfo)) = $LB("polygonLoadBordersMethod","ClassName;MethodName","%String","Get borders method","Method to get an range borders, pattern - 'ClassName;MethodName', method takes a single parameter(object) - {parameterId: X, level: X, parentRegionId:X}. parentRegionId - may be null if this first level")       
    set pInfo($I(pInfo)) = $LB("getAdditionInfoForObjectById","ClassName;MethodName","%String","Get addition info for object","Method to get an proxyObject with other information, pattern - 'ClassName;MethodName', method takes a single parameter(string) - object id. Call this method like this - 'var otherInfo = zenThis.GetAdditionInformationForObjectById(id);'")        
    

    quit $$$OK
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
    
    // This causes ZEN to render this component on the client.
    set ..renderFlag = ..renderFlag + 1
    
    // copy ..settings into properties
    #dim propName As %String = $order(..settings(""))
    while (propName '= ""){
        if ("" '= $get(..settings(propName)))
            try{
                set $property($this, propName) = ..settings(propName)
            }
            catch {}

        set propName = $order(..settings(propName))
    }
    
    &html<  
    <script type="text/javascript">
        
    function hsv2rgb(h,s,v){
        // Adapted from http://www.easyrgb.com/math.html
        // hsv values = 0 - 1, rgb values = 0 - 255
        var r, g, b;
        var RGB = new Array();
        if(s == 0){
          RGB['red']=RGB['green']=RGB['blue']=Math.round(v*255);
        }
        else{
          var var_h = h * 6;  // h must be < 1
          if (var_h == 6) var_h = 0;
          var var_i = Math.floor( var_h );
          var var_1 = v*(1-s);
          var var_2 = v*(1-s*(var_h-var_i));
          var var_3 = v*(1-s*(1-(var_h-var_i)));
          if (var_i == 0){
            var_r = v; 
            var_g = var_3; 
            var_b = var_1;
          }
          else if (var_i == 1){
            var_r = var_2;
            var_g = v;
            var_b = var_1;
          }
          else if (var_i == 2){
            var_r = var_1;
            var_g = v;
            var_b = var_3
          }
          else if (var_i == 3){
            var_r = var_1;
            var_g = var_2;
            var_b = v;
          }
          else if (var_i == 4){
            var_r = var_3;
            var_g = var_1;
            var_b = v;
          }
          else{
            var_r = v;
            var_g = var_1;
            var_b = var_2
          }
          RGB['red'] = Math.round(var_r * 255);
          RGB['green'] = Math.round(var_g * 255);
          RGB['blue'] = Math.round(var_b * 255);
        }
        return '#' + RGB['red'].toString(16) + RGB['green'].toString(16) + RGB['blue'].toString(16);
    };
    </script>
    >
    
    if (..polygonCoordsJsFile '= ""){
        &html<<script type='text/javascript' src='#(..polygonCoordsJsFile)#'></script>>
    }
    
    if (..polygonColorProperty = ""){
        /*/ JQUERY Libraries
        &html<
          <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
          <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
        >
        */
    }
    
    
    &html<
    <script type='text/javascript'>
    
    var selectTrTableRow = function(data){
        data = data.split(';');
        var portlet = zenPage.getComponent(data[0]);
        
        var idx = 0, isFound = false;
        for(idx=0; idx < portlet._markers.length; idx++){
            if (portlet._markers[idx].data.ID == data[1]){
                isFound = true;
                break;
            }
        }
        
        if (!isFound) return;
    
        portlet.openInfoWindowForSingleTraining(portlet._markers[idx], true);   
    };

    var backToTable=function(portletIdx, trainingId){
        var portlet = zenPage.getComponent(portletIdx);
        
        var idx = 0;
        for(idx=0; idx < portlet._markers.length; idx++){
            if (portlet._markers[idx].data.ID == trainingId)
                break;
        }
        
        portlet.markerClickHandler(idx);
    };
    
    var changeTraining = function(id){
        window.open('/csp/stc/stc/index.csp#/training/'+id,  'trEdit');
    };
    
     var findScoreCardWidgetByName = function(name)
     {
        var result = null;
        var desktop = zen('desktop');
        if (desktop) {
            for (var n = 0; desktop.children.length; n++) {
                var widget = desktop.children[n];
                if (widget && name==widget.name) {
                    result = zen(widget.id+'/scoreCard');
                    break;
                }
            }
        }
        return result;
     };
   </script>>
   
   
   set lang = ##class(%MessageDictionary).GetSessionLanguage()
    
    // Словарь для контента в окнах
    &html<<script language="javascript">
        var dict = {lang: '#(lang)#',
                    dict:{
                    'Город': 
                        {'ru':'Город', 
                         'en': 'City'},
                    'Адрес'  : 
                        {'ru': 'Адрес', 
                         'en': 'Address'},
                    'Дата начала обучения': 
                        {'ru': 'Дата начала обучения', 
                         'en': 'Training start date'},
                    'Дата окончания обучения': 
                        {'ru': 'Дата окончания обучения', 
                         'en': 'Training end date'},
                    'Подгрупп / слушателей':
                        {'ru': 'Подгрупп / слушателей', 
                         'en': 'Sub-groups / students'},
                    'Преподаватель':
                        {'ru': 'Преподаватель', 
                         'en': 'Trainer'},
                    'Назад': 
                        {'ru': 'Назад', 
                         'en': 'Back'},
                    'Детали': 
                        {'ru': 'Детали', 
                         'en': 'Details'},
                    'ФИО': 
                        {'ru': 'ФИО', 
                         'en': 'Full name'},
                    'Телефон': 
                        {'ru': 'Телефон', 
                         'en': 'Phone'},
                    'Организация': 
                        {'ru': 'Организация', 
                         'en': 'Organization'},
                    'Слушатели курса': 
                        {'ru': 'Слушатели курса', 
                         'en': 'Attendees'},   
                    'Вернуться к таблице': 
                        {'ru': 'Вернуться к таблице', 
                         'en': 'Back to table'},
                    'Открыть в другом окне': 
                        {'ru': 'Открыть в другом окне', 
                         'en': 'Open in another window'}    
                    }, localize: function(str){
                                    var value;
                                    
                                    try{
                                        value = this.dict[str][this.lang];
                                    }catch(ex){
                                        value = str;
                                    }
                                    return value ? value : str;
                               }};
    </script>>
    
    set lang = $CASE(lang, "en" : "en-Us", : "ru-Ru")
    
    // Подключение google API для текущего языка
    //&html<<script src="http://maps.google.com/maps/api/js?v=3&sensor=false&language=#(lang)#"></script>>-->
    &html<
        <script src="http://api-maps.yandex.ru/2.1/?load=package.full&lang=#(lang)#"></script>
        <script src="http://yandex.github.io/ymaps-pie-chart-clusterer/build/pie-chart-clusterer.min.js"></script>
        >
]]></Implementation>
</Method>

<Method name="getControl">
<Description>
Obtain a reference to a filter (or any other widget control).</Description>
<FormalSpec>ind</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    return zenPage.getComponent(this.parent.parent.controlIndices[ind]);
]]></Implementation>
</Method>

<Method name="getFilterStateArray">
<Description>
Get the array of filter state information for the widget.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    return this.parent.parent.getFilterStateArray();
]]></Implementation>
</Method>

<Method name="onApplyFilters">
<Internal>1</Internal>
<FormalSpec>refresh</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    zenInvokeCallbackMethod(this.onapplyfilters,this,'onapplyfilters','refresh',refresh);
]]></Implementation>
</Method>

<Method name="notifyViewHandler">
<Description>
Notification that the dataController associated with this dataView has raised an event.</Description>
<FormalSpec>reason,data1,data2,data3</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    switch(reason) {
        case 'dataChange':
            this.onApplyFilters(true);      
        case 'modelChange':
            // some change in dataController
            this.acquireData();
            this.syncPlacemarks();
            this.syncPolygons();
            break;
        
        case 'seriesChange':
            break;
    }
]]></Implementation>
</Method>

<Method name="acquireData">
<Description>
Internal method: acquire data for this view and store a copy in a local cache.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    
    var controller = this.getController();
    if (null == controller){
        // try to connect to dataController
        this.connectToController();
        controller = this.getController();
    }

    // array of placemark data
    this._placemarkData = [];
    
    if (controller && (this.placemarkLatitudeProperty != '') && (this.placemarkLongitudeProperty != '')){
        // get data from controller (make sure data is loaded)
        var dims = controller.getDimensions();
        
        // are we connected to a pivot table?
        var invert = controller.getSelectedRange;
        if (!invert){
            var seriesSize = controller.getDimSize(1);
            var seriesCount = controller.getDimSize(2);
            var labelDim = 2;
            var titleCol = -1;
            var latCol = -1;
            var longCol = -1;
            var clickableCol = -1;
            var miCol = -1;
            var specIconCol = -1;
        }
        else{
            var seriesSize = controller.getDimSize(2);
            var seriesCount = controller.getDimSize(1);
            var labelDim = 1;
        }
        
        if (seriesCount > 0){
            // find long and lat and title columns
            if (!invert){
                for (var p = 0; p < seriesSize; p++){
                    var pname = controller.getPropertyName(p);
                    if (pname == this.placemarkLatitudeProperty) {
                        latCol = p;
                    }
                    if (pname == this.placemarkLongitudeProperty) {
                        longCol = p;
                    }
                    if (pname == this.placemarkTitleProperty) {
                        titleCol = p;
                    }
                    if (pname == this.isClickableProperty) {
                        clickableCol = p;
                    }
                    if (pname == this.placemarkIconProperty) {
                        miCol = p;
                    }
                    if (pname == this.placemarkSpecialProperty) {
                        specIconCol = p;
                    }
                }
            }
            
            // each series corresponds to a placemark
            if (invert || (latCol >= 0 && longCol >= 0)){
                for (var n = 0; n < seriesCount; n++){
                    var isClickable = 1;
                    var mi = null;
                    var specIcon = 0;
                    var sname = controller.getLabel(n,labelDim);

                    if (!invert){
                        var lat = controller.getData(latCol,n);
                        var long = controller.getData(longCol,n);
                        if (titleCol >= 0) sname = controller.getData(titleCol,n);
                        if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
                        if (miCol >= 0) mi = controller.getData(miCol,n);
                        if (specIconCol >= 0) specIcon = controller.getData(specIconCol,n);
                    }
                    else{
                        var lat = controller.getDataByName(this.placemarkLatitudeProperty,n);
                        var long = controller.getDataByName(this.placemarkLongitudeProperty,n);
                        if (this.placemarkTitleProperty != '') sname = controller.getDataByName(this.placemarkTitleProperty,n);
                        if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
                        if (this.placemarkIconProperty != '') mi = controller.getDataByName(this.placemarkIconProperty,n);
                        if (this.placemarkSpecialProperty != '') specIcon = controller.getDataByName(this.placemarkSpecialProperty,n);
                    }
            
                    if (!isNaN(parseFloat(lat)) && !isNaN(parseFloat(long))){
                        var data = [];
                        if (this.placemarkDataProperties != ''){
                            var props = this.placemarkDataProperties.split(",");
                            for (var i = 0; i < props.length; i++){
                                data[props[i]] = controller.getDataByName(props[i],n);
                            }
                        }
                        
                        if (!mi) mi = this.placemarkIcon;
                    
                        this._placemarkData[this._placemarkData.length] = {
                            title: sname,
                            latitude: lat,
                            longitude: long,
                            isClickable: (!isClickable ? 1 : isClickable),
                            icon: mi,
                            specialIcon: specIcon,
                            data: data
                        };
                    }
                }
            }
        }
    } // end if (controller && (this.placemarkLatitudeProperty != '') && (this.placemarkLongitudeProperty != ''))
    
    // array of polygon data
    this._polygonData = [];
    
    if (this.polygonCoordsJsFile && !this._polygonCoords){
        this._polygonCoords = [];
        loadCoordinates(this._polygonCoords);
    }
    
    if (controller && (this.polygonCoordsProperty != '')){
        // get data from controller (make sure data is loaded)
        var dims = controller.getDimensions();
        
        // are we connected to a pivot table?
        var invert = controller.getSelectedRange;
        if (!invert){
            var seriesSize = controller.getDimSize(1);
            var seriesCount = controller.getDimSize(2);
            var labelDim = 2;
            var titleCol = -1;
            var coordsCol = -1;
            var colorCol = -1;
            var foCol = -1;
            var clickableCol = -1;
        }
        else{
            var seriesSize = controller.getDimSize(2);
            var seriesCount = controller.getDimSize(1);
            var labelDim = 1;
        }

        if (seriesCount > 0){
            // find coords and color columns
            if (!invert){
                for (var p = 0; p < seriesSize; p++){
                    var pname = controller.getPropertyName(p);
                    if (pname == this.polygonCoordsProperty){
                        coordsCol = p;
                    }
                    if (pname == this.polygonColorProperty){
                        colorCol = p;
                    }
                    if (pname == this.polygonFillOpacityProperty){
                        foCol = p;
                    }
                    if (pname == this.isClickableProperty){
                        clickableCol = p;
                    }                   
                    if (pname == this.polygonTitleProperty){
                        titleCol = p;
                    }
                }
            }
            
            // each series corresponds to a poly
            for (var n = 0; n < seriesCount; n++){
                var color = 'purple';
                var fo = this.polygonFillOpacity;  // default opacity
                var isClickable = 1;
                
                var sname = controller.getLabel(n,labelDim);

                if (!invert){
                    if (coordsCol<0) break;
                    var coords = controller.getData(coordsCol,n);
                    if (colorCol >= 0) color = controller.getData(colorCol,n);
                    if (foCol >= 0) fo = controller.getData(foCol,n);
                    if (clickableCol >= 0) isClickable = controller.getData(clickableCol,n);
                    if (titleCol >= 0) sname = controller.getData(titleCol,n);
                }
                else{
                    var coords = controller.getDataByName(this.polygonCoordsProperty,n);
                    if (this.polygonColorProperty != '') color = controller.getDataByName(this.polygonColorProperty,n);
                    if (this.polygonFillOpacityProperty != '') fo = controller.getDataByName(this.polygonFillOpacityProperty,n);
                    if (this.isClickableProperty != '') isClickable = controller.getDataByName(this.isClickableProperty,n);
                    if (this.polygonTitleProperty != '') sname = controller.getDataByName(this.polygonTitleProperty,n);
                }
                
                if (!fo) fo = this.polygonFillOpacity;  // default opacity

                if (this.polygonCoordsJsFile) coords = this._polygonCoords[coords];
                
                if (!coords) continue;
                
                var pathsSets = coords.split(";");
                for (var j = 0; j < pathsSets.length; j++){
                    var paths = pathsSets[j].split(" ");
                    for (var i = 0; i < paths.length; i++){
                        var p = paths[i].split(",");
                        paths[i] = [p[1], p[0]];
                    }
                    pathsSets[j] = paths;
                }
                
                var data = [];
            
                if (this.polygonDataProperties != ''){
                    var props = this.polygonDataProperties.split(",");
                    for (var i = 0; i < props.length; i++){
                        data[props[i]] = controller.getDataByName(props[i],n);
                    }
                }
                
                this._polygonData[this._polygonData.length] = {
                    title: sname,
                    coords: pathsSets,
                    color: (!color ? 'purple' : color),
                    fo: (!fo ? 0.1 : fo),
                    isClickable: (!isClickable ? 1 : isClickable),
                    data: data
                };
            }
        }
    }// end if (controller && (this.polygonCoordsProperty != ''))
    /* FOR-SLIDER
    if (!this.polygonColorProperty){
        if ($("#divSliderRangesPart").is(":visible") == true){
            this.getSliderData().isChanged = false;
            this.closeSlider();
        }
    }
    */
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    // get data from controller, if present.
    this.acquireData();
    
    zenPage.dashboardEventHandler('', '', '', 'refresh', '*', '');
    
    //============================ Локализация столбцов в виджете-таблице со студунтами ================
    try{
        var sc = findScoreCardWidgetByName('TrainingStudents');
        for(var i=0; i < sc.parent.parent.children[1].children[0].columns.length; i++){
            sc.parent.parent.children[1].children[0].columns[i].label = dict.localize(sc.parent.parent.children[1].children[0].columns[i].label);
        }
    }
    catch(ex){
        console.log('Portlet Map Error, renderContents(), localize scorecard columns');
    }
    
    
    var portlet = this;
    ymaps.ready(function(){
        portlet.initMap();
        console.log('ymaps.ready(function(){');
        
        // Подключение плагина для круговых диаграмм
        ymaps.modules.require(['PieChartClusterer'], function (PieChartClusterer) {
            console.log('ymaps.modules.require');
            /**
            * Supports all Clusterer constructor options.
            * @see https://tech.yandex.ru/maps/doc/jsapi/2.1/ref/reference/Clusterer-docpage/
            */
            // Создаем собственный макет с информацией о выбранном геообъекте.
            var customBalloonContentLayout = ymaps.templateLayoutFactory.createClass([
                '<ul class=list>',
                // Выводим в цикле список всех геообъектов.
                '{% for geoObject in properties.geoObjects %}',
                    '<li style="color: {{geoObject.options.iconColor}}; font-size: 16px;"><a class="clusterItemLink" href="#" onclick="zenPage.getComponentById(\'' + portlet.id + '\').placemarkEventHandler({{geoObject._id|raw}} , \'click\')"  class="list_item" title="{{geoObject.data.CourseDescription|raw}}">{{geoObject.data.DateStart|raw}}. {{ geoObject.properties.hintContent|raw }}. {{geoObject.data.City|raw}}</a></li>',
                '{% endfor %}',
                '</ul>'
            ].join(''));
            
            portlet._clusterer =  new PieChartClusterer({
                clusterDisableClickZoom: true,
                clusterOpenBalloonOnClick: true,
                // Устанавливаем режим открытия балуна. 
                // В данном примере балун никогда не будет открываться в режиме панели.
                clusterBalloonPanelMaxMapArea: 0,
                // По умолчанию опции балуна balloonMaxWidth и balloonMaxHeight не установлены для кластеризатора,
                // так как все стандартные макеты имеют определенные размеры.
                clusterBalloonMaxHeight: 200,
                // Устанавливаем собственный макет контента балуна.
                clusterBalloonContentLayout: customBalloonContentLayout
            });
        
            portlet._clusterer.events.add("contextmenu", function (e) {  
                var cluster = e.get('target');
                var clusterer = cluster.getParent();
                clusterer.balloon.open(cluster);                                                           
            });
            
            console.log(portlet._clusterer);
            portlet.syncPlacemarks();
            portlet.syncPolygons();
            
            
        });
    });
]]></Implementation>
</Method>

<Method name="initMap">
<Description>

MAP Methods ---------------------------------------------------------------------------------------------

Initialize the map</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    this._mapObject = null;
    var mapDiv = this.getEnclosingDiv();
    
    // test if we have not been rendered yet
    if (mapDiv == null) return;
    
    if (('undefined' == typeof ymaps) || ('undefined' == typeof ymaps.Map)) {
        mapDiv.innerHTML = $$$Text('Unable to load yandex map api.');
        return;
    }
    
    this.latitude = parseFloat(this.latitude);
    if (isNaN(this.latitude)) this.latitude = 60;
    
    this.longitude = parseFloat(this.longitude);
    if (isNaN(this.longitude)) this.longitude = 85;
    
    this.zoom = parseInt(this.zoom, 10);
    if (isNaN(this.zoom)) this.zoom = 2;

    var mapOptions = {
                center: [this.latitude, this.longitude],
                zoom: this.zoom,
                controls: [],
                type: this.mapType ? this.mapType.split(":").pop() : 'yandex#map'
            };
            
    this._mapObject = new ymaps.Map(mapDiv, mapOptions);
    this._mapObject.behaviors.enable('scrollZoom',{smooth: false});
    this._mapObject.controls.add('zoomControl',{smooth: false});
    this._mapObject.controls.add(new ymaps.control.TypeSelector(['yandex#map', 'yandex#satellite', 'yandex#hybrid']));
        
    // array of placemarks
    this._placemarks = [];
    
    // array of polygons
    this._polygons = [];
    
    // drilldown arrays
    this._prevZoom = [];
    this._prevCenter = [];
    this._drillDownTitle = [];
    
    // colors for placemarks
    this._presets = ['islands#redIcon',
                     'islands#greenIcon',
                     'islands#blueIcon', 
                     'islands#orangeIcon', 
                     'islands#yellowIcon',
                     'islands#brownIcon',
                     'islands#oliveIcon',
                     'islands#violetIcon',
                     'islands#pinkIcon',
                     'islands#blackIcon'];
                 
    // create div for dirllUp button
    var drillUpActionComponent = new ymaps.control.Button({
            options: {
                layout: ymaps.templateLayoutFactory.createClass("<div id='" + this.id + "_drillUpActionComponent" + "'></div>")
            }
        });
        
    var duPosition = {left: '5px', top: '10px'};
    if (this.drillUpButtonPosition == "bottom"){
        duPosition = {left: '5px', bottom: '10px'};
    }
    this._mapObject.controls.add(drillUpActionComponent, { float: 'none', position: duPosition });

    

    /*/ Create slider range if we need tool for change color
    if (!this.polygonColorProperty){
        var sliderComponent = new ymaps.control.Button({
                options: {
                    layout: ymaps.templateLayoutFactory.createClass(""+
                    "<div id='divSlider'>" + 
                    "    <div id='divSliderButtonsPart'>" +
                    "        <input id='btnOpenSlider'  type='button' value='Изменить диапазон'  onclick='zenPage.getComponentById(\"" + this.id + "\").openSlider();'/>" +
                    "        <input id='btnCloseSlider' type='button' value='Сохранить диапазон' onclick='zenPage.getComponentById(\"" + this.id + "\").closeSlider();'/>" + 
                    "    </div>" + 
                    "    <div id='divSliderRangesPart'>" + 
                    "        <input id='inputSliderMinValue' type='text' readonly='true' title='Минимальное значение параметра'/>" +  
                    "        <input id='inputSliderValues'   type='text' readonly='true' title='Границы диапазона'/>" + 
                    "        <input id='inputSliderMaxValue' type='text' readonly='true' title='Максимальное значение параметра'/>" + 
                    "        <div id='slider-range' widgetid=\"" + this.id + "\">" + 
                    "        </div>" + 
                    "    </div>" +
                    "</div>")
                }
            });    
        this._mapObject.controls.add(sliderComponent, { float: 'right'});
    }*/
]]></Implementation>
</Method>

<Method name="getMapObject">
<Description>
Return the google map API object used by the map view.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    return this._mapObject;
]]></Implementation>
</Method>

<Method name="openBallonAtPosition">
<Description>
Show an ballon at the specified position.</Description>
<FormalSpec>position,content</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var map = this.getMapObject();
    
    if (map && position){
        map.balloon.open(position, {contentBody: content});
    }
]]></Implementation>
</Method>

<Method name="addPlacemark">
<Description><![CDATA[

PLACEMARK Methods ---------------------------------------------------------------------------------------

Add a placemark to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the placemark.<br/>
Returns the placemark object.]]></Description>
<FormalSpec>id,latitude,longitude,title,isClickable,icon,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var map = this.getMapObject();
    if (!map || isNaN(parseFloat(latitude)) || isNaN(parseFloat(longitude))) return null;

    var geometry = [latitude, longitude];
    var properties = {hintContent: title};
    var options = { 
        preset: data.PlacemarkPreset, 
        iconColor: data.PlacemarkPreset.substring(data.PlacemarkPreset.indexOf("#") + 1, data.PlacemarkPreset.indexOf("Icon"))
    };
        
    var placemark = new ymaps.Placemark(geometry, properties, options);

    // add to list
    placemark._id = id;
    placemark.clickable = (isClickable == 1);
    placemark.data = data;
    
    var index = this._placemarks.length;
    this._placemarks[index] = placemark;
    
    placemark.events.add("click", new Function('zenPage.getComponent(' + this.index + ').placemarkEventHandler("' + index + '", "click");'));   
    placemark.events.add("contextmenu", new Function('zenPage.getComponent(' + this.index + ').placemarkEventHandler("' + index + '", "contextmenu");'));
    
    return placemark;
]]></Implementation>
</Method>

<Method name="getPlacemark">
<Description>
Get placemark from array by index</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    return this._placemarks ? this._placemarks[index] : null;
]]></Implementation>
</Method>

<Method name="placemarkEventHandler">
<Description>
Handler for placemark events by type </Description>
<Internal>1</Internal>
<FormalSpec>index,eventType</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var placemark = this.getPlacemark(index);
    if (!placemark) return;
    
    switch(eventType){
        case 'click':
            zenInvokeCallbackMethod(this.onclickplacemark, this, 'onclickplacemark', 'placemark', placemark);
            break;  
        case 'contextmenu':
            zenInvokeCallbackMethod(this.oncontextmenuplacemark, this, 'oncontextmenuplacemark', 'placemark', placemark);
            break;
    }
]]></Implementation>
</Method>

<Method name="syncPlacemarks">
<Description>
Internal method: sync placemarks to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    this.clearPlacemarks();
    
    var map = this.getMapObject();
    var controller = this.getController();
    if (!map || !controller || !this._placemarkData) 
        return;

    
    //this._clusterer = new PieChartClusterer();
    this._clusterer.removeAll();

    
   /*            
    this._clusterer.events.add("contextmenu", function (e) {  
        var cluster = e.get('target');
        var clusterer = cluster.getParent();
        clusterer.balloon.open(cluster);                                                           
    });
    */              
    try {   
        for (var n = 0; n < this._placemarkData.length; n++){
            var md = this._placemarkData[n];
            if (md){
                if(this.placemarkSpecialIcon != "" && md.specialIcon == 1){
                    md.icon = this.placemarkSpecialIcon;
                }
            
                var placemark = this.addPlacemark(n, md.latitude, md.longitude, md.title, md.isClickable, md.icon, md.data);
            
                if (placemark){
                    zenInvokeCallbackMethod(this.onaddplacemark, this, 'onaddplacemark', 'placemark', placemark);
                }
            }
        }
        
        ///Добавляем массив маркеров в объект clusterer
        this._clusterer.add(this._placemarks);
        map.geoObjects.add(this._clusterer);
    }
    catch(ex) {
        alert('Error in syncPlacemarks ' + ex.message);
    }
]]></Implementation>
</Method>

<Method name="clearPlacemarks">
<Description>
Internal method: clear placemarks from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    try {
        // kill old placemarks
        if (this._placemarks && this._clusterer) {
            for (var n = 0; n < this._placemarks.length; n++) {
                this._clusterer.remove(this._placemarks[n]);
            }
        }
        
        this._placemarks = [];
    }
    catch(ex) {
        alert('Error in clearPlacemarks ' + ex.message);
    }
]]></Implementation>
</Method>

<Method name="openBallonAtPlacemark">
<FormalSpec>placemark</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    try{
        // Обновить виджет со студентами
        var sc = findScoreCardWidgetByName('TrainingStudents'); 
        sc.parent.parent.parent.titleDiv.innerHTML = dict.localize("Слушатели курса")+" - " + placemark.data.Course + '. ' + placemark.data.City + '.';
        
        if (placemark.data.StudentsCount == 0){
            zenPage.dashboardEventHandler(zenThis,'click', '0', 'applyFilter', 'TrainingStudents', 'Training');
        }
        else{
            zenPage.dashboardEventHandler(zenThis,'click', placemark.data.ID, 'applyFilter', 'TrainingStudents', 'Training');
        }
        
        var content = "<div style='font-size:12px; font-family:arial;'>" 
                        + "<span style='font-weight: bold;'>" + placemark.data.Course + "</span><br><br>"
                        + "<span>" + dict.localize("Город") + ": " + placemark.data.City + "</span><br>"
                        + "<span>" + dict.localize("Адрес") + ": " + placemark.data.Street + (placemark.data.Room=='-' ? '' : ('; ' + placemark.data.Room)) + "</span><br>"
                        + "<span>" + dict.localize("Дата начала обучения") + ": " + placemark.data.DateStart + "</span><br>"
                        + "<span>" + dict.localize("Дата окончания обучения") + ": " + placemark.data.DateFinish + "</span><br>"
                        + "<span>" + dict.localize("Преподаватель") + ": " + placemark.data.Teacher + "</span><br>"
                        + "<span>" + dict.localize("Подгрупп / слушателей") + ": " + placemark.data.SubGroupsCount + ' / ' + placemark.data.StudentsCount + "</span><br>"
                        + "<button class='trTableSingle_Btn' style='float: right;' title='"+dict.localize("Открыть в другом окне")+"' onclick='changeTraining(" + placemark.data.ID + ")'>" + dict.localize("Детали") + "</button>"
                    + "</div>";
                      
        this.openBallonAtPosition(placemark.geometry.getCoordinates(), content);
    }
    catch(ex){
        alert(ex);
        console.log(ex);
    }
]]></Implementation>
</Method>

<Method name="addPolygon">
<Description><![CDATA[

POLYGON Methods -----------------------------------------------------------------------------------------

Add a polygon to the map at given coordinates.<br/>
<var>id</var> is a user-defined identifier associated with the polygon.<br/>
Returns the polygon object.]]></Description>
<FormalSpec>id,coords,color,fo,isClickable,title,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var map = this.getMapObject();
    if (!map) return null;

    if (color.substring(0, 4) === "rgb(" && color.indexOf(")") == (color.length - 1) && color.indexOf(".") > -1){
        var colorAr = color.substring(4, color.length - 1).split(",");
        color = "rgb(" + String(parseFloat(colorAr[0])).split(".")[0] + "," + String(parseFloat(colorAr[1])).split(".")[0] + "," + String(parseFloat(colorAr[2])).split(".")[0] + ")";
    }
    
    var polygon = new ymaps.Polygon(
            /* geometry */
            coords, 
            /* properties */
            {
                hintContent: title
            },
            /* options */ 
            {
                fillColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
                fillOpacity: fo,
                strokeColor: (color.substring(0, "hsv2rgb".length) === "hsv2rgb" ? eval(color) : color),
                strokeOpacity: (this.polygonStrokeOpacity ? this.polygonStrokeOpacity : 0.5),
                strokeWeight: (this.polygonStrokeWeight ? this.polygonStrokeWeight : 3),
            });

    // add to list
    polygon._id = id;
    polygon.defaultFO = fo;
    polygon.clickable = (isClickable == 1);
    polygon.data = data;
        
    var index = this._polygons.length;
    this._polygons[index] = polygon;
    
    polygon.events.add("click", new Function('event', 'zenPage.getComponent(' + this.index + ').polygonEventHandler("' + index + '", event);'));
    polygon.events.add("contextmenu", new Function('event', 'zenPage.getComponent(' + this.index + ').polygonEventHandler("' + index + '", event);'));
    polygon.events.add("mouseenter", new Function('event', 'zenPage.getComponent(' + this.index + ').polygonEventHandler("' + index + '", event);'));
    polygon.events.add("mouseleave", new Function('event', 'zenPage.getComponent(' + this.index + ').polygonEventHandler("' + index + '", event);'));
    
    return polygon;
]]></Implementation>
</Method>

<Method name="getPolygon">
<Description>
Get polygon from array by index</Description>
<Internal>1</Internal>
<FormalSpec>index</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    return this._polygons ? this._polygons[index] : null;
]]></Implementation>
</Method>

<Method name="polygonEventHandler">
<Description>
Handler for polygon events by type </Description>
<Internal>1</Internal>
<FormalSpec>index,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var polygon = this.getPolygon(index);
    if (!polygon) return;

    switch(event.get('type')){
        case 'click':
            zenInvokeCallbackMethod(this.onclickpolygon, this, 'onclickpolygon', 'polygon', polygon, 'position', event.get('coords'));
            break;  
        case 'contextmenu':
            zenInvokeCallbackMethod(this.oncontextmenupolygon, this, 'oncontextmenupolygon', 'polygon', polygon, 'position', event.get('coords'));
            break;
        case 'mouseenter':{
                if (polygon.clickable){ 
                    polygon.options.set({fillOpacity: (this.polygonHoverOpacity ? this.polygonHoverOpacity : 0.35)});       
                }
                break;
            }
            break;
        case 'mouseleave':{
                if (polygon.clickable){         
                    polygon.options.set({fillOpacity: polygon.defaultFO});      
                }
                break;
            }
            break;
    }
]]></Implementation>
</Method>

<Method name="syncPolygons">
<Description>
Internal method: sync polygons to data from controller.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    this.clearPolygons();   
    
    var map = this.getMapObject();
    var controller = this.getController();
    
    if (!map || !controller || !this._polygonData || this._polygonData.length == 0) 
        return;
    
    try {
        // Min and max value from all polygons data for calculate color 
        var minValue = 0, maxValue = 0;
        
        if (!this.polygonColorProperty){
            minValue = parseFloat(this._polygonData[0].data['Value']); 
            if (isNaN(minValue)) 
                minValue = 0;
            
            maxValue = minValue;
            
            for (var n = 1; n < this._polygonData.length; n++){
                var nValue = parseFloat(this._polygonData[n].data['Value']);
                if (isNaN(nValue)) nValue = 0;
                
                if (minValue > nValue)
                    minValue = nValue;
                else if (maxValue < nValue)
                    maxValue = nValue;
            }
        
            // Load and set borders data for slider range
            if (!this.polygonColorProperty){
                var sliderData = this.getSliderData();
                
                var bordersData = this.LoadBordersData(this._polygonData[0].data.ParameterId, this._polygonData[0].data.Level, sliderData.getGuid())
                sliderData.setParameterId(this._polygonData[0].data.ParameterId);
                sliderData.setLevel(this._polygonData[0].data.Level);
                sliderData.setMin(minValue);
                sliderData.setMax(maxValue);
                sliderData.setValues(bordersData.minValue, bordersData.maxValue);
                sliderData.setUnitName(bordersData.unitName);
                sliderData.isChanged = false;       
                    
                minValue = sliderData.getValues()[0];
                maxValue = sliderData.getValues()[1];
            }
        }
        
        
        for (var n = 0; n < this._polygonData.length; n++){
            var md = this._polygonData[n];
            if (md){    
                if (!this.polygonColorProperty){
                    md.color = this.getPolygonColor(minValue, maxValue, md.data['Value']);
                }
                    
                var poly = this.addPolygon(n, md.coords, md.color, md.fo, md.isClickable, md.title, md.data);
                
                if (poly){ 
                    map.geoObjects.add(poly);
                    zenInvokeCallbackMethod(this.onaddpolygon, this, 'onaddpolygon', 'polygon', poly);
                }   
            }
        }
    }
    catch(ex) {
        alert('Error in syncPolygons ' + ex.message);
    }
]]></Implementation>
</Method>

<Method name="clearPolygons">
<Description>
Internal method: clear polygons from map.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    try {
        // kill old polygons
        var map = this.getMapObject();
        if (this._polygons) {
            for (var n = 0; n < this._polygons.length; n++) {
                map.geoObjects.remove(this._polygons[n]);
            }
        }
        this._polygons = [];
    }
    catch(ex) {
        alert('Error in clearPolygons ' + ex.message);
    }
]]></Implementation>
</Method>

<Method name="getPolygonColor">
<Description>
Calculate color for polygon</Description>
<FormalSpec>min,max,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (!value || !min || !max) return 'rgb(255,255,255)';
    
    // Left color - red, right color - green. In the middle - yellow color
    var middle = (max + min) / 2;
    
    if (value <= middle){
        var redPart = (value - min) / (middle - min);
        return "rgb(" + Math.round(255 * redPart) + ",255, 0)";
    }
    else{
        var greenPart = (max - value) / (max - middle);
        return "rgb(255," + Math.round(255 * greenPart) + ", 0)";
    }
]]></Implementation>
</Method>

<Method name="getSliderData">
<Description>
Get slider data object. Object stores information about borders.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (this._sliderData) return this._sliderData;
    
    this._sliderData = {
                        setParameterId: function(id){
                            this._parameterId = id;
                        },
                        getParameterId: function(){
                            return this._parameterId;
                        },
                        setGuid: function(guid){
                            this._guid = guid;
                        },
                        getGuid: function(){
                            return this._guid;
                        },
                        setLevel: function(lvl){
                            this._level = lvl;
                        },
                        getLevel: function(){
                            return this._level;
                        },
                        setUnitName: function(name){
                            this._unitName = name ? name : '';
                        },
                        getUnitName: function(){
                            return this._unitName;
                        },
                        setMin: function(value){
                            this._min = Math.floor(value ? parseInt(value) : 0);
                        },
                        getMin: function(){
                            return this._min;
                        },
                        setMax: function(value){
                            this._max = Math.ceil(value ? parseInt(value) : 1000);
                        },
                        getMax: function(){
                            return this._max;
                        },
                        setValues: function(min, max){
                            this.isChanged = true;
                            
                            min = Math.floor(min ? parseInt(min) : 0);
                            min = (min == 0 && this.getMin()) ? this.getMin(): min;
                            
                            max = Math.ceil(max ? parseInt(max) : 0);
                            max = (max == 0 && this.getMax()) ? this.getMax(): max;
                            
                            this._values = [min, max];
                        },
                        getValues: function(){
                            return this._values;
                        },
                        getStep: function(){
                            var step = 1;
                            var range = this.getMax() - this.getMin();

                            if (range >= 1e8) step = 100000;
                            else if (range >= 1e7) step = 10000;
                            else if (range >= 1e6) step = 1000;
                            else if (range >= 1e5) step = 100;
                            else if (range >= 1e4) step = 10;
                            this.step = step
                            var modulo = range % step;
        
                            // Если диапазон не кратен шагу, то распределяем остаток по "бокам" - поровну. 
                            // Если слева уходим в минус, то остаток прибавлем к правой границе.
                            if (modulo != 0){
                                var halfModulo = (step - modulo) / 2;
            
                                if (this.getMin() < Math.floor(halfModulo)){
                                    this.setMax(this.getMax() + Math.ceil(halfModulo) + Math.floor(halfModulo) - this.getMin());
                                    this.setMin(0);
                                }
                                else{
                                    this.setMin(this.getMin() - Math.floor(halfModulo));
                                    this.setMax(this.getMax() + Math.ceil(halfModulo));
                                }
                            }

                            return step;
                        }
                     };
                     
    return this._sliderData;
]]></Implementation>
</Method>

<Method name="openSlider">
<Description>
Open slider dialog</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    /* FOR-SLIDER
    $("#btnOpenSlider").hide();
    $("#btnCloseSlider").show();
    $("#divSliderRangesPart").show();

    // Init slider
    var portlet = this;
    var sliderData = this.getSliderData();
    
    var step = sliderData.getStep();
    var unitName = sliderData.getUnitName();
    var minValue = sliderData.getMin();
    var maxValue = sliderData.getMax();
    var values = sliderData.getValues(); 

    $("#slider-range").slider({
        range: true,
        step: step,
        min: minValue,
        max: maxValue,
        values: values,
        slide: function(event, ui){
            // Change current borders and color of polygons
            var sliderData = portlet.getSliderData();
            sliderData.setValues(ui.values[0], ui.values[1]);
            
            for(var n=0; n < portlet._polygons.length; n++){
                var poly = portlet._polygons[n];
                var color = portlet.getPolygonColor(ui.values[0], ui.values[1], poly.data['Value']);
                poly.options.set("fillColor", color);
                poly.options.set("strokeColor", color);
            }
            
            $("#inputSliderValues" ).val(ui.values[0] + " - " + ui.values[1] + " " + unitName);
        }
    });

    $("#inputSliderMinValue").val(minValue + " " + unitName);
    $("#inputSliderMaxValue").val(maxValue + " " + unitName);
    $("#inputSliderValues").val(values[0] + " - " + values[1] + " " + unitName);
    */
]]></Implementation>
</Method>

<Method name="closeSlider">
<Description>
Close slider dialog, save borders</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    /* FOR-SLIDER
    $("#btnOpenSlider").show();
    $("#btnCloseSlider").hide();
    $("#divSliderRangesPart").hide();
    
    var sliderData = this.getSliderData();
    
    // Save changes
    if (sliderData.isChanged){
        
        var res = this.SaveBorders(sliderData.getParameterId(), sliderData.getLevel(), sliderData.getGuid(), sliderData.getValues()[0], sliderData.getValues()[1]);
        console.log('borders saved');
        if (res != 1){ 
            alert('Ошибка! Диапазон не сохранен.'+ '\n' + res);
            return;
        }
        
        sliderData.isChanged = false;
    }
    */
]]></Implementation>
</Method>

<Method name="SaveBorders">
<Description>
Save borders for current level, parameter and parent region</Description>
<FormalSpec>paramId:%String,level:%Integer,regionId:%String,min:%Integer,max:%Integer</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    /* FOR-SLIDER
    set data = ##class(%ZEN.proxyObject).%New()
    set data.parameterId = paramId
    set data.level = level
    set data.parentRegionId = regionId
    set data.minValue = min
    set data.maxValue = max
    
    quit $CLASSMETHOD($P(..polygonSaveBordersMethod,";",1),$P(..polygonSaveBordersMethod,";",2), data)
    */
]]></Implementation>
</Method>

<Method name="LoadBordersData">
<Description>
Get the minimum and maximum value, and unit name ("min;max;y.e")</Description>
<FormalSpec>paramId:%String,level:%Integer,regionId:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    /* FOR-SLIDER
    set bordersData = ""
    
    try{
        set data = ##class(%ZEN.proxyObject).%New()
        set data.parameterId = paramId
        set data.level = level
        set data.parentRegionId = regionId
    
        set bordersData = $CLASSMETHOD($P(..polygonLoadBordersMethod,";",1),$P(..polygonLoadBordersMethod,";",2), data)
    }
    catch(ex){
        set bordersData = ##class(%ZEN.proxyObject).%New()
        set bordersData.minValue = 0
        set bordersData.maxValue = 0
        set bordersData.unitName = "-"
    }
    
    quit bordersData*/
]]></Implementation>
</Method>

<Method name="drillDown">
<Description>

COMMON Methods ------------------------------------------------------------------------------------------

Perform a drilldown</Description>
<Internal>1</Internal>
<FormalSpec>title,latLng,zoom,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var map = this.getMapObject();
    if (!map) return;
    
    this._prevZoom.push(map.getZoom());
    this._prevCenter.push(map.getCenter());
    
    map.setZoom(parseInt(zoom));
    map.setCenter(latLng);
    
    this._drillDownTitle.push(title);
    this.setDrillDownTitle(title);
    
    zenInvokeCallbackMethod(this.ondrilldown, this, 'ondrilldown', 'data', data);
]]></Implementation>
</Method>

<Method name="setDrillDownTitle">
<Description>
Set title to drillUp-button </Description>
<Internal>1</Internal>
<FormalSpec>title</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var du = document.getElementById(this.id + '_drillUpActionComponent')
    du.innerHTML = '';
    
    if (!title) return;
    
    var divBtn = document.createElement('div');
    var portlet = this;
    divBtn.onclick = function(){portlet.drillUp()};
    divBtn.appendChild(document.createTextNode('<<  ' + 'Назад'));
    divBtn.className = 'btnYandex';
    divBtn.style.display = 'initial';
    divBtn.style.borderRadius = '2px 0 0 2px';
    divBtn.style.cursor = 'pointer';
    
    var divTitle = document.createElement('div');
    divTitle.appendChild(document.createTextNode(title));
    divTitle.className = 'btnYandex';
    divTitle.style.display = 'initial';
    divTitle.style.borderRadius = '0 2px 2px 0';
    divTitle.style.background = 'none';
    
    if (navigator.userAgent.indexOf("MSIE")>=0){
        divTitle.style.backgroundColor = 'white';
        divBtn.style.display = 'inline';
        divTitle.style.display = 'inline';
    }
    else{
        divTitle.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
    }
    
    du.appendChild(divBtn);
    du.appendChild(divTitle);
]]></Implementation>
</Method>

<Method name="drillUp">
<Description>
Restores map parameters (center, zoom and "drilldown title") to their state before drilldown was performed</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var map = this.getMapObject();
    if (!map) return;
    
    if (this._drillDownTitle.length > 0){
        this._drillDownTitle.pop();
        this.setDrillDownTitle(this._drillDownTitle[this._drillDownTitle.length - 1]);
    }
    
    if (this._prevZoom.length > 0){
        map.setZoom(this._prevZoom[this._prevZoom.length - 1]);
        this._prevZoom.pop();
    }
        
    if (this._prevCenter.length > 0){
        map.setCenter(this._prevCenter[this._prevCenter.length - 1]);
        this._prevCenter.pop();
    }
    
    zenInvokeCallbackMethod(this.ondrillup, this, 'ondrillup');
]]></Implementation>
</Method>

<Method name="beatNumber">
<Description><![CDATA[
Beat any number on three-digit numbers (123131413.45 => 123 131 413.45)]]></Description>
<FormalSpec>num</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (num == undefined) return '';
    
    return num.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
]]></Implementation>
</Method>

<Method name="GetAdditionInformationForObjectById">
<Description>
Get proxy object with addition information for object by id</Description>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    set data = ""
    
    try{
        set data = $CLASSMETHOD($P(..getAdditionInfoForObjectById,";",1),$P(..getAdditionInfoForObjectById,";",2), id)
    }
    catch(ex){
        set data = ##class(%ZEN.proxyObject).%New()
    }
    
    quit data
]]></Implementation>
</Method>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

.clusterItemLink {
    font-size: 12px;
    font-family: arial;
    color: rgb(42, 42, 42);
    text-decoration: none;
    border-bottom: 1px dashed rgb(42, 42, 42);
}

.clusterItemLink:hover{
    color: black;
    border-bottom: 1px dashed black;
}


.clusterList{
    padding-left: 20px;
    font-family: Arial;
    font-size: 12px;
}

/* Custom slider CSS */
#divSlider{
    width: 500px;
}

#btnOpenSlider{
    display: inline;
}

#btnCloseSlider{
    display: none;
}

#btnOpenSlider, #btnCloseSlider, .btnYandex{
border: 1px solid rgb(139, 139, 139);
color: #333;
background-color: rgb(255, 255, 255);
box-shadow: 0 1px 0 rgba(0,0,0,.1);
white-space: nowrap;
font-family: Arial, sans-serif;
font-size: 13px;
padding: 1px 8px;
visibility: visible;

background: #fff;
background: -webkit-linear-gradient(top,#fff 0,#eee 100%);
background: -moz-linear-gradient(top,#fff 0,#eee 100%);
background: -o-linear-gradient(top,#fff 0,#eee 100%);
background: linear-gradient(to bottom,#fff 0,#eee 100%);
border-radius: 2px;

padding: 5px;
margin: 0px;

}

#divSliderButtonsPart{
    display: inline;
    width: 100%;
    float: right;
    text-align: right;
}

#divSliderRangesPart{
    display: none;
    background-color: white;
    box-shadow: rgb(127, 127, 127) 2px 2px 7px;
    border: 1px solid gray;
    padding: 5px 20px 10px 20px;
    border-radius: 2px;
    float: left;
    margin-left: 10px;
}

#slider-range{
    margin-top: 8px;
}

#slider-range:hover, .ui-slider-handle:hover, #btnOpenSlider:hover, #btnCloseSlider:hover{
    cursor: pointer;
}

#inputSliderMinValue, #inputSliderMaxValue, #inputSliderValues{
    border: none;
    padding: 0;
    margin: 0;
    width: 33%;
    color: #333;
    font-family: Arial, sans-serif;
    font-size: 13px;
}

#inputSliderMinValue{
    text-align: left;
}

#inputSliderMaxValue{
    text-align: right;
    margin-left: -4px;
}

#inputSliderValues{
    text-align: center;
    margin-left: -4px;
}





/* Standart slider CSS */
.ui-slider {
    position: relative;
    text-align: left;
}

.ui-slider .ui-slider-handle {
    position: absolute;
    z-index: 2;
    width: 1.2em;
    height: 1.2em;
    cursor: default;
}

.ui-slider .ui-slider-range {
    position: absolute;
    z-index: 1;
    font-size: .7em;
    display: block;
    border: 0;
    background-position: 0 0;
}

/* For IE8 - See #6727 */
.ui-slider.ui-state-disabled .ui-slider-handle,
.ui-slider.ui-state-disabled .ui-slider-range {
    filter: inherit;
}

.ui-slider-horizontal {
    height: .8em;
}

.ui-slider-horizontal .ui-slider-handle {
    top: -.3em;
    margin-left: -.6em;
}

.ui-slider-horizontal .ui-slider-range {
    top: 0;
    height: 100%;
}

.ui-slider-horizontal .ui-slider-range-min {
    left: 0;
}

.ui-slider-horizontal .ui-slider-range-max {
    right: 0;
}

.ui-widget {
    font-family: Verdana,Arial,sans-serif;
    font-size: 1.1em;
}

.ui-widget .ui-widget {
    font-size: 1em;
}

.ui-widget input,
.ui-widget select,
.ui-widget textarea,
.ui-widget button {
    font-family: Verdana,Arial,sans-serif;
    font-size: 1em;
}

.ui-widget-content {
    border: 1px solid #aaaaaa;
    background: #ffffff 50% 50% repeat-x;
    color: #222222;
}

.ui-widget-content a {
    color: #222222;
}

.ui-widget-header {
    border: 1px solid #aaaaaa;
    background-color: #cccccc;
    color: #222222;
    font-weight: bold;
}

.ui-widget-header a {
    color: #222222;
}

.ui-state-default,
.ui-widget-content .ui-state-default,
.ui-widget-header .ui-state-default {
    border: 1px solid #d3d3d3;
    background: #e6e6e6 50% 50% repeat-x;
    font-weight: normal;
    color: #555555;
}

.ui-state-default a,
.ui-state-default a:link,
.ui-state-default a:visited {
    color: #555555;
    text-decoration: none;
}
.ui-state-hover,
.ui-widget-content .ui-state-hover,
.ui-widget-header .ui-state-hover,
.ui-state-focus,
.ui-widget-content .ui-state-focus,
.ui-widget-header .ui-state-focus {
    border: 1px solid #999999;
    background: #dadada 50% 50% repeat-x;
    font-weight: normal;
    color: #212121;
}

.ui-state-hover a,.ui-state-hover a:hover,.ui-state-hover a:link,.ui-state-hover a:visited {
    color: #212121;
    text-decoration: none;
}

.ui-state-active,.ui-widget-content .ui-state-active,.ui-widget-header .ui-state-active {
    border: 1px solid #aaaaaa;
    background: #ffffff 50% 50% repeat-x;
    font-weight: normal;
    color: #212121;
}

.ui-state-active a,.ui-state-active a:link,.ui-state-active a:visited {
    color: #212121;
    text-decoration: none;
}

.ui-state-highlight,.ui-widget-content .ui-state-highlight,.ui-widget-header .ui-state-highlight {
    border: 1px solid #fcefa1;
    background: #fbf9ee 50% 50% repeat-x;
    color: #363636;
}

.ui-state-highlight a,.ui-widget-content .ui-state-highlight a,.ui-widget-header .ui-state-highlight a {
    color: #363636;
}

.ui-state-error,.ui-widget-content .ui-state-error,.ui-widget-header .ui-state-error {
    border: 1px solid #cd0a0a;
    background: #fef1ec 50% 50% repeat-x;
    color: #cd0a0a;
}

.ui-state-error a,.ui-widget-content .ui-state-error a,.ui-widget-header .ui-state-error a {
    color: #cd0a0a;
}

.ui-state-error-text,.ui-widget-content .ui-state-error-text,.ui-widget-header .ui-state-error-text {
    color: #cd0a0a;
}

.ui-priority-primary,.ui-widget-content .ui-priority-primary,.ui-widget-header .ui-priority-primary {
    font-weight: bold;
}

.ui-priority-secondary,.ui-widget-content .ui-priority-secondary,.ui-widget-header .ui-priority-secondary {
    opacity: .7;
    filter:Alpha(Opacity=70);
    font-weight: normal;
}

.ui-state-disabled,.ui-widget-content .ui-state-disabled,.ui-widget-header .ui-state-disabled {
    opacity: .35;
    filter:Alpha(Opacity=35);
    background-image: none;
}

.ui-state-disabled .ui-icon {
    filter:Alpha(Opacity=35); /* For IE8 - See #6059 */
}

/* Corner radius */
.ui-corner-all,.ui-corner-top,.ui-corner-left,.ui-corner-tl {
    border-top-left-radius: 4px;
}

.ui-corner-all,.ui-corner-top,.ui-corner-right,.ui-corner-tr {
    border-top-right-radius: 4px;
}

.ui-corner-all,.ui-corner-bottom,.ui-corner-left,.ui-corner-bl {
    border-bottom-left-radius: 4px;
}

.ui-corner-all,.ui-corner-bottom,.ui-corner-right,.ui-corner-br {
    border-bottom-right-radius: 4px;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="Stc.Google.API">
<Description>
Base class for Google API access</Description>
<Abstract>1</Abstract>
<IncludeCode>%callout,%occStatus,%occOptions</IncludeCode>
<TimeCreated>63145,69487.892963</TimeCreated>

<Method name="Call">
<Description><![CDATA[
Calls API at pUrl (without www.googleapis.com), with method pType, 
auth token pToken and request body - JSON of PObjInput.<br>
Work with Google JSON API, not GData.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String,pToken:%String,pSslConfig:%String,PObjInput:%ZEN.proxyObject="",*PResponse:%ZEN.proxyObject,timeout:%Integer=30</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set sc = $$$OK
 try 
 {
  set req = ##class(%Net.HttpRequest).%New()
  set req.SSLConfiguration = ##class(Stc.Data.Settings).GetGoogleSSLConfig()
  set req.Server = "www.googleapis.com"
  set req.Https = 1
  set req.Port = 443
  set req.ProxyHTTPS = 1
  /*
  set req.ProxyServer = $g(^Settings("Stc","Google", "ProxyServer"))
  set req.ProxyPort=$g(^Settings("Stc","Google", "ProxyPort"))
  set req.ProxyTunnel=$g(^Settings("Stc","Google", "ProxyTunnel"))
  */
  
  set req.Authorization="Bearer "_pToken
  set req.Timeout = timeout
  
  if PObjInput'="" {
  	set req.ContentType="application/json"
   
   	set tIO = $IO
   	set tMnemSpace = ##class(%Library.Device).GetMnemonicRoutine()
   	try{
	  $$$TOE(sc,##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONStreamFromObject(req.EntityBody, PObjInput))
	  use tIO::("^"_tMnemSpace)
   }
   catch ex {
	  use tIO::("^"_tMnemSpace)
	  throw ex
   }
 
  }
 
  $$$TOE(sc,req.Send($zconvert(pMethod,"u"),pUrl))
  
  set json=req.HttpResponse.Data.Read()
 
  $$$TOE(sc,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.PResponse))
 }
 catch ex
 {
  set sc = ex.AsStatus()
 }
 quit sc
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Google.Authorize.Fail">
<Super>%CSP.Page</Super>
<TimeCreated>63150,55388.703754</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html>
<head><title>Fail..</title>
</head>
<body>>
	w "Error is """_$Get(%request.Data("error",1))_"""",!
	&html<</body>
</html>>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Google.Authorize.Win">
<Super>%CSP.Page</Super>
<TimeCreated>63150,55301.482577</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html>
<head><title>Win!</title>
</head>
<body>>
	s rtoken = $Get(%request.Data("refresh_token",1))
	s atoken = $Get(%request.Data("access_token",1))
	d ##class(Stc.Data.Settings).SetGoogleRefreshToken(rtoken)

	w "Refresh token is """_rtoken_"""",!
	w "<br>"
	w "Access token is """_atoken_"""",!
	w "<br><br>"
	d ##class(Stc.Google.Authorize).ExchangeToken(rtoken, .status, .atoken)
	w "Status is """_status_"""",!
	w "<br>"
	w "Another access token is """_atoken_"""",!
	&html<</body>
</html>>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Google.Authorize">
<Super>%CSP.Page</Super>
<TimeCreated>63150,76166.869516</TimeCreated>

<Parameter name="ClientId">
<Default>987216819052.apps.googleusercontent.com</Default>
</Parameter>

<Parameter name="ClientSecret">
<Default>03MDei0TZgQK0E1S1bQ9o2jE</Default>
</Parameter>

<Parameter name="FailRedirect">
<Default>Stc.Google.Authorize.Fail.cls</Default>
</Parameter>

<Parameter name="WinRedirect">
<Default>Stc.Google.Authorize.Win.cls</Default>
</Parameter>

<Parameter name="RedirectUri">
<Default>http://somesite.com:57772/csp/training/Stc.Google.Authorize.cls</Default>
</Parameter>

<Method name="GetLoginUrl">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	s url = "https://accounts.google.com/o/oauth2/auth"
	s url = url_"?response_type=code"
	s url = url_"&client_id="_$$$URLENCODE(..#ClientId)
	s url = url_"&redirect_uri="_$$$URLENCODE(..#RedirectUri)
	s url = url_"&scope="_$$$URLENCODE("https://www.googleapis.com/auth/calendar")
	s url = url_"&state=code"
	s url = url_"&access_type=offline"
	s url = url_"&approval_prompt=force"
	q url
]]></Implementation>
</Method>

<Method name="ParseCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>*status:%String,*code:%String,*state:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	s status = $Get(%request.Data("error",1),"success")
	s code = $Get(%request.Data("code",1))
	s state = $Get(%request.Data("state",1))
]]></Implementation>
</Method>

<Method name="ExchangeCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,*status:%String,*rtoken:%String,*atoken:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	s q = ##class(%Net.HttpRequest).%New()
	s q.SSLConfiguration = ##class(Stc.Data.Settings).GetGoogleSSLConfig()
	s q.Server = "accounts.google.com"
	s q.Https = 1
	s q.Port = 443
	s q.ProxyHTTPS=1
	/*
	s q.ProxyServer=$g(^Settings("Stc","Google", "ProxyServer"))
	s q.ProxyPort=$g(^Settings("Stc","Google", "ProxyPort"))
	s q.ProxyTunnel=$g(^Settings("Stc","Google", "ProxyTunnel"))
	*/
	d q.InsertFormData("code", code)
	d q.InsertFormData("client_id", ..#ClientId)
	d q.InsertFormData("client_secret", ..#ClientSecret)
	d q.InsertFormData("redirect_uri", ..#RedirectUri)
	d q.InsertFormData("grant_type","authorization_code")
	s sc = q.Post("/o/oauth2/token")
	if ('sc){
		s status = $System.Status.GetErrorText(sc)
		q
	}
	
	if q.HttpResponse.StatusCode '= 200 {
		s status = q.HttpResponse.StatusLine
		q
	}
	
	s json = q.HttpResponse.Data.Read()
	d ##class(%ZEN.Auxiliary.jsonProvider).%ParseJSON(json,,.obj)
	s atoken = obj."access_token"
	s rtoken = obj."refresh_token"
	s status = "success"
]]></Implementation>
</Method>

<Method name="ExchangeToken">
<ClassMethod>1</ClassMethod>
<FormalSpec>rtoken:%String,*status:%String,*atoken:%String</FormalSpec>
<Implementation><![CDATA[
	s q = ##class(%Net.HttpRequest).%New()
	s q.SSLConfiguration = ##class(Stc.Data.Settings).GetGoogleSSLConfig()
	s q.Server = "accounts.google.com"
	s q.Https = 1
	s q.Port = 443
	s q.ProxyHTTPS = 1
	/*
	s q.ProxyServer=$g(^Settings("Stc","Google", "ProxyServer"))
	s q.ProxyPort=$g(^Settings("Stc","Google", "ProxyPort"))
	s q.ProxyTunnel=$g(^Settings("Stc","Google", "ProxyTunnel"))
	*/
	d q.InsertFormData("refresh_token", rtoken)
	d q.InsertFormData("client_id", ..#ClientId)
	d q.InsertFormData("client_secret", ..#ClientSecret)
	d q.InsertFormData("grant_type", "refresh_token")
	s sc = q.Post("/o/oauth2/token")
	
	if ('sc){
		s status = $System.Status.GetErrorText(sc)
		q
	}
	
	if q.HttpResponse.StatusCode '= 200 {
		s status = q.HttpResponse.StatusLine
		q
	}
	
	s json = q.HttpResponse.Data.Read()
	d ##class(%ZEN.Auxiliary.jsonProvider).%ParseJSON(json,,.obj)
	s atoken = obj."access_token"
	s status = "success"
]]></Implementation>
</Method>

<Method name="GetWinRedirect">
<ClassMethod>1</ClassMethod>
<FormalSpec>rtoken:%String,atoken:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q ..#WinRedirect_"?refresh_token="_$$$URLENCODE(rtoken)_"&access_token="_$$$URLENCODE(atoken)
]]></Implementation>
</Method>

<Method name="GetFailRedirect">
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q ..#FailRedirect_"?error="_$$$URLENCODE(status)
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	s state = $Get(%request.Data("state",1))
	i state = ""
	{
		s url = ..GetLoginUrl()
	}
	elseif state = "code"
	{
		d ..ParseCode(.st, .code, .state)
		if st '= "success"
		{
			s url = ..GetFailRedirect(st)
		}
		else
		{
			d ..ExchangeCode(code, .st, .rtoken, .atoken)
			if st '= "success"
			{
				s url = ..GetFailRedirect(st)
			}
			else
			{
				s url = ..GetWinRedirect(rtoken, atoken)
			}
		}
	}
	
	s %response.Redirect = url
	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Google.Calendar">
<Abstract>1</Abstract>
<IncludeCode>%occStatus</IncludeCode>
<TimeCreated>63145,80659.367405</TimeCreated>

<Method name="CreateEvent">
<Description>
Create event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCalendarId:%String,pEventObject:%ZEN.proxyObject,pToken:%String,pSslConfig:%String,*pEventId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	if (pCalendarId = "")
 	{
  		q $$$OK
 	}
 	
 	set sc = $$$OK
 	
 	try
 	{
  		$$$TOE(sc,##class(Stc.Google.API).Call("/calendar/v3/calendars/"_pCalendarId_"/events","POST",pToken,pSslConfig,pEventObject,.response))
  		if (response.id="")
  		{
   			$$$ThrowStatus($$$ERROR(5001,"Event from Google has no 'id' field on creation, error is "_response.error.message))
  		}
  		
  		set pEventId = response.id
 	}
 	catch ex
 	{
  		set sc = ex.AsStatus()
 	}
 	
 	quit sc
]]></Implementation>
</Method>

<Method name="ModifyEvent">
<Description>
Refresh event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCalendarId:%String,pEventId:%String,pEventObject:%ZEN.proxyObject,pToken:%String,pSslConfig:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	set sc = $$$OK
 	try
 	{
  		$$$TOE(sc,##class(Stc.Google.API).Call("/calendar/v3/calendars/"_pCalendarId_"/events/"_pEventId,"PATCH",pToken,pSslConfig,pEventObject,.response))
  		if (response.id="")
  		{
   			$$$ThrowStatus($$$ERROR(5001,"Event from Google has no 'id' field on modifying"))
  		}
  		set pEventId = response.id
 	}
 	catch ex
 	{
  		set sc = ex.AsStatus()
 	}
 
 	quit sc
]]></Implementation>
</Method>

<Method name="GetEvent">
<Description>
Get event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCalendarId:%String,pEventId:%String,*pEventObj:%ZEN.proxyObject,pToken:%String,pSslConfig:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	set sc = $$$OK
 	
 	try
 	{
  		$$$TOE(sc,##class(Stc.Google.API).Call("/calendar/v3/calendars/"_pCalendarId_"/events/"_pEventId,"GET",pToken,pSslConfig,,.response))
  		if (response.id="")
  		{
   			$$$ThrowStatus($$$ERROR(5001,"Event from Google has no 'id' field on modifying"))
  		}
  	
  		set pEventId = response.id 
  		set pEventObj = response
 	}
 	catch ex
 	{
  		set sc = ex.AsStatus()
 	}
 	
 	quit sc
]]></Implementation>
</Method>

<Method name="DeleteEvent">
<Description>
Delete event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCalendarId:%String,pEventId:%String,pToken:%String,pSslConfig:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	set sc = $$$OK
 	
 	try
 	{
  		$$$TOE(sc,##class(Stc.Google.API).Call("/calendar/v3/calendars/"_pCalendarId_"/events/"_pEventId,"DELETE",pToken,pSslConfig,,.response,1))

 	}
 	catch ex
 	{
  		set sc = ex.AsStatus()
 	}
 	
 	quit sc
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.Email">
<Description>
Working with email</Description>
<TimeCreated>63098,81612.618657</TimeCreated>

<Method name="GetMailMessageWithTrainingData">
<ClassMethod>1</ClassMethod>
<FormalSpec>patternMsg:%Text,tr:Stc.Data.Training</FormalSpec>
<ReturnType>%Text</ReturnType>
<Implementation><![CDATA[
    set patternMsg = $REPLACE(patternMsg, "%DateStart", ##class(Stc.Utils.Utils).GetLocalizeTextFromDate(tr.DateStart))
    set patternMsg = $REPLACE(patternMsg, "%DateEnd", ##class(Stc.Utils.Utils).GetLocalizeTextFromDate(tr.DateFinish))
    set patternMsg = $REPLACE(patternMsg, "%TimeStart", $e(##class(%Library.Time).LogicalToDisplay(tr.TimeStart), 1, 5))
    set patternMsg = $REPLACE(patternMsg, "%TimeEnd", $e(##class(%Library.Time).LogicalToDisplay(tr.TimeFinish), 1, 5))
    set patternMsg = $REPLACE(patternMsg, "%Course.Name", tr.Course.Name.Value)
    set patternMsg = $REPLACE(patternMsg, "%Course.Description", tr.Course.Description.Value)
    set patternMsg = $REPLACE(patternMsg, "%City.Name", tr.City.Name.Value)
    set patternMsg = $REPLACE(patternMsg, "%Region.Name", tr.City.ParentRegion.Name.Value)
    set patternMsg = $REPLACE(patternMsg, "%Country.Name", tr.City.ParentRegion.ParentRegion.Name.Value)
    set patternMsg = $REPLACE(patternMsg, "%Street", tr.Street.Value)
    set patternMsg = $REPLACE(patternMsg, "%Room", tr.Room)
    set patternMsg = $REPLACE(patternMsg, "%Trainer.FullName", tr.Teacher.FullName)
    set patternMsg = $REPLACE(patternMsg, "%Trainer.Email", tr.Teacher.Email)
    set patternMsg = $REPLACE(patternMsg, "%Trainer.Phone", $SELECT(tr.Teacher.Phone="":"-", tr.Teacher.Phone'="":tr.Teacher.Phone))
    set patternMsg = $REPLACE(patternMsg, "%Curator.FullName", $SELECT(tr.CuratorFullName.Value="":"-", tr.CuratorFullName.Value'="":tr.CuratorFullName.Value))
    set patternMsg = $REPLACE(patternMsg, "%Curator.Email", $SELECT(tr.CuratorEmail="":"-", tr.CuratorEmail'="":tr.CuratorEmail))
    set patternMsg = $REPLACE(patternMsg, "%Curator.PhoneSecret", $SELECT(tr.CuratorPhoneSecret="":"-", tr.CuratorPhoneSecret'="":tr.CuratorPhoneSecret))
    set patternMsg = $REPLACE(patternMsg, "%Curator.PhonePublic", $SELECT(tr.CuratorPhone="":"-", tr.CuratorPhone'="":tr.CuratorPhone))
    set patternMsg = $REPLACE(patternMsg, "%OtherInfo", tr.OtherInfo.Value)
    set patternMsg = $REPLACE(patternMsg, "%DeliveryAddressOfCertificates", tr.DeliveryAddressOfCertificates)
    
    if ($FIND(patternMsg, "%ListOfCertificates") '= 0){
        set certData = ""
        
        set trId = tr.%Id()
        
        &sql(DECLARE CertCur CURSOR FOR 
             SELECT Number, Student->FullName
             FROM Stc_Data.Certificate
             WHERE Training = :trId
             ORDER BY Number) 
        
        &sql(OPEN CertCur)
        for  
        {   
            &sql(FETCH CertCur INTO :number, :fullName) 
            quit:(SQLCODE '= 0)
            
            set certData = certData_number_" "_fullName_"<br>"
        }
        &sql(CLOSE CertCur)
        
        set patternMsg = $REPLACE(patternMsg, "%ListOfCertificates", certData)
    }
    
    quit patternMsg
]]></Implementation>
</Method>

<Method name="GetMailForTrainingStudents">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("students")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingOrders">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("orders")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%JoinUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/order")
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingTeacher">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("teacher")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%ListOfAttendeesUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingTeacherSetAttendeeStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("teacherSetAttendeeStatus")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%ListOfAttendeesUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingCurator">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("curator")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%ListOfAttendeesUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/students/"_tr.AccessCode)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingFeedBack">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("feedback")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%SurveyUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/feedback/"_$p(tr.AccessCode,"-",1)_"-"_$p(tr.AccessCode,"-",5)) 
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForListOfTrainingFeedBacks">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("listOfFeedbacks")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    set mail.message = $REPLACE(mail.message, "%ListOfSurveysUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_tr.%Id()_"/feedbacks/"_tr.GetAccessCodeForFeedbackList()) 
    
    set nowTime = $ZDT($ZTS, 3)
    set trId = tr.%Id()
    
    set timeOut = ##class(Stc.Data.Settings).GetMailingHoursTimeoutListOfFeedbacks()
    
    &sql(SELECT COUNT(ID) INTO :numberOfNewestFeedBacks
         FROM Stc_Data.Feedback 
         WHERE Training = :trId AND {fn TIMESTAMPDIFF(SQL_TSI_HOUR, CreatedTS, :nowTime)} <= :timeOut)

    set mail.subject = $REPLACE(mail.subject, "%NumberOfNewestSurveys", numberOfNewestFeedBacks)
    set mail.message = $REPLACE(mail.message, "%NumberOfNewestSurveys", numberOfNewestFeedBacks)  
    
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForTrainingRegistration">
<ClassMethod>1</ClassMethod>
<FormalSpec>tr:Stc.Data.Training</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("registration")
    set mail.subject = ..GetMailMessageWithTrainingData(mail.subject, tr)
    set mail.message = ..GetMailMessageWithTrainingData(mail.message, tr)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForOrderApply">
<ClassMethod>1</ClassMethod>
<FormalSpec>ord:Stc.Data.Order</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("orderapply")
    set mail.message = $REPLACE(mail.message, "%Course.Name", ord.Course.Name.Value)
    quit mail
]]></Implementation>
</Method>

<Method name="GetMailForConfirmationSubscription">
<ClassMethod>1</ClassMethod>
<FormalSpec>mItem:Stc.Data.MailingItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set mail = ..GetEmailPattern("confirmsubscription")
    set mail.message = $REPLACE(mail.message, "%ActivationUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/mailing/subscription/confirmation/"_$system.Encryption.Base64Encode(mItem.AccessCode))
    quit mail
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    if (type = "students") || (type = "reminder"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Students")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Students")
    }
    elseif (type = "teacher"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Teacher")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Teacher")
    }
    elseif (type = "curator"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Curator")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Curator")
    }
    elseif (type = "feedback"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-FeedBack")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-FeedBack")
    }
    elseif (type = "orders"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Orders")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Orders")
    }
    elseif (type = "registration"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-Registration")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-Registration")
    }
    elseif (type = "mailinggroups"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Mailing-Groups")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Mailing-Groups")
    }
    elseif (type = "mailingsubscriber"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Mailing-Subscriber")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Mailing-Subscriber")
    }
    elseif (type = "orderapply"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Order-Apply")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Order-Apply")
    }
    elseif (type = "confirmsubscription"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Confirmation-Subscription")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Confirmation-Subscription")
    }
    elseif (type = "listOfFeedbacks"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-ListOfFeedBacks")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-ListOfFeedBacks")
    }
    elseif (type = "teacherSetAttendeeStatus"){
        set proxy.subject = ##class(Stc.Utils.Msg).GetMsg("mail_Subject_Training-TeacherSetAttendeeStatus")
        set proxy.message = ##class(Stc.Utils.Msg).GetMsg("mail_Message_Training-TeacherSetAttendeeStatus")
    }
    quit proxy
]]></Implementation>
</Method>

<Method name="SetMailPattern">
<Description>
Get email pattern from ^CacheMsg</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,subject:%String,message:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    if (type = "students") || (type = "reminder"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Students", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Students", message)
    }
    elseif (type = "teacher"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Teacher", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Teacher", message)
    }
    elseif (type = "curator"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Curator", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Curator", message)
    }
    elseif (type = "feedback"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-FeedBack", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-FeedBack", message)
    }
    elseif (type = "orders"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Orders", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Orders", message)
    }
    elseif (type = "registration"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-Registration", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-Registration", message)
    }
    elseif (type = "mailinggroups"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Mailing-Groups", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Mailing-Groups", message)
    }
    elseif (type = "mailingsubscriber"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Mailing-Subscriber", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Mailing-Subscriber", message)
    }
    elseif (type = "orderapply"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Order-Apply", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Order-Apply", message)
    }
    elseif (type = "confirmsubscription"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Confirmation-Subscription", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Confirmation-Subscription", message)
    }
    elseif (type = "listOfFeedbacks"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-ListOfFeedBacks", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-ListOfFeedBacks", message)
    }
    elseif (type = "teacherSetAttendeeStatus"){
        do ##class(Stc.Utils.Msg).SetMsg("mail_Subject_Training-TeacherSetAttendeeStatus", subject)
        do ##class(Stc.Utils.Msg).SetMsg("mail_Message_Training-TeacherSetAttendeeStatus", message)
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Send">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,subject:%String,msg:%String,recipientName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
 
    // Чтобы при тестах не заспамить народ
    if ($NAMESPACE = "STCUNION") quit $$$OK
    
    try
    {
        set mail=##class(%Net.MailMessage).%New()
        set mail.From = ##class(Stc.Data.Settings).GetEmailFrom()
        set mail.Subject = subject
        set mail.Charset = "utf-8"
        set mail.IsHTML = 1
        set mail.ContentType = "text/html"
        do mail.TextData.Write(msg)
        
        do mail.To.Insert(email)
        
        set auth=##class(%Net.Authenticator).%New()
        set auth.MechanismList = "LOGIN"
        set auth.UserName = ##class(Stc.Data.Settings).GetEmailSMTPUser()
        set auth.Password = ##class(Stc.Data.Settings).GetEmailSMTPPassword()
    
        set smtp = ##class(%Net.SMTP).%New()
        set smtp.smtpserver = ##class(Stc.Data.Settings).GetEmailSMTPServer()
        set smtp.port = ##class(Stc.Data.Settings).GetEmailSMTPPort()
        set smtp.authenticator = auth
    
        $$$THROWONERROR(st, smtp.Send(mail))
    }
    catch (ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.Init.BaseInit">
<TimeCreated>63143,84424.482465</TimeCreated>

<Method name="Init">
<Description>
do ##class(Stc.Utils.Init.BaseInit).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..KillThemAll()

	do ##class(Stc.Utils.Init.LTextLanguage).Import()
 	do ##class(Stc.Utils.Init.Currency).Import()
 	do ##class(Stc.Utils.Init.Course).Import()
 	do ##class(Stc.Utils.Init.OrderStatus).Import()
 	do ##class(Stc.Utils.Init.Region).Import()
 	do ##class(Stc.Utils.Init.Company).Import()
 	//do ##class(Stc.Utils.Init.Person).Import()
 	do ##class(Stc.Utils.Msg).Init()
 	do ##class(Stc.Data.Localization.Translation).Init()
 	do ..Settings()
]]></Implementation>
</Method>

<Method name="KillThemAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do $CLASSMETHOD("Stc.Data.Currency", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Certificate", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Company", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Course", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Order", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.OrderNewStudent", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.OrderStatus", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Person", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Region", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.SubGroup", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Training", "%KillExtent")
	
	do $CLASSMETHOD("Stc.Data.Localization.LTextValue", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Localization.LTextLanguage", "%KillExtent")
	do $CLASSMETHOD("Stc.Data.Localization.LText", "%KillExtent")
]]></Implementation>
</Method>

<Method name="ImportXData">
<ClassMethod>1</ClassMethod>
<FormalSpec>locationXData:%String,className:%String,xDataName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK

	if $$$ISERR(sc)
	{
		write !, $System.Status.DisplayError(sc)
		quit sc
	}

	#dim stream As %Stream.Object = ##class(%Dictionary.CompiledXData).%OpenId(locationXData_"||"_xDataName).Data
	#dim reader As %XML.Reader = ##class(%XML.Reader).%New()

	set sc = reader.OpenStream(stream, "literal")
	if $$$ISERR(sc) {
		write !, $System.Status.DisplayError(sc)
		quit sc
	}

	do reader.Correlate($piece(className, ".", *), className)

	set itemsCount = 0

	while reader.Next(.obj, .sc)
	{
		if $$$ISERR(sc)
		{
			write !, $System.Status.DisplayError(sc)
			quit
		}
		
		set sc = obj.%Save()
		
		if $$$ISERR(sc)
		{
			write !, $System.Status.DisplayError(sc)
			quit 
		}
		
		set obj = ""
		set itemsCount = itemsCount + 1
	}
	
	write !,itemsCount_" objects of class "_className_" were imported."
]]></Implementation>
</Method>

<Method name="Settings">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Namespace of CSP-application
	set ^Settings("Stc", "WebApp") = "/csp/third"
	// Name of private CSP-application (BrokerAdmin)
	set ^Settings("Stc", "WebAppAdmin") = "/stcapp/admin"
	// Name of public CSP-application (BrokerUser)
	set ^Settings("Stc", "WebAppUser") = "/stcapp/user"
	// Google Calendar url
	set ^Settings("Stc", "GoogleCalendarSrc") = "https://www.google.com/calendar/embed?showTitle=0&showNav=0&showDate=0&showPrint=0&showTabs=0&showCalendars=0&showTz=0&mode=AGENDA&height=300&wkst=1&bgcolor=%23FFFFFF&src=Nmszdm4yazVza3ZnZnF2N3IwbTJtMzY4b3NAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&color=%23B1365F&"
	//set ^Settings("Stc", "GoogleCalendarSrc") = "https://www.google.com/calendar/embed?title=%D0%9A%D0%B0%D0%BB%D0%B5%D0%BD%D0%B4%D0%B0%D1%80%D1%8C+%D0%B1%D0%BB%D0%B8%D0%B6%D0%B0%D0%B9%D1%88%D0%B8%D1%85+%D0%BA%D1%83%D1%80%D1%81%D0%BE%D0%B2&showNav=0&showDate=0&showPrint=0&showTabs=0&showCalendars=0&showTz=0&mode=AGENDA&height=300&wkst=1&bgcolor=%23FFFFFF&src=Nmszdm4yazVza3ZnZnF2N3IwbTJtMzY4b3NAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&color=%23B1365F&"

	// Settings for email
	set ^Settings("Stc","EmailFrom") = "stc_testmail@mail.ru"
	set ^Settings("Stc","EmailSMTPUSER") = "stc_testmail@mail.ru"
	set ^Settings("Stc","EmailSMTPPASSWORD") = "simplepassword"
	set ^Settings("Stc","EmailSMTPSERVER") = "smtp.mail.ru"
	set ^Settings("Stc","EmailSMTPPORT") = 25
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.Init.Company">
<Super>BaseInit</Super>
<TimeCreated>63145,79644.758318</TimeCreated>

<Parameter name="PClassName">
<Default>Company</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	
	set company = ##class(Stc.Data.Company).%New()
	set company.FullName = ##class(Stc.Data.Localization.LText).Create("ООО Главная компания")
	set company.ShortName = ##class(Stc.Data.Localization.LText).Create("Главная компания")
	set company.LegalAddress = ##class(Stc.Data.Localization.LText).Create("Город М.")
	set company.MailAddress = ##class(Stc.Data.Localization.LText).Create("000000 Город М.")
	set company.OtherInfo = ##class(Stc.Data.Localization.LText).Create("---")
	w !, $CASE($$$ISERR(company.%Save()), 1: "Ошибка! Организация не создана!",:"Организация создана")
	
	set contact = ##class(Stc.Data.Person).%New()
	set contact.LastName = ##class(Stc.Data.Localization.LText).Create("Петров", "Stc.Data.Localization.Translation;PersonLTextValue")
	set contact.FirstName = ##class(Stc.Data.Localization.LText).Create("Петр", "Stc.Data.Localization.Translation;PersonLTextValue")
	set contact.MiddleName = ##class(Stc.Data.Localization.LText).Create("Петрович", "Stc.Data.Localization.Translation;PersonLTextValue")
	set contact.Email = "petorv@maincompany.com"
	set contact.Phone = "000"
	set contact.Company = company
	set company.Contact = contact
	w !, $CASE($$$ISERR(contact.%Save()) || $$$ISERR(company.%Save()), 1: "Ошибка! Контакт компании не создан!",:"Контакт компании создан")
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportTypesXData">
<Description>
do ##class(Stc.Utils.Init.Company).ImportTypesXData()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Stc.Data.CompanyType).%KillExtent()
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data."_..#PClassName_"Type", "ClassXData")
	
	&sql(DECLARE StudCur CURSOR FOR 
		 SELECT ID FROM Stc_Data.Company)	
		
		&sql(OPEN StudCur)
		for  
		{	
			&sql(FETCH StudCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			set comp = ##class(Stc.Data.Company).%OpenId(id)
			if (comp.IsUniversity = 1){
				set comp.Type = ##class(Stc.Data.CompanyType).CodeIdxOpen("univer")
			}
			else{
				set comp.Type = ##class(Stc.Data.CompanyType).CodeIdxOpen("partner")
			}
			
			do comp.%Save()		
		}
		
	&sql(CLOSE StudCur)
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<CompanyType><Name>CF9E764F-0F6C-4361-BC14-A695775399AB00</Name><Code>Partner</Code></CompanyType>
<CompanyType><Name>F2596D98-0E31-4ED7-8D07-6C82E48D457699</Name><Code>Univer</Code></CompanyType>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>CF9E764F-0F6C-4361-BC14-A695775399AB00</Guid></LText>
<LText><Guid>F2596D98-0E31-4ED7-8D07-6C82E48D457699</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>CF9E764F-0F6C-4361-BC14-A695775399AB00</LText><Value>Партнер</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F2596D98-0E31-4ED7-8D07-6C82E48D457699</LText><Value>Университет</Value><Lang>ru</Lang></LTextValue>

<LTextValue><LText>CF9E764F-0F6C-4361-BC14-A695775399AB00</LText><Value>Partner</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F2596D98-0E31-4ED7-8D07-6C82E48D457699</LText><Value>University</Value><Lang>en</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Stc.Utils.Init.Course">
<Super>BaseInit</Super>
<TimeCreated>63143,85810.973847</TimeCreated>

<Parameter name="PClassName">
<Default>Course</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<Course><Name>8DB0DA1D-CEA2-4AF1-A76D-4D43B3E85D8C</Name><Hours>2</Hours><Days>2</Days><IsInUse>1</IsInUse><ProgramUrl>www.google.com</ProgramUrl><Currency>1</Currency><Price>4000</Price></Course>
<Course><Name>8755EEEA-7CD3-4A38-AFB5-4C2B3BACB5A2</Name><Hours>3</Hours><Days>3</Days><IsInUse>1</IsInUse><ProgramUrl>www.ya.ru</ProgramUrl><Currency>1</Currency><Price>300</Price></Course>
<Course><Name>DA1F3202-AF35-48C2-9607-3037ACCE95FE</Name><Hours>4</Hours><Days>4</Days><IsInUse>1</IsInUse><ProgramUrl>www.mail.ru</ProgramUrl><Currency>1</Currency><Price>200</Price></Course>
<Course><Name>C8557895-60FE-4DF8-9121-30ED714E88FE</Name><Hours>5</Hours><Days>3</Days><IsInUse>0</IsInUse><ProgramUrl>www.sql.ru</ProgramUrl><Currency>1</Currency><Price>100</Price></Course>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>8DB0DA1D-CEA2-4AF1-A76D-4D43B3E85D8C</Guid></LText>
<LText><Guid>8755EEEA-7CD3-4A38-AFB5-4C2B3BACB5A2</Guid></LText>
<LText><Guid>DA1F3202-AF35-48C2-9607-3037ACCE95FE</Guid></LText>
<LText><Guid>C8557895-60FE-4DF8-9121-30ED714E88FE</Guid></LText>
</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>8DB0DA1D-CEA2-4AF1-A76D-4D43B3E85D8C</LText><Value>Администрирование СУБД Caché</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8755EEEA-7CD3-4A38-AFB5-4C2B3BACB5A2</LText><Value>Основы InterSystems DeepSee</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>DA1F3202-AF35-48C2-9607-3037ACCE95FE</LText><Value>Основы InterSystems Ensemble</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C8557895-60FE-4DF8-9121-30ED714E88FE</LText><Value>Основы InterSystems HealthShare</Value><Lang>ru</Lang></LTextValue>

<LTextValue><LText>8DB0DA1D-CEA2-4AF1-A76D-4D43B3E85D8C</LText><Value>Caché Database Administration</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>8755EEEA-7CD3-4A38-AFB5-4C2B3BACB5A2</LText><Value>Fundamentals of InterSystems DeepSee</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>DA1F3202-AF35-48C2-9607-3037ACCE95FE</LText><Value>Fundamentals of InterSystems Ensemble</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C8557895-60FE-4DF8-9121-30ED714E88FE</LText><Value>Fundamentals of InterSystems HealthShare</Value><Lang>en</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Utils.Init.CourseD</DataLocation>
<DefaultData>CourseDefaultData</DefaultData>
<IdLocation>^Stc.Utils.Init.CourseD</IdLocation>
<IndexLocation>^Stc.Utils.Init.CourseI</IndexLocation>
<StreamLocation>^Stc.Utils.Init.CourseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CourseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Utils.Init.Currency">
<Super>BaseInit</Super>
<TimeCreated>63143,83746.776136</TimeCreated>

<Parameter name="PClassName">
<Default>Currency</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<Currency><Name>5EB81A33-5310-470D-AE3A-3DABFCF02F3A</Name></Currency>
<Currency><Name>4E490C1D-8402-4148-A876-85078EEF3ADB</Name></Currency>
<Currency><Name>3E40D011-A34B-4281-996F-F0ED36E18C75</Name></Currency>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>5EB81A33-5310-470D-AE3A-3DABFCF02F3A</Guid></LText>
<LText><Guid>4E490C1D-8402-4148-A876-85078EEF3ADB</Guid></LText>
<LText><Guid>3E40D011-A34B-4281-996F-F0ED36E18C75</Guid></LText>
</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>5EB81A33-5310-470D-AE3A-3DABFCF02F3A</LText><Value>Рубли</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>4E490C1D-8402-4148-A876-85078EEF3ADB</LText><Value>Доллары</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3E40D011-A34B-4281-996F-F0ED36E18C75</LText><Value>Евро</Value><Lang>ru</Lang></LTextValue>

<LTextValue><LText>5EB81A33-5310-470D-AE3A-3DABFCF02F3A</LText><Value>Ruble</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>4E490C1D-8402-4148-A876-85078EEF3ADB</LText><Value>Dollars</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>3E40D011-A34B-4281-996F-F0ED36E18C75</LText><Value>Euro</Value><Lang>en</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Stc.Utils.Init.FeedBackItemType">
<Abstract>1</Abstract>
<TimeCreated>63745,59720.889467</TimeCreated>

<Method name="Init">
<Description>
d ##class(Stc.Utils.Init.FeedBackItemType).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set obj = ##class(Stc.Data.FeedBackItemGroup).%New()
        set obj.Name = "Курс"
        set obj.Code = "Instructor Nonspecific"
        $$$THROWONERROR(st, obj.%Save())
        
        set obj = ##class(Stc.Data.FeedBackItemGroup).%New()
        set obj.Name = "Преподаватель"
        set obj.Code = "Instructor"
        $$$THROWONERROR(st, obj.%Save())
    

        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Оценка курса"
        set obj.IsRequired = 1
        set obj.IsActive = 1
        set obj.IsScaleType = 1
        set obj.SeqNumber = 1
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor Nonspecific")
        $$$THROWONERROR(st, obj.%Save())
        
        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Оценка преподавателя"
        set obj.IsRequired = 1
        set obj.IsActive = 1
        set obj.IsScaleType = 1
        set obj.SeqNumber = 2
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor")
        $$$THROWONERROR(st, obj.%Save())
            
        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Что понравилось?"
        set obj.IsRequired = 0
        set obj.IsActive = 1
        set obj.IsScaleType = 0
        set obj.SeqNumber = 3
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor Nonspecific")
        $$$THROWONERROR(st, obj.%Save())
        
        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Что можно улучшить?"
        set obj.IsRequired = 0
        set obj.IsActive = 1
        set obj.IsScaleType = 0
        set obj.SeqNumber = 4
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor Nonspecific")
        $$$THROWONERROR(st, obj.%Save())
        
        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Что ещё хотелось бы услышать в курсе?"
        set obj.IsRequired = 0
        set obj.IsActive = 1
        set obj.IsScaleType = 0
        set obj.SeqNumber = 5
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor Nonspecific")
        $$$THROWONERROR(st, obj.%Save())
        
        set obj = ##class(Stc.Data.FeedBackItemType).%New()
        set obj.Name = "Комментарии о докладчике?"
        set obj.IsRequired = 0
        set obj.IsActive = 1
        set obj.IsScaleType = 0
        set obj.SeqNumber = 6
        set obj.GroupType = ##class(Stc.Data.FeedBackItemGroup).CodeIndexOpen("Instructor")
        $$$THROWONERROR(st, obj.%Save())
        
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w !,$SYSTEM.Status.GetErrorText(st)
    }
    
    q st
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.Init.LTextLanguage">
<Super>BaseInit</Super>
<TimeCreated>63144,8337.614555</TimeCreated>

<Parameter name="PClassName">
<Default>LTextLanguage</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<LTextLanguage><Name>Русский</Name><Code>ru</Code></LTextLanguage>
<LTextLanguage><Name>English</Name><Code>en</Code></LTextLanguage>
</ClassXData>
]]></Data>
</XData>
</Class>


<Class name="Stc.Utils.Init.OrderStatus">
<Super>BaseInit</Super>
<TimeCreated>63144,2225.298447</TimeCreated>

<Parameter name="PClassName">
<Default>OrderStatus</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<OrderStatus><Name>B1AA4BFB-DD06-4AE0-8FF3-530B4E7BF84D</Name><Code>New</Code></OrderStatus>
<OrderStatus><Name>2B5FD80B-FBE7-415D-8D61-4B5FF46A9132</Name><Code>Approved</Code></OrderStatus>
<OrderStatus><Name>7552526F-6AB0-4EC9-88BE-21D9F65D94FD</Name><Code>Completed</Code></OrderStatus>
<OrderStatus><Name>499C4168-3705-45D7-8B20-26AF9B9EAA63</Name><Code>Closed</Code></OrderStatus>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>B1AA4BFB-DD06-4AE0-8FF3-530B4E7BF84D</Guid></LText>
<LText><Guid>2B5FD80B-FBE7-415D-8D61-4B5FF46A9132</Guid></LText>
<LText><Guid>7552526F-6AB0-4EC9-88BE-21D9F65D94FD</Guid></LText>
<LText><Guid>499C4168-3705-45D7-8B20-26AF9B9EAA63</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>B1AA4BFB-DD06-4AE0-8FF3-530B4E7BF84D</LText><Value>Новая</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2B5FD80B-FBE7-415D-8D61-4B5FF46A9132</LText><Value>Одобрена</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>7552526F-6AB0-4EC9-88BE-21D9F65D94FD</LText><Value>Заполнена</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>499C4168-3705-45D7-8B20-26AF9B9EAA63</LText><Value>Закрыта</Value><Lang>ru</Lang></LTextValue>

<LTextValue><LText>B1AA4BFB-DD06-4AE0-8FF3-530B4E7BF84D</LText><Value>New</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2B5FD80B-FBE7-415D-8D61-4B5FF46A9132</LText><Value>Approved</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>7552526F-6AB0-4EC9-88BE-21D9F65D94FD</LText><Value>Completed</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>499C4168-3705-45D7-8B20-26AF9B9EAA63</LText><Value>Closed</Value><Lang>en</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Stc.Utils.Init.Person">
<Super>BaseInit</Super>
<TimeCreated>63145,82299.894583</TimeCreated>

<Parameter name="PClassName">
<Default>Person</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Stc.Utils.Init."_..#PClassName, "Stc.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<Person><LastName>8BCD565C-8229-4755-BF5C-02CCA442A4C3</LastName><FirstName>B4414D27-F838-42DE-931A-62944BC6B9CB</FirstName><MiddleName>D3B1B4AE-02F3-4CEB-A9B1-09CECF995858</MiddleName><Company>1</Company><Phone>89234293456</Phone><Email>zero@gmail.com</Email><Skype></Skype></Person>
<Person><LastName>D66BE296-8004-4A34-A7DD-81AA148F7F34</LastName><FirstName>A18CA216-A0FA-4084-955A-0FB7F17287ED</FirstName><MiddleName>F7927827-EE26-4D12-AD79-4B3903E508E6</MiddleName><Company>1</Company><Phone>89234293742</Phone><Email>one@gmail.com</Email><Skype></Skype></Person>
<Person><LastName>21DB7AEB-DC09-4EA9-85DA-C63C76FFBE67</LastName><FirstName>71B01121-CEB3-4CF2-A985-61B3A39741FE</FirstName><MiddleName>CC49CBEE-6CAA-4327-B458-A9458A24982F</MiddleName><Company>1</Company><Phone>89234294742</Phone><Email>two@gmail.com</Email><Skype>rereg</Skype></Person>
<Person><LastName>3CBFA966-57DE-430E-BCBF-F24C10E46AFD</LastName><FirstName>13A22049-3D57-4EE3-8118-CB964928A978</FirstName><MiddleName>05ECBC40-BCB4-4773-8431-EF8692224BA7</MiddleName><Company>1</Company><Phone>89234296742</Phone><Email>three@gmail.com</Email><Skype>erghre</Skype></Person>
<Person><LastName>B4FDEEDF-8098-4B78-964D-7AA44957306E</LastName><FirstName>0ADE3181-423C-48C1-934F-A850D1B626FC</FirstName><MiddleName>62E8BCF8-7756-4AED-A8C4-A7409DE0E5CE</MiddleName><Company>1</Company><Phone>89234298742</Phone><Email>four@gmail.com</Email><Skype>gege</Skype></Person>
<Person><LastName>23E33AC4-D4D8-4362-A5E4-FF39F1F55A0A</LastName><FirstName>D024210C-92E7-4BF5-A06F-A63EDC04304A</FirstName><MiddleName>226F163C-1623-469F-8879-997C974A30AC</MiddleName><Company>1</Company><Phone>89234291742</Phone><Email>five@gmail.com</Email><Skype></Skype></Person>
<Person><LastName>543F047C-145D-4472-ADD2-5CC47A85A0BE</LastName><FirstName>2CD15069-6002-4750-B855-13A80A245A32</FirstName><MiddleName>D25118BA-6943-4D06-AC83-A9EBAA4DAA16</MiddleName><Company>1</Company><Phone>89234297742</Phone><Email>six@gmail.com</Email><Skype>greeg</Skype></Person>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>8BCD565C-8229-4755-BF5C-02CCA442A4C3</Guid></LText>
<LText><Guid>B4414D27-F838-42DE-931A-62944BC6B9CB</Guid></LText>
<LText><Guid>D3B1B4AE-02F3-4CEB-A9B1-09CECF995858</Guid></LText>

<LText><Guid>D66BE296-8004-4A34-A7DD-81AA148F7F34</Guid></LText>
<LText><Guid>A18CA216-A0FA-4084-955A-0FB7F17287ED</Guid></LText>
<LText><Guid>F7927827-EE26-4D12-AD79-4B3903E508E6</Guid></LText>

<LText><Guid>21DB7AEB-DC09-4EA9-85DA-C63C76FFBE67</Guid></LText>
<LText><Guid>71B01121-CEB3-4CF2-A985-61B3A39741FE</Guid></LText>
<LText><Guid>CC49CBEE-6CAA-4327-B458-A9458A24982F</Guid></LText>

<LText><Guid>3CBFA966-57DE-430E-BCBF-F24C10E46AFD</Guid></LText>
<LText><Guid>13A22049-3D57-4EE3-8118-CB964928A978</Guid></LText>
<LText><Guid>05ECBC40-BCB4-4773-8431-EF8692224BA7</Guid></LText>

<LText><Guid>B4FDEEDF-8098-4B78-964D-7AA44957306E</Guid></LText>
<LText><Guid>0ADE3181-423C-48C1-934F-A850D1B626FC</Guid></LText>
<LText><Guid>62E8BCF8-7756-4AED-A8C4-A7409DE0E5CE</Guid></LText>

<LText><Guid>23E33AC4-D4D8-4362-A5E4-FF39F1F55A0A</Guid></LText>
<LText><Guid>D024210C-92E7-4BF5-A06F-A63EDC04304A</Guid></LText>
<LText><Guid>226F163C-1623-469F-8879-997C974A30AC</Guid></LText>

<LText><Guid>543F047C-145D-4472-ADD2-5CC47A85A0BE</Guid></LText>
<LText><Guid>2CD15069-6002-4750-B855-13A80A245A32</Guid></LText>
<LText><Guid>D25118BA-6943-4D06-AC83-A9EBAA4DAA16</Guid></LText>

</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>8BCD565C-8229-4755-BF5C-02CCA442A4C3</LText><Value>Васильев</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8BCD565C-8229-4755-BF5C-02CCA442A4C3</LText><Value>Vasiliev</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>B4414D27-F838-42DE-931A-62944BC6B9CB</LText><Value>Иван</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B4414D27-F838-42DE-931A-62944BC6B9CB</LText><Value>Ivan</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D3B1B4AE-02F3-4CEB-A9B1-09CECF995858</LText><Value>Петрович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D3B1B4AE-02F3-4CEB-A9B1-09CECF995858</LText><Value>Pertovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>D66BE296-8004-4A34-A7DD-81AA148F7F34</LText><Value>Морозов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D66BE296-8004-4A34-A7DD-81AA148F7F34</LText><Value>Morozov</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>A18CA216-A0FA-4084-955A-0FB7F17287ED</LText><Value>Павел</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A18CA216-A0FA-4084-955A-0FB7F17287ED</LText><Value>Pavel</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F7927827-EE26-4D12-AD79-4B3903E508E6</LText><Value>Александрович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F7927827-EE26-4D12-AD79-4B3903E508E6</LText><Value>Alexandrovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>21DB7AEB-DC09-4EA9-85DA-C63C76FFBE67</LText><Value>Шунков</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>21DB7AEB-DC09-4EA9-85DA-C63C76FFBE67</LText><Value>Shunkov</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>71B01121-CEB3-4CF2-A985-61B3A39741FE</LText><Value>Артем</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>71B01121-CEB3-4CF2-A985-61B3A39741FE</LText><Value>Artem</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CC49CBEE-6CAA-4327-B458-A9458A24982F</LText><Value>Викторович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CC49CBEE-6CAA-4327-B458-A9458A24982F</LText><Value>Victorovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>3CBFA966-57DE-430E-BCBF-F24C10E46AFD</LText><Value>Варов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3CBFA966-57DE-430E-BCBF-F24C10E46AFD</LText><Value>Varov</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>13A22049-3D57-4EE3-8118-CB964928A978</LText><Value>Вадим</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>13A22049-3D57-4EE3-8118-CB964928A978</LText><Value>Vadim</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>05ECBC40-BCB4-4773-8431-EF8692224BA7</LText><Value>Петрович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>05ECBC40-BCB4-4773-8431-EF8692224BA7</LText><Value>Petrovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>B4FDEEDF-8098-4B78-964D-7AA44957306E</LText><Value>Арбузов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B4FDEEDF-8098-4B78-964D-7AA44957306E</LText><Value>Arbuzov</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>0ADE3181-423C-48C1-934F-A850D1B626FC</LText><Value>Михаил</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>0ADE3181-423C-48C1-934F-A850D1B626FC</LText><Value>Michael</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>62E8BCF8-7756-4AED-A8C4-A7409DE0E5CE</LText><Value>Антонович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>62E8BCF8-7756-4AED-A8C4-A7409DE0E5CE</LText><Value>Antonovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>23E33AC4-D4D8-4362-A5E4-FF39F1F55A0A</LText><Value>Картошкин</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>23E33AC4-D4D8-4362-A5E4-FF39F1F55A0A</LText><Value>Kartoshkin</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D024210C-92E7-4BF5-A06F-A63EDC04304A</LText><Value>Илья</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D024210C-92E7-4BF5-A06F-A63EDC04304A</LText><Value>Ilya</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>226F163C-1623-469F-8879-997C974A30AC</LText><Value>Владимирович</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>226F163C-1623-469F-8879-997C974A30AC</LText><Value>Vladimirovich</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>543F047C-145D-4472-ADD2-5CC47A85A0BE</LText><Value>Мышкин</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>543F047C-145D-4472-ADD2-5CC47A85A0BE</LText><Value>Mishkin</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2CD15069-6002-4750-B855-13A80A245A32</LText><Value>Олег</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2CD15069-6002-4750-B855-13A80A245A32</LText><Value>Oleg</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D25118BA-6943-4D06-AC83-A9EBAA4DAA16</LText><Value>Сергеевич</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D25118BA-6943-4D06-AC83-A9EBAA4DAA16</LText><Value>Sergeevich</Value><Lang>en</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Stc.Utils.Init.Region">
<Description>
Данные были удалены из этого класса для экономии размера исходников</Description>
<Super>BaseInit</Super>
<TimeCreated>63143,86298.000493</TimeCreated>
</Class>


<Class name="Stc.Utils.Log">
<Super>%Persistent</Super>
<TimeCreated>63263,48739.253206</TimeCreated>

<Property name="CreatedTS">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Location">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="Msg">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String,msg:%Text</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		set log = ..%New()
		set log.CreatedTS = $ZDT($ZTS,3)
		set log.Location = location
		set log.Msg = msg
		do log.%Save()
	}
	catch(ex){
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<ImplementationWideBase64>CQBzAGUAdAAgAHAAcgBvAHgAeQAgAD0AIAAjACMAYwBsAGEAcwBzACgAJQBaAEUATgAuAHAAcgBv
AHgAeQBPAGIAagBlAGMAdAApAC4AJQBOAGUAdwAoACkACgAJAAoACQBzAGUAdAAgAHAAcgBvAHgA
eQAuAGwAbwBjAGEAdABpAG8AbgAgAD0AIAAuAC4ATABvAGMAYQB0AGkAbwBuAAoACQBzAGUAdAAg
AHAAcgBvAHgAeQAuAG0AcwBnACAAPQAgACQAUgBFAFAATABBAEMARQAoACQAUgBFAFAATABBAEMA
RQAoACQAUgBFAFAATABBAEMARQAoAC4ALgBNAHMAZwAsACAAIgAwACAAGQQBAAQABAAJBBMAGiAB
ACIALAAgACIAIQAiACkALAAgACIAAQABAAEAAQABAAEAAQA6AAEAIgAsACAAIgAhACIAKQAsACAA
IgAvACIALAAgACIAIQAiACkACgAJAHMAZQB0ACAAcAByAG8AeAB5AC4AYwByAGUAYQB0AGUAZABU
AFMAIAA9ACAALgAuAEMAcgBlAGEAdABlAGQAVABTAAkACgAJAAoACQBxAHUAaQB0ACAAcAByAG8A
eAB5AA==
</ImplementationWideBase64></Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set a = 1/0
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	do $system.OBJ.DisplayError(st)
	
	quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Utils.LogD</DataLocation>
<DefaultData>LogDefaultData</DefaultData>
<IdLocation>^Stc.Utils.LogD</IdLocation>
<IndexLocation>^Stc.Utils.LogI</IndexLocation>
<StreamLocation>^Stc.Utils.LogS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LogDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedTS</Value>
</Value>
<Value name="3">
<Value>Location</Value>
</Value>
<Value name="4">
<Value>Msg</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Utils.Msg">
<TimeCreated>63147,18153.813301</TimeCreated>

<Parameter name="DOMAIN">
<Default>Stc</Default>
</Parameter>

<Method name="GetErrorStatus">
<Description>
Get error status by key</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>errorKey:%String,additionalMsg:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $system.Status.Error(5001, ..GetMsg(errorKey)_" "_additionalMsg)
]]></Implementation>
</Method>

<Method name="GetMsg">
<Description>
Get localized error message</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^CacheMsg("Stc", $$$SessionLanguage, key), "- "_key_" -")
]]></Implementation>
</Method>

<Method name="SetMsg">
<Description>
Set localized </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key,value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s ^CacheMsg("Stc", $$$SessionLanguage, key) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Init">
<Description>
Write all messages into global do ##class(Stc.Utils.Msg).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^CacheMsg("Stc", "ru", "yearShort") = "г."
    set ^CacheMsg("Stc", "en", "yearShort") = "y."
    
    set ^CacheMsg("Stc", "ru", "Month#1") = "января"
    set ^CacheMsg("Stc", "en", "Month#1") = "January"
    
    set ^CacheMsg("Stc", "ru", "Month#2") = "февраля"
    set ^CacheMsg("Stc", "en", "Month#2") = "February"
    
    set ^CacheMsg("Stc", "ru", "Month#3") = "марта"
    set ^CacheMsg("Stc", "en", "Month#3") = "March"
    
    set ^CacheMsg("Stc", "ru", "Month#4") = "апреля"
    set ^CacheMsg("Stc", "en", "Month#4") = "April"
    
    set ^CacheMsg("Stc", "ru", "Month#5") = "мая"
    set ^CacheMsg("Stc", "en", "Month#5") = "May"
    
    set ^CacheMsg("Stc", "ru", "Month#6") = "июня"
    set ^CacheMsg("Stc", "en", "Month#6") = "June"
    
    set ^CacheMsg("Stc", "ru", "Month#7") = "июля"
    set ^CacheMsg("Stc", "en", "Month#7") = "July"
    
    set ^CacheMsg("Stc", "ru", "Month#8") = "августа"
    set ^CacheMsg("Stc", "en", "Month#8") = "August"
    
    set ^CacheMsg("Stc", "ru", "Month#9") = "сентября"
    set ^CacheMsg("Stc", "en", "Month#9") = "September"
    
    set ^CacheMsg("Stc", "ru", "Month#10") = "октября"
    set ^CacheMsg("Stc", "en", "Month#10") = "October"
    
    set ^CacheMsg("Stc", "ru", "Month#11") = "ноября"
    set ^CacheMsg("Stc", "en", "Month#11") = "November"
    
    set ^CacheMsg("Stc", "ru", "Month#12") = "декабря"
    set ^CacheMsg("Stc", "en", "Month#12") = "December"
    
    
    
    set ^CacheMsg("Stc", "ru", "STCSummaryOfTheDay") = "STC. Краткая сводка за день."
    set ^CacheMsg("Stc", "en", "STCSummaryOfTheDay") = "STC. Summary of the day."

    set ^CacheMsg("Stc", "ru", "STCSummaryOfThePeriod") = "STC. Краткая сводка за период."
    set ^CacheMsg("Stc", "en", "STCSummaryOfThePeriod") = "STC. Summary for the period."

    set ^CacheMsg("Stc", "ru", "Minute") = "мин."
    set ^CacheMsg("Stc", "en", "Minute") = "min."

    set ^CacheMsg("Stc", "ru", "FromOrganization") = "От организации %Company.ShortName на курс %Course.Name"
    set ^CacheMsg("Stc", "en", "FromOrganization") = "From %Company.ShortName organization on course %Course.Name"

    set ^CacheMsg("Stc", "ru", "FromStudent") = "От слушателя %Student.FullName на курс %Course.Name в городе %City.Name"
    set ^CacheMsg("Stc", "en", "FromStudent") = "From %Student.FullName attendee on course %Course.Name in %City.Name"

    set ^CacheMsg("Stc", "ru", "StudentsRemainder") = "Слушатели, напоминание"
    set ^CacheMsg("Stc", "en", "StudentsRemainder") = "Reminder for attendees"

    set ^CacheMsg("Stc", "ru", "TeacherAccessToStudentsList") = "Преподаватель, доступ к списку слушателей"
    set ^CacheMsg("Stc", "en", "TeacherAccessToStudentsList") = "Teacher. Access to the list of attendees"
    
    set ^CacheMsg("Stc", "ru", "TeacherAccessToStudentsListForSetStatus") = "Преподаватель, доступ к списку слушателей (посещаемость)"
    set ^CacheMsg("Stc", "en", "TeacherAccessToStudentsListForSetStatus") = "Teacher. Access to the list of attendees (attendance)"
    
    set ^CacheMsg("Stc", "ru", "CuratorAccessToStudentList") = "Куратор, список слушателей"
    set ^CacheMsg("Stc", "en", "CuratorAccessToStudentList") = "Curator. Access to the list of attendees"
    
    set ^CacheMsg("Stc", "ru", "StudentAccessToFeedBack") = "Слушатель, доступ к анкете"
    set ^CacheMsg("Stc", "en", "StudentAccessToFeedBack") = "Attendee. Access to the survey"
    
    set ^CacheMsg("Stc", "ru", "ContactFromOrder") = "Контакт из заявки"
    set ^CacheMsg("Stc", "en", "ContactFromOrder") = "Contact from request"
    
    set ^CacheMsg("Stc", "ru", "TeacherAccessToNewesFeedBacks") = "Преподаватель, доступ к новым отзывам"
    set ^CacheMsg("Stc", "en", "TeacherAccessToNewesFeedBacks") = ""
    
    set ^CacheMsg("Stc", "ru", "NotificationAttendeesFromCity") = "Оповещение слушателей города - "
    set ^CacheMsg("Stc", "en", "NotificationAttendeesFromCity") = "Notification attendees from city - "
    
    set ^CacheMsg("Stc", "ru", "Notification") = "Оповещение"
    set ^CacheMsg("Stc", "en", "Notification") = "Notification"
    
    
    set ^CacheMsg("Stc", "ru", "Operator") = "Оператор"
    set ^CacheMsg("Stc", "en", "Operator") = "Operator"
    
    set ^CacheMsg("Stc", "ru", "GoToTrainingPage") = "Перейти на страницу обучения"
    set ^CacheMsg("Stc", "en", "GoToTrainingPage") = "Go to training page"
    
    set ^CacheMsg("Stc", "ru", "GoToOrdersPage") = "Перейти на страницу заявок"
    set ^CacheMsg("Stc", "en", "GoToOrdersPage") = "Go to orders page"
    
    set ^CacheMsg("Stc", "ru", "NewOrdersToJoin") = "Новые заявки на присоединение к курсу"
    set ^CacheMsg("Stc", "en", "NewOrdersToJoin") = "New orders for joining to the course"
    
    set ^CacheMsg("Stc", "ru", "NewOrdersForTraining") = "Новые заявки на обучение"
    set ^CacheMsg("Stc", "en", "NewOrdersForTraining") = "New training requests"
    
    set ^CacheMsg("Stc", "ru", "NewOrder") = "Новых заявок"
    set ^CacheMsg("Stc", "en", "NewOrder") = "New requests"

    
    
    set ^CacheMsg("Stc", "ru", "MailingFromTraining") = "Рассылка из обучения"
    set ^CacheMsg("Stc", "en", "MailingFromTraining") = "Mailing from training"
    
    set ^CacheMsg("Stc", "ru", "CreateSubscr") = "Оформление подписки"
    set ^CacheMsg("Stc", "en", "CreateSubscr") = "Create subscription"
    
    set ^CacheMsg("Stc", "ru", "AddNewStudent") = "Добавление слушателя"
    set ^CacheMsg("Stc", "en", "AddNewStudent") = "Add new attendee"
    

    
    
    set ^CacheMsg("Stc", "ru", "StudentsAccessToFeedBack") = "Слушатели - доступ к анкете"
    set ^CacheMsg("Stc", "en", "StudentsAccessToFeedBack") = "Students - access to survey"
    
    set ^CacheMsg("Stc", "ru", "StudentsRemainder") = "Слушатели - напоминание"
    set ^CacheMsg("Stc", "en", "StudentsRemainder") = "Students - remainder"
    
    set ^CacheMsg("Stc", "ru", "CuratorListOfStudents") = "Куратор - список слушателей"
    set ^CacheMsg("Stc", "en", "CuratorListOfStudents") = "Curator - list of attendees"
    
    set ^CacheMsg("Stc", "ru", "TeacherListOfStudents") = "Преподаватель - список слушателей"
    set ^CacheMsg("Stc", "en", "TeacherListOfStudents") = "Trainer - list of attendees"
    
    set ^CacheMsg("Stc", "ru", "OrdersLinkForRegistration") = "Заявки - ссылка на регистрацию"
    set ^CacheMsg("Stc", "en", "OrdersLinkForRegistration") = "Requests - link for registration"
    
    
    
    set ^CacheMsg("Stc", "ru", "Curator") = "Куратор"
    set ^CacheMsg("Stc", "en", "Curator") = "Curator"
    
    set ^CacheMsg("Stc", "ru", "OtherInfo") = "Примечание"
    set ^CacheMsg("Stc", "en", "OtherInfo") = "Other information"
    
    // Email subject
    set ^CacheMsg("Stc", "ru", "emailSubject") = "Заявка на обучение"
    set ^CacheMsg("Stc", "en", "emailSubject") = "Request for training"
    
    
    
    // MAILING ================================================================================================
    
    // Students
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-Students") = "InterSystems. Обучение"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-Students") = ""_
    "Здравствуйте! Напоминаем Вам о предстоящем обучении.<br>"_
    "Дата начала обучения: %DateStart, время: %TimeStart - %TimeEnd<br>"_
    "Курс: %Course.Name<br>"_
    "Город: %City.Name, %Region.Name, %Country.Name<br>"_
    "Адрес: %Street, %Room<br>"_
    "Преподаватель: %Trainer.FullName, %Trainer.Email <br>"_
    "Контактное лицо: %Curator.FullName, %Curator.Email, %Curator.PhonePublic<br>"_
    "На обучение обязательно возьмите с собой ноутбук с ОС Windows (любой) или виртуальной машиной Windows."

    set ^CacheMsg("Stc", "en", "mail_Subject_Training-Students") = "InterSystems. Training"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-Students") = ""_
    "Hello! We remind you of upcoming training.<br>"_
    "Start date: %DateStart, time: %TimeStart - %TimeEnd<br>"_
    "Course: %Course.Name<br>"_
    "City: %City.Name, %Region.Name, %Country.Name<br>"_
    "Address: %Street, %Room<br>"_
    "Trainer: %Trainer.FullName, %Trainer.Email <br>"_
    "Curator: %Curator.FullName, %Curator.Email, %Curator.PhonePublic<br>"_
    "Training is required to bring a laptop running Windows (any) or virtual machines Windows."
    
    
    
    // Teacher
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-Teacher") = "InterSystems. Слушатели курса"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-Teacher") = ""_
    "Здравствуйте!<br>"_
    "Перейдите по <a target='_blank' href='%ListOfAttendeesUrl'>ссылке</a> для просмотра списка слушателей курса.<br>"_
    "Дата начала обучения: %DateStart, время: %TimeStart - %TimeEnd<br>"_
    "Курс: %Course.Name<br>"_
    "Город: %City.Name, %Region.Name, %Country.Name<br>"_
    "Адрес: %Street, %Room<br>"_
    "Контактное лицо: %Curator.FullName, %Curator.Email, %Curator.PhoneSecret"
    
    set ^CacheMsg("Stc", "en", "mail_Subject_Training-Teacher") = "InterSystems. List of attendees"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-Teacher") = ""_
    "Hello!<br>"_
    "Go to <a target='_blank' href='%ListOfAttendeesUrl'>link</a> view a list of students.<br>"_
    "Start date: %DateStart, time: %TimeStart - %TimeEnd<br>"_
    "Course: %Course.Name<br>"_
    "City: %City.Name, %Region.Name, %Country.Name<br>"_
    "Address: %Street, %Room<br>"_
    "Curator: %Curator.FullName, %Curator.Email, %Curator.PhoneSecret"
    
    
    
    // Curator
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-Curator") = "InterSystems. Слушатели курса"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-Curator") = ""_
    "Здравствуйте!<br>"_
    "Перейдите по <a target='_blank' href='%ListOfAttendeesUrl'>ссылке</a> для просмотра списка слушателей курса.<br>"_
    "Дата начала обучения: %DateStart, время: %TimeStart - %TimeEnd<br>"_
    "Курс: %Course.Name<br>"_
    "Город: %City.Name, %Region.Name, %Country.Name<br>"_
    "Адрес: %Street, %Room<br>"_
    "Преподаватель: %Trainer.FullName, %Trainer.Email, %Trainer.Phone"
    
    set ^CacheMsg("Stc", "en", "mail_Subject_Training-Curator") = "InterSystems. List of students"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-Curator") = ""_
    "Hello!<br>"_
    "Go to <a target='_blank' href='%ListOfAttendeesUrl'>link</a> view a list of students.<br>"_
    "Start date: %DateStart, time: %TimeStart - %TimeEnd<br>"_
    "Course: %Course.Name<br>"_
    "City: %City.Name, %Region.Name, %Country.Name<br>"_
    "Address: %Street, %Room<br>"_
    "Trainer: %Trainer.FullName, %Trainer.Email, %Trainer.Phone"
    



    // FeedBack
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-FeedBack") = "InterSystems. Анкета слушателя"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-FeedBack") = ""_
    "Здравствуйте!<br>"_
    "Перейдите по <a target='_blank' href='%SurveyUrl'>ссылке</a> для заполнения анкеты, там вы можете оставить свои замечания и предложения по пройденному курсу - '%Course.Name'"

    set ^CacheMsg("Stc", "en", "mail_Subject_Training-FeedBack") = "InterSystems. Survey"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-FeedBack") = ""_
    "Hello!<br>"_
    "Go to <a target='_blank' href='%SurveyUrl'>link</a> to complete the questionnaire, where you can leave your comments and suggestions on the course - '%Course.Name'"
    
    
    
    
    // Registration
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-Registration") = "InterSystems. Регистрация на курс"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-Registration") = ""_
    "Здравствуйте! Ваша заявка на обучение принята.<br>"_
    "Дата начала обучения: %DateStart, время: %TimeStart - %TimeEnd<br>"_
    "Курс: %Course.Name<br>"_
    "Город: %City.Name, %Region.Name, %Country.Name<br>"_
    "Адрес: %Street, %Room<br>"_
    "Преподаватель: %Trainer.FullName, %Trainer.Email <br>"_
    "Контактное лицо: %Curator.FullName, %Curator.Email, %Curator.PhonePublic"
    
    set ^CacheMsg("Stc", "en", "mail_Subject_Training-Registration") = "InterSystems. Register for a course"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-Registration") = ""_
    "Hello! Your order is accepted for training.<br>"_
    "Start date: %DateStart, time: %TimeStart - %TimeEnd<br>"_
    "Course: %Course.Name<br>"_
    "City: %City.Name, %Region.Name, %Country.Name<br>"_
    "Address: %Street, %Room<br>"_
    "Trainer: %Trainer.FullName, %Trainer.Email <br>"_
    "Curator: %Curator.FullName, %Curator.Email, %Curator.PhonePublic"
    
    
    
    // Orders
    set ^CacheMsg("Stc", "ru", "mail_Subject_Training-Orders") = "InterSystems. Анонс нового обучения"
    set ^CacheMsg("Stc", "ru", "mail_Message_Training-Orders") = ""_
    "Здравствуйте!<br>"_
    "Дата начала обучения: %DateStart, время: %TimeStart - %TimeEnd<br>"_
    "Курс: %Course.Name<br>"_
    "Город: %City.Name, %Region.Name, %Country.Name<br>"_
    "Адрес: %Street, %Room<br>"_
    "Преподаватель: %Trainer.FullName, %Trainer.Email <br>"_
    "Контактное лицо: %Curator.FullName, %Curator.Email, %Curator.PhonePublic<br>"_
    "Для регистрации перейдите по <a target='_blank' href='%JoinUrl'>ссылке</a>."

    set ^CacheMsg("Stc", "en", "mail_Subject_Training-Orders") = "InterSystems. New training"
    set ^CacheMsg("Stc", "en", "mail_Message_Training-Orders") = ""_
    "Hello!<br>"_
    "Start date: %DateStart, time: %TimeStart - %TimeEnd<br>"_
    "Course: %Course.Name<br>"_
    "City: %City.Name, %Region.Name, %Country.Name<br>"_
    "Address: %Street, %Room<br>"_
    "Tainer: %Trainer.FullName, %Trainer.Email <br>"_
    "Curator: %Curator.FullName, %Curator.Email, %Curator.PhonePublic<br>"_
    "Go to <a target='_blank' href='%JoinUrl'>link</a> for registration."
    
    
    
    // Apply order
    set ^CacheMsg("Stc", "ru", "mail_Subject_Order-Apply") = "InterSystems. Заявка на обучение"
    set ^CacheMsg("Stc", "ru", "mail_Message_Order-Apply") = ""_
    "Здравствуйте!<br>"_
    "Ваша заявка на обучение по курсу '%Course.Name' принята."
    
    set ^CacheMsg("Stc", "en", "mail_Subject_Order-Apply") = "InterSystems. Order for training"
    set ^CacheMsg("Stc", "en", "mail_Message_Order-Apply") = ""_
    "Hello!<br>"_
    "Your order for training '%Course.Name' is accepted."
    
    //=========================================================================================
    
    
    set ^CacheMsg("Stc", "ru", "CalendarEvent") = ""_
        "<a href='http://%1'>Программа курса</a><br><br>"_
        "<a href='http://%2'>Записаться на обучение</a><br><br>"_
        "Место проведения:<br>"_
        "%3<br><br>"_
        "Преподаватель:<br>"_
        "%4<br><br>"_
        "Время проведения: %5<br>"_
        "%6%7"

    set ^CacheMsg("Stc", "en", "CalendarEvent") = ""_
        "<a href='http://%1'>Course program</a><br><br>"_
        "<a href='http://%2'>Registration</a><br><br>"_
        "Location:<br>"_
        "%3<br><br>"_
        "Teacher:<br>"_
        "%4<br><br>"_
        "Time: %5<br>"_
        "%6%7"
        
    // Mailing subscription
    set ^CacheMsg("Stc", "ru", "mail_Subject_Confirmation-Subscription") = "InterSystems. Активация подписки на анонсы обучающих курсов"
    set ^CacheMsg("Stc", "ru", "mail_Message_Confirmation-Subscription") = "Здравствуйте, для активации подписки перейдите по <a href='%ActivationUrl' target='_blank'>ссылке</a>."
    
    set ^CacheMsg("Stc", "ru", "SubscriptionAlreadyExists") = "Подписка уже оформлена"
    
    set ^CacheMsg("Stc", "ru", "SendSubscriptionConfirmationCodeError") = "Отправка кода активации завершилась неудачей"
    set ^CacheMsg("Stc", "en", "SendSubscriptionConfirmationCodeError") = "Sending an activation code failed"
    
    set ^CacheMsg("Stc", "ru", "WrongConfirmationCode") = "Неверный код активации"
    set ^CacheMsg("Stc", "en", "WrongConfirmationCode") = "Wrong activation code"
    
    set ^CacheMsg("Stc", "ru", "WrongAccessCode") = "Неверный код доступа"
    set ^CacheMsg("Stc", "en", "WrongAccessCode") = "Wrong access code"
    
    
    
    set ^CacheMsg("Stc", "ru", "contactPerson") = "Контактное лицо"
    set ^CacheMsg("Stc", "en", "contactPerson") = "Contact person"
    
    set ^CacheMsg("Stc", "ru", "certificatesReport") = "Сертификаты для [%1] [%2] [%3]"
    set ^CacheMsg("Stc", "en", "certificatesReport") = "Certificates for [%1] [%2] [%3]"

    set ^CacheMsg("Stc", "ru", "studentsReport") = "Слушатели [%1] [%2] [%3]"
    set ^CacheMsg("Stc", "en", "studentsReport") = "Students [%1] [%2] [%3]"    

    set ^CacheMsg("Stc", "ru", "ordernewstudentsReport") = "Заявки [%1] [%2] [%3]"
    set ^CacheMsg("Stc", "en", "ordernewstudentsReport") = "Orders [%1] [%2] [%3]"        
    
    // Errors

    set ^CacheMsg("Stc", "ru", "feedBackSpam") = "Слишком много отзывов для этого курса"
    set ^CacheMsg("Stc", "en", "feedBackSpam") = "Too much surveys for this training"

    set ^CacheMsg("Stc", "ru", "feedBackErrorCode") = "Неверный код доступа"
    set ^CacheMsg("Stc", "en", "feedBackErrorCode") = "Wrong access code"
    
    set ^CacheMsg("Stc", "ru", "feedBackSave") = "Отзыв не сохранен."
    set ^CacheMsg("Stc", "en", "feedBackSave") = "Survey have not been saved."
    
    set ^CacheMsg("Stc", "ru", "emailAddNewStudent") = "Слушатель добавлен, но письмо не было отправлено."
    set ^CacheMsg("Stc", "en", "emailAddNewStudent") = "Attendee has been added into training, but email was not sent."
    
    set ^CacheMsg("Stc", "ru", "createCompany") = "Создание организации"
    set ^CacheMsg("Stc", "en", "createCompany") = "Creation organization"
    
    set ^CacheMsg("Stc", "ru", "saveCompany") = "Сохранение организации"
    set ^CacheMsg("Stc", "en", "saveCompany") = "Saving organization"
    
    set ^CacheMsg("Stc", "ru", "openCompany") = "Загрузка организации"
    set ^CacheMsg("Stc", "en", "openCompany") = "Loading organization"
    
    set ^CacheMsg("Stc", "ru", "createPerson") = "Создание сотрудника"
    set ^CacheMsg("Stc", "en", "createPerson") = "Create employee"
    
    set ^CacheMsg("Stc", "ru", "savePerson") = "Сохранение сотрудника"
    set ^CacheMsg("Stc", "en", "savePerson") = "Saving employee"
    
    set ^CacheMsg("Stc", "ru", "deletePerson") = "Удаление сотрудника"
    set ^CacheMsg("Stc", "en", "deletePerson") = "Remove employee"
    
    set ^CacheMsg("Stc", "ru", "deletePersonImpossible") = "Удаление сотрудника невозможно, на него ссылаются из других таблиц."
    set ^CacheMsg("Stc", "en", "deletePersonImpossible") = "Deleting employee impossible it is referenced from other tables."
    
    set ^CacheMsg("Stc", "ru", "openPerson") = "Загрузка сотрудника"
    set ^CacheMsg("Stc", "en", "openPerson") = "Loading employee"
    
    set ^CacheMsg("Stc", "ru", "createCompanyContact") = "Создание контакта организации"
    set ^CacheMsg("Stc", "en", "createCompanyContact") = "Creation organization contact"
    
    set ^CacheMsg("Stc", "ru", "wrongOrderAccessCode") = "Неверный код доступа к заявке"
    set ^CacheMsg("Stc", "en", "wrongOrderAccessCode") = "Invalid access code for request"
    
    set ^CacheMsg("Stc", "ru", "createDirtyOrder") = "Создание новой заявки"
    set ^CacheMsg("Stc", "en", "createDirtyOrder") = "Creation new request"
    
    set ^CacheMsg("Stc", "ru", "openOrder") = "Загрузка заявки"
    set ^CacheMsg("Stc", "en", "openOrder") = "Load request"
    
    set ^CacheMsg("Stc", "ru", "saveOrder") = "Сохранение заявки"
    set ^CacheMsg("Stc", "en", "saveOrder") = "Saving request"
    
    set ^CacheMsg("Stc", "ru", "saveApprovedOrder") = "Сохранение одобренной заявки"
    set ^CacheMsg("Stc", "en", "saveApprovedOrder") = "Saving approved request"
    
    set ^CacheMsg("Stc", "ru", "saveOrderStudent") = "Сохранение слушателя" 
    set ^CacheMsg("Stc", "en", "saveOrderStudent") = "Saving attendee"
    
    set ^CacheMsg("Stc", "ru", "doNotHaveAccessToEditOrderStudent") = "Нет прав для редактирования слушателя"
    set ^CacheMsg("Stc", "en", "doNotHaveAccessToEditOrderStudent") = "Do not have access to edit order attendee"
    
    set ^CacheMsg("Stc", "ru", "createOrderStudent") = "Создание слушателя"
    set ^CacheMsg("Stc", "en", "createOrderStudent") = "Creation attendee"
    
    set ^CacheMsg("Stc", "ru", "saveDirtyOrder") = "Сохранение новой заявки"
    set ^CacheMsg("Stc", "en", "saveDirtyOrder") = "Saving new order"
    
    set ^CacheMsg("Stc", "ru", "saveCourse") = "Сохранение курса"
    set ^CacheMsg("Stc", "en", "saveCourse") = "Saving course"
    
    set ^CacheMsg("Stc", "ru", "createCourse") = "Создание курса"
    set ^CacheMsg("Stc", "en", "createCourse") = "Creation course"
    
    set ^CacheMsg("Stc", "ru", "saveSubGroup") = "Сохранение подгруппы"
    set ^CacheMsg("Stc", "en", "saveSubGroup") = "Saving sub-group"
    
    set ^CacheMsg("Stc", "ru", "createSubGroup") = "Создание подгруппы"
    set ^CacheMsg("Stc", "en", "createSubGroup") = "Creation sub-group"
    
    set ^CacheMsg("Stc", "ru", "deleteSubGroup") = "Удаление подгруппы"
    set ^CacheMsg("Stc", "en", "deleteSubGroup") = "Removing sub-group"
    
    set ^CacheMsg("Stc", "ru", "createTraining") = "Создание обучения"
    set ^CacheMsg("Stc", "en", "createTraining") = "Creating a training"
    
    set ^CacheMsg("Stc", "ru", "saveTraining") = "Сохранение обучения"
    set ^CacheMsg("Stc", "en", "saveTraining") = "Saving training"
    
    set ^CacheMsg("Stc", "ru", "isAlreadyCompleteTraining") = "Обучение уже было завершено"
    set ^CacheMsg("Stc", "en", "isAlreadyCompleteTraining") = "Training is already completed"
    
    set ^CacheMsg("Stc", "ru", "createCertificate") = "Создание сертификата"
    set ^CacheMsg("Stc", "en", "createCertificate") = "Creating a cretificate"
    
    
    set ^CacheMsg("Stc", "ru", "saveLoc") = "Сохранение локализации"
    set ^CacheMsg("Stc", "en", "saveLoc") = "Saving localization"
        
    set ^CacheMsg("Stc", "ru", "deleteLoc") = "Удаление локализации"
    set ^CacheMsg("Stc", "en", "deleteLoc") = "Deleting localization"
        
    set ^CacheMsg("Stc", "ru", "createLoc") = "Создание локализации"
    set ^CacheMsg("Stc", "en", "createLoc") = "Creating localization"
    
    set ^CacheMsg("Stc", "ru", "sendEmail") = "Отправка почты"
    set ^CacheMsg("Stc", "en", "sendEmail") = "Sending email"
    
    set ^CacheMsg("Stc", "ru", "deleteCompany") = "Удаление организации"
    set ^CacheMsg("Stc", "en", "deleteCompany") = "Removing company"
    
    set ^CacheMsg("Stc", "ru", "deleteCompanyImpossible") = "Удаление организации невозможно, на неё ссылаются из других таблиц."
    set ^CacheMsg("Stc", "en", "deleteCompanyImpossible") = "Deleting company impossible it is referenced from other tables."
    
    set ^CacheMsg("Stc", "ru", "deleteCertificate") = "Удаление сертификата"
    set ^CacheMsg("Stc", "en", "deleteCertificate") = "Removing certificate"
    
    set ^CacheMsg("Stc", "ru", "deleteTraining") = "Удаление обучения"
    set ^CacheMsg("Stc", "en", "deleteTraining") = "Removing training"

    set ^CacheMsg("Stc", "ru", "deleteOrderNewStudent") = "Удаление заявки от слушателя"
    set ^CacheMsg("Stc", "en", "deleteOrderNewStudent") = "Removing order from student"
    
    set ^CacheMsg("Stc", "ru", "tooMuchOrderNewStudent") = "Слишком много заявок для выбранного обучения"
    set ^CacheMsg("Stc", "en", "tooMuchOrderNewStudent") = "Too much new requests for this training"
    
    set ^CacheMsg("Stc", "ru", "deleteTrainingImpossible") = "Удаление обучения невозможно, на него ссылаются из других таблиц."
    set ^CacheMsg("Stc", "en", "deleteTrainingImpossible") = "Deleting training impossible it is referenced from other tables."

    set ^CacheMsg("Stc", "ru", "personContainsInTraining") = "Слушатель уже есть в этом обучении"
    set ^CacheMsg("Stc", "en", "personContainsInTraining") = "Student is already in this training"
    
    
    set ^CacheMsg("Stc", "ru", "NoPrivilege") = "Нет доступа!"
    set ^CacheMsg("Stc", "en", "NoPrivilege") = "No privileges!"
    
    set ^CacheMsg("Stc", "ru", "copyOfOrderNewStudent") = "Вы уже зарегистрированы!"
    set ^CacheMsg("Stc", "en", "copyOfOrderNewStudent") = "You are already registered!"
    
    
    set ^CacheMsg("Stc", "ru", "createOrderNewStudent") = "Ошибка при создании заявки!"
    set ^CacheMsg("Stc", "en", "createOrderNewStudent") = "Error creating request!"
    
    q $$$OK
]]></Implementation>
</Method>

<Method name="DeepSeeMsg">
<Description>
do ##class(Stc.Utils.Msg).DeepSeeMsg()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    // ------- Дашборды -----------------
    // Курсы
    do ..AddDeepSeeMsg("Курсы и слушатели", "Courses and attendees")
    do ..AddDeepSeeMsg("Количество слушателей по курсам за все годы", "Number of attendees by courses for all years")
    do ..AddDeepSeeMsg("Количество слушателей по курсам", "Number of attendees by courses")
    
    do ..AddDeepSeeMsg("Курсы и обучения", "Courses and trainings")
    do ..AddDeepSeeMsg("Количество обучений по курсам за все годы", "Number of trainings by courses for all years")
    
    // Организации
    do ..AddDeepSeeMsg("Организации и слушатели", "Organizations and attendees")
    do ..AddDeepSeeMsg("Количество слушателей по организациям за все годы", "Number of attendees by organizations for all years")
    
    do ..AddDeepSeeMsg("Организации и обучения", "Organizations and trainings")
    do ..AddDeepSeeMsg("Количество обучений по организациям за все годы", "Number of trainings by organizations for all years")
    
    // Преподаватели
    do ..AddDeepSeeMsg("Преподаватели и слушатели", "Trainers and attendee")
    do ..AddDeepSeeMsg("Количество слушателей по преподавателям за все годы", "Number of attendees by trainers for all years")
    
    do ..AddDeepSeeMsg("Преподаватели и обучения", "Trainers and trainings")
    do ..AddDeepSeeMsg("Количество обучений по преподавателям за все годы", "Number of trainings by trainers for all years")
    // ---------------------------------

    
    do ..AddDeepSeeMsg("Количество слушателей по годам", "Number of attendees by years")
    do ..AddDeepSeeMsg("Количество обучений по годам", "Number of trainings by years")
    
    
    do ..AddDeepSeeMsg("Адрес", "Address")
    do ..AddDeepSeeMsg("Год", "Year")
    do ..AddDeepSeeMsg("Город", "City")
    do ..AddDeepSeeMsg("Дата начала", "Start date")
    do ..AddDeepSeeMsg("Дата обучения", "Date of training")
    do ..AddDeepSeeMsg("Дата окончания", "End date")
    do ..AddDeepSeeMsg("Дата", "Date")
    do ..AddDeepSeeMsg("Завершённые", "Finished")
    do ..AddDeepSeeMsg("Карта точек обучения", "Map of training points")
    do ..AddDeepSeeMsg("Количество обучений", "Trainings count")
    do ..AddDeepSeeMsg("Перейти к обучениям", "Go to trainings")
    do ..AddDeepSeeMsg("Перейти к слушателям", "Go to attendees")
    
    do ..AddDeepSeeMsg("Анализ обучений", "Analysis of trainings")
    do ..AddDeepSeeMsg("Анализ по слушателям", "Analysis of students")      
    
    do ..AddDeepSeeMsg("Курс", "Course")
    do ..AddDeepSeeMsg("Незавершённые", "Scheduled")
    do ..AddDeepSeeMsg("Организация", "Organization")
    do ..AddDeepSeeMsg("Партнёр", "Partner")
    do ..AddDeepSeeMsg("Подгруппы", "Sub-groups")
    do ..AddDeepSeeMsg("Преподаватель", "Trainer")
    do ..AddDeepSeeMsg("Слушатели выбранного обучения", "Attendees of selected training")
    do ..AddDeepSeeMsg("Слушатели", "Attendees")
    do ..AddDeepSeeMsg("Обучения", "Trainings")
    do ..AddDeepSeeMsg("Слушатель", "Attendee")
    do ..AddDeepSeeMsg("Статус", "Status")
    do ..AddDeepSeeMsg("Телефон", "Phone")
    do ..AddDeepSeeMsg("Тип организации", "Type of organization")
    do ..AddDeepSeeMsg("Университет", "University")
    
    do ..AddDeepSeeMsg("Количество слушателей", "Number of attendees")
    do ..AddDeepSeeMsg("Количество слушателей в заявках по курсам", "Number of attendees in requests for training")
    do ..AddDeepSeeMsg("Количество заявок по курсам", "The number of requests for training")

    q $$$OK
]]></Implementation>
</Method>

<Method name="AddDeepSeeMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>rusString:%String,engString:%String</FormalSpec>
<Implementation><![CDATA[
    set code = $ZCRC(rusString, 7)
    set ^CacheMsg("Stc", "ru", code) = rusString
    set ^CacheMsg("Stc", "en", code) = engString
    set ^CacheMsg("Stc", "en-us", code) = engString
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.SourceControl">
<Super>%Studio.SourceControl.File</Super>
<TimeCreated>63773,49223.509942</TimeCreated>

<Parameter name="ExpMode">
<Description>
1 - export in classname.cls.xml (compatible with cache-tort-git), 
0 - export in classname.xml   </Description>
<Default>0</Default>
</Parameter>

<Parameter name="Folder">
<Default>c:\InterSystems\Cache20151\CSP\stcunion\CacheSrc</Default>
</Parameter>

<Method name="SetUp">
<Description>
setup control version for namespace and export all classes  do ##class(Stc.Utils.SourceControl).SetUp()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    /// ^Sources = tempdir path
/// ^Sources(ext,"*") -- subfolder for item type

    kill ^Sources
    set ^Sources=..#Folder_"/"
    set ^Sources("CLS","*")="cls/"
    set ^Sources("DFI","*")="dfi/"
    
    set SourceControl=..%New("")
    set sc=$$$OK
    
    &sql(declare SU1 cursor for
        select ID into :class 
        from %Dictionary.ClassDefinition where (NOT (ID %STARTSWITH '%')) AND NOT (ID %STARTSWITH 'Util.SourceControl') AND NOT (ID %STARTSWITH 'Ens') AND NOT (ID %STARTSWITH 'CSPX') AND NOT (ID %STARTSWITH 'INFORMATION.SCHEMA') )
    &sql(open SU1)
    for {
        &sql(fetch SU1)
        quit:SQLCODE
        set sc=SourceControl.OnAfterSave(class_".CLS")
        quit:'sc
    }
    
        &sql(declare SU2 cursor for
        select documentname into :name 
        from %DeepSee_UserLibrary.FolderItem)
    &sql(open SU2)
    for {
        &sql(fetch SU2)
        quit:SQLCODE
        set sc=SourceControl.OnAfterSave(name)
        quit:'sc
    }

    
    quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set filename=..ExternalName(InternalName)
    #; File not mapped so nothing to do
    If filename="" Quit $$$OK
    Set name=$Piece(InternalName,".",1,$Length(InternalName,".")-1)
    #; CSP files are already files so not additional work needed
    If name["/" Quit $$$OK
    Set ext=$ZConvert($Piece(InternalName,".",$Length(InternalName,".")),"U")
    #; Do not export the default projects
    If ext="PRJ",$zconvert($extract(name,1,$length("default_")),"l")="default_" Quit $$$OK
    #; By convention items starting with Z,z,%z,%Z are not exported
    If (ext="PRJ")||($extract($translate(name,"Z%","z"))="z") Quit $$$OK
    #; If time already matches nothing to do
    If ##class(%RoutineMgr).TS(InternalName)=$get(^Sources(0,"ItemTimeStamp",InternalName)) Quit $$$OK

    If ##class(%File).Exists(filename),##class(%File).ReadOnly(filename) Write !,"File ",filename," is read only, not exporting" Quit $$$OK
    Do ##class(%File).CreateDirectoryChain(##class(%File).GetDirectory(filename))
    Set sc=$$Export^%occXMLExport(filename,"-d /diffexport",InternalName)
    If $$$ISOK(sc) {
        Write !,"Exported '",InternalName,"' to file '",filename,"'"
        Set ^Sources(0,"FileTimeStamp",InternalName)=$zu(140,2,filename,1)
        Set ^Sources(0,"ItemTimeStamp",InternalName)=##class(%RoutineMgr).TS(InternalName)
    } Else {
        Do DecomposeStatus^%apiOBJ(sc,,"d")
        Quit sc
    }
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExtName">
<Description>
Return filename of this item</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    /// if file is dfi, make folder-name.type.dfi to folder.name-type.dfi
    if $zconvert($piece(InternalName,".",*),"U")="DFI" {
        /// if pivot name has folder convert folders - to dots
        s folderAndName=$Tr($p(InternalName,"."),"-",".")
        s InternalName=folderAndName_"-"_$p(InternalName,".",2)_".DFI"
                }
    
    Set name=..Name(InternalName)
    // if cache-tort-git mode then introduce type in the file name
    if ..#ExpMode set $p(name,".",*)=($zconvert($piece(InternalName,".",*),"l")_"."_$p(name,".",*))
    Quit $select(name="":"",1:^Sources_$translate(name,"\","/"))
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<FormalSpec>InternalName:%String,display:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set filename=..ExternalName(InternalName)
    #; File not mapped so nothing to do
    If filename="" Quit $$$OK
    #; CSP files are already files so not work needed
    If InternalName["/" Quit $$$OK
    #; If no file then skip the import
    If '##class(%File).Exists(filename) Write:display !,"File ",filename," not found, skipping import" Quit $$$OK
    #; If time already matches then no work to do
    If ##class(%File).GetFileDateModified(filename,1)=$get(^Sources(0,"FileTimeStamp",InternalName)),##class(%RoutineMgr).TS(InternalName)=$get(^Sources(0,"ItemTimeStamp",InternalName)) Quit $$$OK
    Set name=$Piece(InternalName,".",1,$Length(InternalName,".")-1)
    Set ext=$ZConvert($Piece(InternalName,".",$Length(InternalName,".")),"U")
    Set sc=$$Import^%occSAX(filename,"fv-d-l")
    If $$$ISOK(sc) {
        Write !,"Imported '",InternalName,"' from file '",filename,"'"
        Set ^Sources(0,"FileTimeStamp",InternalName)=##class(%File).GetFileDateModified(filename,1)
        Set ^Sources(0,"ItemTimeStamp",InternalName)=##class(%RoutineMgr).TS(InternalName)
    } Else {
        Do DecomposeStatus^%apiOBJ(sc,.errors,"d")
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="ExportPackage">
<Description>
Export to one big file without timediff do ##class(Stc.Utils.SourceControl).ExportPackage()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    set st = $system.OBJ.ExportPackage("Stc", ^Sources_"cls/Stc.xml", "/displaylog=0/diffexport=1")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Stc.Utils.SourceControlD</DataLocation>
<DefaultData>SourceControlDefaultData</DefaultData>
<IdLocation>^Stc.Utils.SourceControlD</IdLocation>
<IndexLocation>^Stc.Utils.SourceControlI</IndexLocation>
<StreamLocation>^Stc.Utils.SourceControlS</StreamLocation>
<Data name="SourceControlDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Stc.Utils.TaskAutoMailing">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63231,11522.229906</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This method is responsible for executing the task.<br>
At the scheduled time, the Task Manager creates an instance of this object,
sets any property values using the stored "settings" for the task, and then
invokes this method to execute the task.<br>
In order to execute a real task, override this method in a subclass.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..Main()
]]></Implementation>
</Method>

<Method name="Main">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..StudentsAutoMailing()
    
    do ..TeacherAutoMailing()
    
    do ..TeacherSetAttendeeStatusAutoMailing()
    
    do ..CuratorAutoMailing()
    
    do ..FeedBackAutoMailing()
    
    do ..OrdersAutoMailing()
    
    do ..MailingGroupsAutoMailing()
   
    do ..TeacherAccessToListOfFeedbacks()
    
    do ..CityStudentMailing()
   
    job ##class(Stc.Data.MailingJournal).StartSending()
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="StudentsAutoMailing">
<Description>
Send notification to all students in the training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set diffDays = ##class(Stc.Data.Settings).GetMailingStudentsDays()
            
        &sql(DECLARE TrCur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND IsStudentsAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)  
            
        &sql(OPEN TrCur)
        for  
        {   
            &sql(FETCH TrCur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing StudentsAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingStudents(tr)
            
            set contacts = ##class(Stc.Data.Training).GetStudentsContacts(trId)
            
            do ##class(Stc.Data.MailingJournal).CreateAll(contacts, mail.subject, mail.message, ##class(Msg).GetMsg("StudentsRemainder"))
            
            if (contacts.Count() > 0) {
                set tr.IsStudentsAutoMailing = $$$NO
                do tr.%Save()
            }                       
        }
            
        &sql(CLOSE TrCur)       
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing StudentsAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="TeacherAutoMailing">
<Description>
Send notification to training teacher</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        set diffDays = ##class(Stc.Data.Settings).GetMailingTeacherDays()
        
        &sql(DECLARE Tr2Cur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND IsTeacherAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)   
            
        &sql(OPEN Tr2Cur)
        for  
        {   
            &sql(FETCH Tr2Cur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
                
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingTeacher(tr)
                
            do ##class(Stc.Data.MailingJournal).Create(tr.Teacher.Email, tr.Teacher.FullName, mail.subject, mail.message, ##class(Msg).GetMsg("TeacherAccessToStudentsList"), grNumber)
                                  
        }
            
        &sql(CLOSE Tr2Cur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="TeacherSetAttendeeStatusAutoMailing">
<Description>
Send notification to training teacher</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        // Через 2 дня после начала отправка
        &sql(DECLARE Tr3ASCur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND IsTeacherAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = -2)   
            
        &sql(OPEN Tr3ASCur)
        for  
        {   
            &sql(FETCH Tr3ASCur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
                
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingTeacherSetAttendeeStatus(tr)
                
            do ##class(Stc.Data.MailingJournal).Create(tr.Teacher.Email, tr.Teacher.FullName, mail.subject, mail.message, ##class(Msg).GetMsg("TeacherAccessToStudentsListForSetStatus"), grNumber)
            
            set tr.IsTeacherAutoMailing = 0
            do tr.%Save()                       
        }
            
        &sql(CLOSE Tr3ASCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="CuratorAutoMailing">
<Description>
Send notification to training curator</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        set diffDays = ##class(Stc.Data.Settings).GetMailingCuratorDays()
            
        &sql(DECLARE Tr3Cur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND IsCuratorAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateStart) = :diffDays)   
            
        &sql(OPEN Tr3Cur)
        for  
        {   
            &sql(FETCH Tr3Cur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CuratorAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
            
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingCurator(tr)
            
            do ##class(Stc.Data.MailingJournal).Create(tr.CuratorEmail, tr.CuratorFullName.Value, mail.subject, mail.message, ##class(Msg).GetMsg("CuratorAccessToStudentList"), grNumber)
            
            set tr.IsCuratorAutoMailing = 0
            do tr.%Save()                       
        }
            
        &sql(CLOSE Tr3Cur)
    
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CuratorAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="FeedBackAutoMailing">
<Description>
Send feedback link to students in the training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        &sql(DECLARE Tr4Cur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsFeedBackAutoMailing = 1 AND DATEDIFF(D,{fn NOW()}, DateFinish) = 0) 
            
        &sql(OPEN Tr4Cur)
        for  
        {   
            &sql(FETCH Tr4Cur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing FeedBackAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
            
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingFeedBack(tr)
                    
            set contacts = ##class(Stc.Data.Training).GetStudentsContacts(trId)
            
            do ##class(Stc.Data.MailingJournal).CreateAll(contacts, mail.subject, mail.message, ##class(Msg).GetMsg("StudentAccessToFeedBack"))
            
            if (contacts.Count() > 0) {
                set tr.IsFeedBackAutoMailing = $$$NO
                do tr.%Save()
            }                               
        }
            
        &sql(CLOSE Tr4Cur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing FeedBackAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="OrdersAutoMailing">
<Description>
Send </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        &sql(DECLARE Tr5Cur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND IsOrdersAutoMailing = 1)  
            
        &sql(OPEN Tr5Cur)
        for  
        {   
            &sql(FETCH Tr5Cur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing OrdersAutoMailing()", "Start; TrID="_trId)
            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
            
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingOrders(tr)
                    
            set contacts = ##class(Stc.Data.Order).GetContactsForCourse(tr.Course.%Id())
            
            do ##class(Stc.Data.MailingJournal).CreateAll(contacts, mail.subject, mail.message, ##class(Msg).GetMsg("ContactFromOrder"))
            
            if (contacts.Count() > 0) {
                set tr.IsOrdersAutoMailing = $$$NO
                do tr.%Save()
            }                               
        }
            
        &sql(CLOSE Tr5Cur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing OrdersAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="MailingGroupsAutoMailing">
<Description>
Send </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        &sql(DECLARE MTGCur CURSOR FOR 
                SELECT ID
                FROM Stc_Data.MailingTrainingGroup
                WHERE IsAutoMailing = 1 AND Training->IsCompleted = 0)  
            
        &sql(OPEN MTGCur)
        for  
        {   
            &sql(FETCH MTGCur INTO :mtgId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing MailingGroupsAutoMailing()", "Start; mtgID="_mtgId)
            
            set mtg = ##class(Stc.Data.MailingTrainingGroup).%OpenId(mtgId)
            
            set mail = ##class(Stc.Data.MailingGroup).GetMail(mtg.MGroup.%Id(), mtg.Training.%Id())
            set contacts = ##class(Stc.Data.MailingGroup).GetMailingItemsContacts(mtg.MGroup.%Id())
            set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
    
            for i=1:1:contacts.Count(){
                set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(contacts.GetAt(i).id)
                if '$ISOBJECT(mItem) continue
                    
                set msg = $REPLACE(mail.message, "%AccessCode", $system.Encryption.Base64Encode(mItem.AccessCode))
                do ##class(Stc.Data.MailingJournal).Create(contacts.GetAt(i).email, contacts.GetAt(i).name, mail.subject, msg, mItem.MGroup.Name, grNumber)  
            }
                    
            if (contacts.Count() > 0) {
                set mtg.IsAutoMailing = $$$NO
                set mtg.MailingIsCompleted = $$$YES
                do mtg.%Save()
            }                           
        }
        &sql(CLOSE MTGCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing MailingGroupsAutoMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="TeacherAccessToListOfFeedbacks">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        set nowTime = $ZDT($ZTS, 3)
        set timeOut = ##class(Stc.Data.Settings).GetMailingHoursTimeoutListOfFeedbacks()
        
        &sql(DECLARE TrFbCur CURSOR FOR 
                SELECT DISTINCT Training
                FROM Stc_Data.FeedBack
                WHERE {fn TIMESTAMPDIFF(SQL_TSI_HOUR, CreatedTS, :nowTime)} <= :timeOut)    
            
        &sql(OPEN TrFbCur)
        for  
        {   
            &sql(FETCH TrFbCur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAccessToListOfFeedbacks()", "Start; trID="_trId)
                            
            set tr = ##class(Stc.Data.Training).%OpenId(trId)
            set mail = ##class(Stc.Utils.Email).GetMailForListOfTrainingFeedBacks(tr)
            
            do ##class(Stc.Data.MailingJournal).Create(tr.Teacher.Email, tr.Teacher.FullName_"(Тест)", mail.subject, mail.message, ##class(Msg).GetMsg("TeacherAccessToNewesFeedBacks"), grNumber)                           
        }
        &sql(CLOSE TrFbCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing TeacherAccessToListOfFeedbacks() Catch", $System.Status.GetErrorText(st))
    }
]]></Implementation>
</Method>

<Method name="CityStudentMailing">
<Description>
Send new training registration link to students by training city</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set nowTime = $ZDT($ZTS, 3)
        &sql(DECLARE TrCSCur CURSOR FOR 
                SELECT ID, City
                FROM Stc_Data.Training
                WHERE IsCompleted = 0 AND {fn TIMESTAMPDIFF(SQL_TSI_MINUTE, CreatedTS, :nowTime)} <= 1440)  
            
        &sql(OPEN TrCSCur)
        for  
        {   
            &sql(FETCH TrCSCur INTO :trId, :cityId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CityStudentMailing()", "Start; TrID="_trId)
            set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        
            set city = ##class(Stc.Data.Region).%OpenId(cityId)
            #dim studentMGroup As Stc.Data.MailingGroup = ##class(Stc.Data.MailingGroup).GetStudentsGroup()
            set mail = ##class(Stc.Data.MailingGroup).GetMail(studentMGroup.%Id(), trId)    
                
            &sql(DECLARE MIASCur CURSOR FOR 
                    SELECT AccessCode, Student
                    FROM Stc_Data.MailingItemApprovedStudent
                    WHERE City = :cityId AND Student NOT IN (SELECT Student 
                                                             FROM Stc_Data.SubGroupStudent
                                                             WHERE SubGroup IN (SELECT SubGroups
                                                                                FROM Stc_Data.Training_SubGroups
                                                                                WHERE Training = :trId)))   
            
            &sql(OPEN MIASCur)
            for  
            {   
                &sql(FETCH MIASCur INTO :accessCode, :studentId) 
                quit:(SQLCODE '= 0)
                
                set student = ##class(Stc.Data.Person).%OpenId(studentId)
                set msg = $REPLACE(mail.message, "%AccessCode", $system.Encryption.Base64Encode(accessCode))
                do ##class(Stc.Data.MailingJournal).Create(student.Email, student.FullName, mail.subject, msg, ##class(Msg).GetMsg("NotificationAttendeesFromCity")_city.Name.Value, grNumber)                     
            }
            &sql(CLOSE MIASCur)                     
        }
        &sql(CLOSE TrCSCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskAutoMailing CityStudentMailing() Catch", $System.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.TaskOperatorNotification">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63390,44784.980424</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This method is responsible for executing the task.<br>
At the scheduled time, the Task Manager creates an instance of this object,
sets any property values using the stored "settings" for the task, and then
invokes this method to execute the task.<br>
In order to execute a real task, override this method in a subclass.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    Quit ..Main()
]]></Implementation>
</Method>

<Method name="Main">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK

    try{
        TSTART
        
        set subject = ##class(Msg).GetMsg("STCSummaryOfThePeriod")_" "_(60*24/$GET(^Stc.Data.OrderNotification("maxCount"), 48))_" "_##class(Msg).GetMsg("Minute")
         
        if ($GET(^Stc.Data.OrderNotification("count"), 0) >= $GET(^Stc.Data.OrderNotification("maxCount"), 48)){
            set ^Stc.Data.OrderNotification("orders") = ""
            set ^Stc.Data.OrderNotification("students") = ""
            set ^Stc.Data.OrderNotification("count") = 0
            set subject = ##class(Msg).GetMsg("STCSummaryOfTheDay")
        } 
        
        set ^Stc.Data.OrderNotification("count") = $GET(^Stc.Data.OrderNotification("count"), 0) + 1
        
        set orders = ..GetNewOrders()
        set students = ..GetNewOrderStudents()
        
        set totalCount = orders.Count() + students.Count()
        if (totalCount > 0){
            set subject = subject_" "_##class(Msg).GetMsg("NewOrders")_": "_totalCount_"."
            set msg = ""
            
            if (orders.Count() > 0){
                set msg = ##class(Msg).GetMsg("NewOrdersForTraining")_" ("_orders.Count()_"):<br>"
                for i=1:1:orders.Count(){
                    set companyName = orders.GetAt(i).CompanyString
                    if (orders.GetAt(i).Company){
                        set companyName = orders.GetAt(i).Company.ShortName.Value
                    }
                    
                    set msg = msg_i_". "_$REPLACE($REPLACE(##class(Msg).GetMsg("FromOrganization"), "%Company.ShortName", companyName), "%Course.Name", orders.GetAt(i).Course.Name.Value)_"<br>"
                    set ^Stc.Data.OrderNotification("orders") = $GET(^Stc.Data.OrderNotification("orders"))_","_orders.GetAt(i).%Id()
                }
                
                set msg = msg_"<a href='http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/orders' target='_blank'>"_##class(Msg).GetMsg("GoToOrdersPage")_"</a><br><br>"
            }
            
            if (students.Count() > 0){
                set msg = msg_##class(Msg).GetMsg("NewOrdersToJoin")_" ("_students.Count()_"):<br>"
                for i=1:1:students.Count(){
                    
                    set msg = msg_i_". "_ $REPLACE($REPLACE($REPLACE(##class(Msg).GetMsg("FromStudent"), "%Student.FullName", students.GetAt(i).LastName.Value), "%Course.Name", students.GetAt(i).Training.Course.Name.Value), "%City.Name", students.GetAt(i).Training.City.Name.Value)
                    set msg = msg_". <a href='http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/training/"_students.GetAt(i).Training.%Id()_"' target='_blank'>"_##class(Msg).GetMsg("GoToTrainingPage")_"</a><br>"
                    set ^Stc.Data.OrderNotification("students") = $GET(^Stc.Data.OrderNotification("students"))_","_students.GetAt(i).%Id()
                }
            } 
            
            set emailList = $LISTFROMSTRING(##class(Stc.Data.Settings).GetMailingOperatorAddresses(), ",")
            set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
            for i=1:1:$LISTLENGTH(emailList){
                set email = $LIST(emailList, i)
                do ##class(Stc.Data.MailingJournal).Create(email, ##class(Msg).GetMsg("Operator"), subject, msg, ##class(Msg).GetMsg("Notification"), grNumber)
            }
        }
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        do ##class(Stc.Utils.Log).Create("Stc.Utils.TaskOperatorNotification Catch", $System.Status.GetErrorText(st))
    }
    
    job ##class(Stc.Data.MailingJournal).StartSending()
    
    quit st
]]></Implementation>
</Method>

<Method name="GetNewOrders">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set haveBeenNotifiedId = $LISTFROMSTRING($GET(^Stc.Data.OrderNotification("orders")), ",")
    
    set currTS = $ZDT($ZTS, 3)
    
    &sql(DECLARE Cur1 CURSOR FOR 
             SELECT ID
             FROM Stc_Data.Order
             WHERE OrderStatus->Code = 'New' AND {fn TIMESTAMPDIFF(SQL_TSI_HOUR, CreatedTS, :currTS)} <= 24)    
        
    &sql(OPEN Cur1)
    for{    
        &sql(FETCH Cur1 INTO :id) 
        quit:(SQLCODE '= 0)
        
        if ($LF(haveBeenNotifiedId, id) = 0){
            do list.Insert(##class(Stc.Data.Order).%OpenId(id))
        }       
    }
        
    &sql(CLOSE Cur1)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetNewOrderStudents">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set haveBeenNotifiedId = $LISTFROMSTRING($GET(^Stc.Data.OrderNotification("students")), ",")
    
    set currTS = $ZDT($ZTS, 3)
    &sql(DECLARE Cur2 CURSOR FOR 
             SELECT ID
             FROM Stc_Data.OrderNewStudent
             WHERE Training->IsCompleted = 0 AND {fn TIMESTAMPDIFF(SQL_TSI_HOUR, CreatedTS, :currTS)} <= 24)    
        
        
    &sql(OPEN Cur2)
    for{    
        &sql(FETCH Cur2 INTO :id) 
        quit:(SQLCODE '= 0)
        
        if ($LF(haveBeenNotifiedId, id) = 0){
            do list.Insert(##class(Stc.Data.OrderNewStudent).%OpenId(id))
        }       
    }
        
    &sql(CLOSE Cur2)
    
    quit list
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Utils.Utils">
<Abstract>1</Abstract>
<TimeCreated>63787,39933.86662</TimeCreated>

<Method name="GetLocalizeTextFromDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>date:%Date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..GetLocalizeTextFromTimeStamp($ZDT(date, 3))
]]></Implementation>
</Method>

<Method name="GetLocalizeTextFromTimeStamp">
<ClassMethod>1</ClassMethod>
<FormalSpec>ts:%TimeStamp,withQuotes=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set year = $E(ts, 1, 4)
    set month = +$E(ts, 6, 7)
    set day = $E(ts, 9, 10)
    
    set monthStr = ##class(Msg).GetMsg("Month#"_month)
    
    set curLang = $E($$$SessionLanguage, 1, 2)
    set result = ""
    if (curLang = "ru"){
        if (withQuotes){
            set day = "«"_day_"»"
            set year = year_" "_##class(Msg).GetMsg("yearShort")
        }
        
        set result = day_" "_monthStr_" "_year
    }
    else{
        set result = monthStr_" "_day_", "_year
    }
    
    set timePart = $P(ts, " ", 2)
    if (timePart '= ""){
        set result = result_" "_timePart
    }
    
    
    quit result
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.BrokerAdmin">
<Description>
Private request processor for administrator</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63098,81405.67207</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <!-- ================================================================================================================================== -->
    <!-- COURSE                                                                                                                      COURSE -->
    <!-- ================================================================================================================================== -->
    
    <!-- Save or create course -->
    <Route Method="POST" Url="/json/course" Call="Stc.Web.JsonAdmin:SaveCourse"/>
    
    <!-- Get course -->
    <Route Method="GET" Url="/json/course/:id" Call="Stc.Web.JsonAdmin:GetCourse"/> 
    
    <!-- Mark/unmark course as unused -->
    <Route Method="POST" Url="/json/course/:id/inverseStatus" Call="Stc.Web.JsonAdmin:ChangeCourseStatus"/> 
    
    <!-- Get all teachers of course -->
    <Route Method="GET" Url="/json/course/:courseId/teacher" Call="Stc.Web.JsonAdmin:GetCourseTeachers"/>
    
    <!-- Assign teacher to course -->
    <Route Method="POST" Url="/json/course/:courseId/teacher" Call="Stc.Web.JsonAdmin:CreateCourseTeacher"/>

    <!-- Delete teacher and course link -->
    <Route Method="DELETE" Url="/json/course/:courseId/teacher/:teacherId" Call="Stc.Web.JsonAdmin:DeleteCourseTeacher"/>
    
    
    <!-- ================================================================================================================================== -->
    <!-- APPLICATION (Order)                                                                                            APPLICATION (Order) -->
    <!-- ================================================================================================================================== -->

    <!-- Get all applications (or by status) -->
    <Route Method="POST" Url="/json/order/grid" Call="Stc.Web.JsonAdmin:GetOrdersForGrid"/>
    
    <!-- Get all applications - from students for given training -->
    <Route Method="POST" Url="/json/orderNewStudent/grid" Call="Stc.Web.JsonAdmin:GetOrdersNewStudentForGrid"/>
    
    <!-- Get application by id -->
    <Route Method="GET" Url="/json/order/:id" Call="Stc.Web.JsonAdmin:GetOrder"/>
    
    <!-- Get application from student by id -->
    <Route Method="GET" Url="/json/orderNewStudent/:id" Call="Stc.Web.JsonAdmin:GetOrderNewStudent"/>
    
    <!-- Change order status -->
    <Route Method="POST" Url="/json/order/:ordId/status/:status" Call="Stc.Web.JsonAdmin:ChangeOrderStatus"/>
    
    <!-- Delete application by id -->
    <Route Method="DELETE" Url="/json/order/:id" Call="Stc.Web.JsonAdmin:DeleteOrder"/>
    
    <!-- Delete application from student by id -->
    <Route Method="DELETE" Url="/json/orderNewStudent/:id" Call="Stc.Web.JsonAdmin:DeleteOrderNewStudent"/>
    
    <!-- Change organization in application -->
    <Route Method="POST" Url="/json/order/:orderId/company/:companyId" Call="Stc.Web.JsonAdmin:ChangeOrderCompany"/>
    
    <!-- Change organization in application from student-->
    <Route Method="POST" Url="/json/orderNewStudent/:orderId/company/:companyId" Call="Stc.Web.JsonAdmin:ChangeOrderNewStudentCompany"/>
    
    
    <!-- ================================================================================================================================== -->
    <!-- ORGANIZATION                                                                                                          ORGANIZATION -->
    <!-- ================================================================================================================================== -->
    
    <!-- Save new organization data -->
    <Route Method="POST" Url="/json/company" Call="Stc.Web.JsonAdmin:SaveCompany"/>
    
    <!-- Get organization by id -->
    <Route Method="GET" Url="/json/company/:id" Call="Stc.Web.JsonAdmin:GetCompany"/>   
    
    <!-- Delete organization if it is available -->
    <Route Method="DELETE" Url="/json/company/:id" Call="Stc.Web.JsonAdmin:DeleteCompany"/>
    
    <!-- Save organization from application -->
    <Route Method="POST" Url="/json/company/order" Call="Stc.Web.JsonAdmin:SaveCompanyFromOrder"/>
    
    <!-- Change contact person of organization -->
    <Route Method="POST" Url="/json/company/contact/change" Call="Stc.Web.JsonAdmin:ChangeCompanyContact"/>
    
    <!-- Create|replace contact person of organization -->
    <Route Method="POST" Url="/json/company/contact/new" Call="Stc.Web.JsonAdmin:CreateCompanyContact"/>
  
    <!-- Get all organizations for table, full info -->
    <Route Method="POST" Url="/json/company/grid" Call="Stc.Web.JsonAdmin:GetCompaniesFullInfoForGrid"/>
    


    <!-- ================================================================================================================================== -->
    <!-- TRAINING                                                                                                                  TRAINING -->
    <!-- ================================================================================================================================== -->
    
    <!-- Working with event in Google Calendar - create, update, delete -->
    <Route Method="POST" Url="/json/trainingEvent" Call="Stc.Web.JsonAdmin:TrainingCalendarEvent"/>
    
    <!-- Create training from selected applications, create/update subgroups -->
    <Route Method="POST" Url="/json/training" Call="Stc.Web.JsonAdmin:SaveTraining"/>   
    
    <!-- Delete training -->
    <Route Method="DELETE" Url="/json/training/:id" Call="Stc.Web.JsonAdmin:DeleteTraining"/>   
    
    <!-- Get training by id -->
    <Route Method="GET" Url="/json/training/:id" Call="Stc.Web.JsonAdmin:GetTraining"/> 
    
    <!-- Complete training and create certificates for each student -->
    <Route Method="POST" Url="/json/training/:id/complete" Call="Stc.Web.JsonAdmin:CompleteTraining"/>  
    
    <!-- Get all trainings for table -->
    <Route Method="POST" Url="/json/training/grid" Call="Stc.Web.JsonAdmin:GetTrainingsForGrid"/>   

    <!-- Change automail status for teacher -->
    <Route Method="POST" Url="/json/training/automailing/status" Call="Stc.Web.JsonAdmin:ChangeTrainingAutoMailingStatus"/>
    
    <!-- Get training email -->
    <Route Method="GET" Url="/json/training/:trainingId/mail/:type" Call="Stc.Web.JsonAdmin:GetTrainingEmail"/>
    
    <!-- Get mailing groups for combobox in the Mailing tab on training page -->
    <Route Method="GET" Url="/json/training/:id/mailing/group" Call="Stc.Web.JsonAdmin:GetTrainingMailingGroups"/>
    
    <!-- Send email from tab 'Mailing' on the training page -->
    <Route Method="POST" Url="/json/training/mail/send" Call="Stc.Web.JsonAdmin:SendEmailFromTraining"/>
    
    <!-- Get teacher payout for training -->
    <Route Method="GET" Url="/json/training/:trainingId/teacher/:teacherId/payout" Call="Stc.Web.JsonAdmin:GetTrainingTeacherPayout"/>
    
    <!-- ================================================================================================================================== -->
    <!-- TRAINING SUBGROUP                                                                                                TRAINING SUBGROUP  -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get subgroups of training -->
    <Route Method="POST" Url="/json/training/subgroup/grid" Call="Stc.Web.JsonAdmin:GetTrainingSubGroupsForGrid"/>  
    
    <!-- Add subgroup into training -->
    <Route Method="POST" Url="/json/training/:trainingId/subgroup" Call="Stc.Web.JsonAdmin:CreateSubGroup"/>    

    <!-- Get subgroup -->
    <Route Method="GET" Url="/json/training/subgroup/:subgroupId" Call="Stc.Web.JsonAdmin:GetSubGroup"/>    
    
    <!-- Delete subgroup from training -->
    <Route Method="DELETE" Url="/json/training/:trainingId/subgroup/:subgroupId" Call="Stc.Web.JsonAdmin:DeleteSubGroup"/>  
    
    <!-- Save pay of subgroup -->
    <Route Method="POST" Url="/json/training/subgroup/payment" Call="Stc.Web.JsonAdmin:SaveSubGroupPayment"/>
    
    <!-- Save contract of subgroup -->
    <Route Method="POST" Url="/json/training/subgroup/contract" Call="Stc.Web.JsonAdmin:SaveSubGroupContract"/> 
    
    
    
    <!-- ================================================================================================================================== -->
    <!-- TRAINING CERTIFICATE                                                                                          TRAINING CERTIFICATE  -->
    <!-- ================================================================================================================================== -->
    
    <!-- All certificates of training -->
    <Route Method="POST" Url="/json/training/certificate/grid" Call="Stc.Web.JsonAdmin:GetTrainingCertificatesForGrid"/>
    
    <!-- Create all certificates for training -->
    <Route Method="POST" Url="/json/training/:id/certificate" Call="Stc.Web.JsonAdmin:CreateTrainingCertificates"/>
    
    
    
    <!-- ================================================================================================================================== -->
    <!-- TRAINING STUDENT                                                                                                  TRAINING STUDENT -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get students of trainings -->
    <Route Method="POST" Url="/json/training/student/grid" Call="Stc.Web.JsonAdmin:GetTrainingStudentsForGrid"/>    

    <!-- Add person from application into training, create/open subgroup and add person -->
    <Route Method="POST" Url="/json/training/orderNewStudent" Call="Stc.Web.JsonAdmin:AddNewStudentIntoTraining"/>  

    <!-- All email's of students of training -->
    <Route Method="GET" Url="/json/training/:trainingId/student/email" Call="Stc.Web.JsonAdmin:GetTrainingStudentsEmails"/>
    
    <!-- Create / add student into subgroup|or not of training -->
    <Route Method="POST" Url="/json/training/student" Call="Stc.Web.JsonAdmin:CreateTrainingStudent"/>
    
    <!-- Delete student from subgroup -->
    <Route Method="DELETE" Url="/json/training/subgroup/:sgroupId/student/:studentId" Call="Stc.Web.JsonAdmin:DeleteSubGroupStudent"/>
    
    <!-- Delete student from training -->
    <Route Method="DELETE" Url="/json/training/:trainingId/student/:studentId" Call="Stc.Web.JsonAdmin:DeleteTrainingStudent"/>
    
    
    
    <!-- ================================================================================================================================== -->
    <!-- TRAINING FEEDBACK                                                                                                TRAINING FEEDBACK -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get feed Backs of trainings -->
    <Route Method="POST" Url="/json/training/feedback/grid" Call="Stc.Web.JsonAdmin:GetTrainingFeedBacksForGrid"/>  
    
    <!-- Delete feedback from training -->
    <Route Method="DELETE" Url="/json/training/feedback/:id" Call="Stc.Web.JsonAdmin:DeleteFeedBack"/>  

    
    
    <!-- ================================================================================================================================== -->
    <!-- CERTIFICATE                                                                                                            CERTIFICATE -->
    <!-- ================================================================================================================================== -->
        
    <!-- Get all certificates for table -->
    <Route Method="POST" Url="/json/certificate/grid" Call="Stc.Web.JsonAdmin:GetCertificatesForGrid"/>

    <!-- Print certificate -->
    <Route Method="POST" Url="/json/certificate/:number/print" Call="Stc.Web.JsonAdmin:PrintCertificate"/>  
    
    <!-- Delete certificate -->
    <Route Method="DELETE" Url="/json/certificate/:number" Call="Stc.Web.JsonAdmin:DeleteCertificate"/> 
    
    <!-- Send certificates to office -->
    <Route Method="POST" Url="/json/traiing/:id/certificate/sendToOffice" Call="Stc.Web.JsonAdmin:SendCertificatesToOffice"/> 
    
    <!-- ================================================================================================================================== -->
    <!-- PERSON                                                                                                                      PERSON -->
    <!-- ================================================================================================================================== -->
        
    <!-- Save/create person -->
    <Route Method="POST" Url="/json/person" Call="Stc.Web.JsonAdmin:SavePerson"/>
    
    <!-- Get person by id -->
    <Route Method="GET" Url="/json/person/:id" Call="Stc.Web.JsonAdmin:GetPerson"/>
    
    <!-- Get person by Email -->
    <Route Method="GET" Url="/json/person/email/:email" Call="Stc.Web.JsonAdmin:GetPersonByEmail"/>
    
    <!-- Delete person  -->
    <Route Method="DELETE" Url="/json/person/:id" Call="Stc.Web.JsonAdmin:DeletePerson"/>
    
    <!-- Get all persons for table -->
    <Route Method="POST" Url="/json/person/grid" Call="Stc.Web.JsonAdmin:GetPersonsForGrid"/>



    <!-- All students, search by last name and email -->
    <Route Method="GET" Url="/json/person/search/:word" Call="Stc.Web.JsonAdmin:GetPersonBySearchParameters"/>
                
    <!-- Search teachers, that don't teach selected course -->
    <Route Method="GET" Url="/json/person/free/course/:crsId/teacher/:word" Call="Stc.Web.JsonAdmin:GetFreeCourseTeachers"/>
    
    <!-- Search persons, that not in subgroup of trainings -->
    <Route Method="GET" Url="/json/person/free/subgroup/:sgId/student/:word" Call="Stc.Web.JsonAdmin:GetFreeSubGroupStudents"/>
    
    <!-- Search persons, that not in training -->
    <Route Method="GET" Url="/json/person/free/training/:trId/student/:word" Call="Stc.Web.JsonAdmin:GetFreeTrainingStudents"/>
    


    <!-- All trainings with person -->
    <Route Method="GET" Url="/json/person/:id/training" Call="Stc.Web.JsonAdmin:GetPersonTrainings"/>
    
    <!-- All certificates of person -->
    <Route Method="GET" Url="/json/person/:id/certificate" Call="Stc.Web.JsonAdmin:GetPersonCertificates"/>
    
    <!-- All courses, where person is teacher -->
    <Route Method="GET" Url="/json/person/:id/course" Call="Stc.Web.JsonAdmin:GetPersonCourses"/>
    
    <!-- All organizations, where person is contact person -->
    <Route Method="GET" Url="/json/person/:id/company" Call="Stc.Web.JsonAdmin:GetPersonCompanies"/>


    <!-- Get statistics data for teachern -->
    <Route Method="GET" Url="/json/teacher/:id/statistics/datefrom/:dateFrom/dateto/:dateTo" Call="Stc.Web.JsonAdmin:GetTeacherStatistics"/>

    <!-- ================================================================================================================================== -->
    <!-- SETTINGS                                                                                                                  SETTINGS -->
    <!-- ================================================================================================================================== -->

    <!-- Get settings for google api from globals -->
    <Route Method="GET" Url="/json/settings/google/:type" Call="Stc.Web.JsonAdmin:GetGoogleSettings"/>
    
    <!-- Save settings for google api from client -->
    <Route Method="POST" Url="/json/settings/google/:type" Call="Stc.Web.JsonAdmin:SaveGoogleSettings"/>
    
    
    <!-- Get settings for mail from globals -->
    <Route Method="GET" Url="/json/settings/mail/:type" Call="Stc.Web.JsonAdmin:GetMailSettings"/>
    
    <!-- Save settings for mail from client -->
    <Route Method="POST" Url="/json/settings/mail/:type" Call="Stc.Web.JsonAdmin:SaveMailSettings"/>
    

    <!-- Get preview of settings for mail from last training -->
    <Route Method="GET" Url="/json/settings/mail/preview/:type" Call="Stc.Web.JsonAdmin:GetMailPreview"/>
    
    <!-- Get preview of settings for google from last training -->
    <Route Method="GET" Url="/json/settings/google/preview/:type" Call="Stc.Web.JsonAdmin:GetGooglePreview"/>
    
    
    <!-- ================================================================================================================================== -->
    <!-- MAILING GROUPS AND ITEMS                                                                                  MAILING GROUPS AND ITEMS -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get mailing groups for table -->
    <Route Method="POST" Url="/json/mailing/group/grid" Call="Stc.Web.JsonAdmin:GetMailingGroupsForGrid"/>
    
    <!-- Save mailing group -->
    <Route Method="POST" Url="/json/mailing/group" Call="Stc.Web.JsonAdmin:SaveMailingGroup"/>

    <!-- Get mailing groups for combobox -->
    <Route Method="GET" Url="/json/mailing/group" Call="Stc.Web.JsonAdmin:GetMailingGroups"/>
    
    <!-- Get mailing group by ID -->
    <Route Method="GET" Url="/json/mailing/group/:id" Call="Stc.Web.JsonAdmin:GetMailingGroup"/>
    
    <!-- Get mailing group contacts by ID -->
    <Route Method="GET" Url="/json/mailing/group/:id/contact" Call="Stc.Web.JsonAdmin:GetMailingGroupContacts"/>
    
    <!-- Get mailing group mail by group ID -->
    <Route Method="GET" Url="/json/mailing/group/:id/mail" Call="Stc.Web.JsonAdmin:GetMailingGroupMail"/>
    
    <!-- Delete mailing group by ID -->
    <Route Method="DELETE" Url="/json/mailing/group/:id" Call="Stc.Web.JsonAdmin:DeleteMailingGroup"/>
    
    <!-- Get mailing items in the group for table  -->
    <Route Method="POST" Url="/json/mailing/group/item/grid" Call="Stc.Web.JsonAdmin:GetMailingGroupItemsForGrid"/>
    
    <!-- Save mailing item -->
    <Route Method="POST" Url="/json/mailing/group/item" Call="Stc.Web.JsonAdmin:SaveMailingItem"/>
    
    <!-- Get mailing item by ID -->
    <Route Method="GET" Url="/json/mailing/group/item/:id" Call="Stc.Web.JsonAdmin:GetMailingItem"/>
    
    <!-- Delete mailing item by ID -->
    <Route Method="DELETE" Url="/json/mailing/group/item/:id" Call="Stc.Web.JsonAdmin:DeleteMailingItem"/>
    
    <!-- Send mail to Mailing group items -->
    <Route Method="POST" Url="/json/mailing/mail/send" Call="Stc.Web.JsonAdmin:SendMailToMailingGroup"/>
    
    <!-- Get mailing journal -->
    <Route Method="POST" Url="/json/mailing/journal/grid" Call="Stc.Web.JsonAdmin:GetMailingJournalItemsForGrid"/>
    
    <!-- Get mailing journal parts -->
    <Route Method="POST" Url="/json/mailing/journal/parts/grid" Call="Stc.Web.JsonAdmin:GetMailingJournalPartsForGrid"/>
    
    
    <!-- Get current mailing status -->
    <Route Method="GET" Url="/json/mailing/status" Call="Stc.Web.JsonAdmin:GetMailingStatus"/>
    
    <!-- Change mailing status (on|off) -->
    <Route Method="POST" Url="/json/mailing/status/:status" Call="Stc.Web.JsonAdmin:ChangeMailingStatus"/>
    
    <!-- Delete mailing journal item -->
    <Route Method="DELETE" Url="/json/mailing/journal/:id" Call="Stc.Web.JsonAdmin:DeleteMailingJournalItem"/>
    
    <!-- Delete mailing journal part -->
    <Route Method="DELETE" Url="/json/mailing/journal/part/:groupNumber" Call="Stc.Web.JsonAdmin:DeleteMailingJournalPart"/>
    
    <!-- ================================================================================================================================== -->
    <!-- MAIL                                                                                                                          MAIL -->
    <!-- ================================================================================================================================== -->
    
    <!-- Send email -->
    <Route Method="POST" Url="/json/mail/send" Call="Stc.Web.JsonAdmin:SendEmail"/>
        
    <!-- Get email pattern from CacheMsg -->
    <Route Method="GET" Url="/json/mail/pattern/:type" Call="Stc.Web.JsonAdmin:GetEmailPattern"/>

    
    
    <!-- ================================================================================================================================== -->
    <!-- OTHER                                                                                                                        OTHER -->
    <!-- ================================================================================================================================== -->
    
    <!-- Check access, authorization call, if needed -->
    <Route Method="GET" Url="/json/checkAdmin/:isLogin" Call="Stc.Web.JsonAdmin:CheckAdmin"/>
        
    <!-- Report, certificates of training -->
    <Route Method="GET" Url="/text/:lang/certificates/:trainingId" Call="Stc.Web.Report:Certificates"/>

    <!-- All currencies -->
    <Route Method="GET" Url="/json/currency" Call="Stc.Web.JsonAdmin:GetCurrencies"/>
    
    <!-- All logs -->
    <Route Method="POST" Url="/json/log/grid" Call="Stc.Web.JsonAdmin:GetLogsForGrid"/>
    

</Routes>
]]></Data>
</XData>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "en":"en", :"ru")
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
  
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.BrokerUser">
<Description>
Public request processor for users</Description>
<Super>%CSP.REST</Super>
<TimeCreated>63098,81275.541503</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <!-- ================================================================================================================================== -->
    <!-- COURSE                                                                                                                      COURSE -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get short info about all courses -->
    <Route Method="GET"  Url="/json/course/isInUse/:isInUse" Call="Stc.Web.JsonUser:GetCoursesShortInfo"/>
    
    <!-- Get full info about all courses -->
    <Route Method="POST" Url="/json/course/grid" Call="Stc.Web.JsonUser:GetCoursesFullInfoForGrid"/>
    
    
    <!-- ================================================================================================================================== -->
    <!-- ORDER (Application)                                                                                                          ORDER -->
    <!-- ================================================================================================================================== -->

    
    <!-- Create application -->
    <Route Method="POST" Url="/json/order" Call="Stc.Web.JsonUser:CreateOrder"/>
    
    <!-- Create application for student -->
    <Route Method="POST" Url="/json/orderNewStudent" Call="Stc.Web.JsonUser:CreateOrderNewStudent"/>
    
    
    <!-- ================================================================================================================================== -->
    <!-- ORGANIZATION                                                                                                          ORGANIZATION -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get short info about all organization -->
    <Route Method="GET" Url="/json/company" Call="Stc.Web.JsonUser:GetCompaniesShortInfo"/>
    

    <!-- ================================================================================================================================== -->
    <!-- MAILING SUBSCRIPTION                                                                                          MAILING SUBSCRIPTION -->
    <!-- ================================================================================================================================== -->
    
    
    <!-- Create dirty mailing item -->
    <Route Method="POST" Url="/json/mailing/subscription" Call="Stc.Web.JsonUser:CreateMailingSubscription"/>
    
    <!-- Update approved mailing item by access code-->
    <Route Method="POST" Url="/json/mailing/subscription/:code" Call="Stc.Web.JsonUser:UpdateMailingSubscription"/>
    
    <!-- Remove approved mailing item by access code (unsubscribe)-->
    <Route Method="DELETE" Url="/json/mailing/subscription/:code" Call="Stc.Web.JsonUser:DeleteMailingSubscription"/>
    
    <!-- Get approved mailing item by access code-->
    <Route Method="GET" Url="/json/mailing/subscription/:code" Call="Stc.Web.JsonUser:GetMailingSubscription"/>
    
    <!-- Activate subscription, remove dirty and create approved mailing item -->
    <Route Method="POST" Url="/json/mailing/subscription/confirmation/:code" Call="Stc.Web.JsonUser:ConfirmMailingSubscription"/>
    
    <!-- ================================================================================================================================== -->
    <!-- FEEDBACK                                                                                                                  FEEDBACK -->
    <!-- ================================================================================================================================== -->
    
    <!-- Get feedback template for fill data -->
    <Route Method="GET" Url="/json/feedback/template" Call="Stc.Web.JsonUser:GetFeedBackTemplateForFill"/>
    
    <!-- ================================================================================================================================== -->
    <!-- OTHER                                                                                                                        OTHER -->
    <!-- ================================================================================================================================== -->
    
    <!-- Search cities -->
    <Route Method="GET" Url="/json/city/:startsWith" Call="Stc.Web.JsonUser:GetCities"/>
    
    <!-- Get training by id for public-->
    <Route Method="GET" Url="/json/training/:id" Call="Stc.Web.JsonUser:GetTraining"/>

    <!-- All training students for teacher view by access code -->
    <Route Method="POST" Url="/json/training/:code/student" Call="Stc.Web.JsonUser:GetTrainingStudents"/>

    <!-- All training orderstudents for teacher view by access code -->
    <Route Method="POST" Url="/json/training/:code/ordernewstudent" Call="Stc.Web.JsonUser:GetTrainingOrderNewStudents"/>
    
    <!-- Save feedback by access code -->
    <Route Method="POST" Url="/json/training/:id/feedback/:code" Call="Stc.Web.JsonUser:SaveTrainingFeedBack"/>
    
    <!-- Schedule, course and trainings -->
    <Route Method="GET" Url="/json/schedule" Call="Stc.Web.JsonUser:GetSchedule"/>
    
    <!-- Get feed Backs of trainings BY AccessCode-->
    <Route Method="POST" Url="/json/training/feedback/grid" Call="Stc.Web.JsonUser:GetTrainingFeedBacksForGridByAccessCode"/>   
    
    
    <!-- Report, students of training -->
    <Route Method="GET" Url="/text/:lang/students/:trainingAccessCode" Call="Stc.Web.Report:Students"/>
   
    <!-- Report, ordernewstudents of training -->
    <Route Method="GET" Url="/text/:lang/ordernewstudents/:trainingAccessCode" Call="Stc.Web.Report:OrderNewStudents"/> 
    
    <!-- Get feed Backs of trainings BY AccessCode-->
    <Route Method="POST" Url="/json/training/:id/question" Call="Stc.Web.JsonUser:CreateTrainingQuestion"/>   
    
    <!-- Update training students attended state BY AccessCode-->
    <Route Method="POST" Url="/json/training/:trainingAccessCode/student/udpateStatus" Call="Stc.Web.JsonUser:UpdateTrainingStudentAttendedStatus"/>   
    
     <!-- Report, certificates of training -->
    <Route Method="GET" Url="/text/:lang/certificates/:trainingAccessCode" Call="Stc.Web.Report:Certificates"/>
    
</Routes>
]]></Data>
</XData>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), "en":"en", :"ru")
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    //---
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.ChangeLang">
<Description>
Данная страница предназначена для смены языка сессии.
Столкнулся с такой проблемой: при загр. страницы с iframe панелью deepsee отображался внутри другой язык,
т.е. deepSee не знает что язык сменен (хотя я в брокере каждый раз язык устанавливаю).
Данный костыль подгружается перед загрузкой панели deepsee, меняет язык - и всё вроде бы хорошо.</Description>
<Super>%CSP.Page</Super>
<TimeCreated>63260,55155.894579</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set lang = $Get(%request.Data("Lang",1),"ru")
	do ##class(%MessageDictionary).SetSessionLanguage(lang)
	set %session.Language = lang
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.Event">
<Super>%CSP.SessionEvents</Super>
<TimeCreated>63505,43004.251434</TimeCreated>

<Method name="OnStartSession">
<Description><![CDATA[
Called when a new session is created and its values are initialised.
<p>This is called before the license for this session is allocated, and if
you wish to abort this session and return the standard out of licenses error
page then:
<example>
Set %session.EndSession=1
</example>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try { s x=$system.License.PublicWebAppUser() } catch { /* log error */ }
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.ImportMailingItems">
<Super>%CSP.Page</Super>
<TimeCreated>63389,2455.997366</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html><head></head><body style='font-family: Helvetica,Arial,sans-serif; font-size: 14px; line-height: 20px; color: #333; margin: 0;'>>
	
	set result = ##class(%ZEN.proxyObject).%New()
	set result.success = 0
	set result.errorMessages = ##class(%ListOfObjects).%New()
	
	try{
		TSTART
		
		set fileName = %request.MimeData("FileStream", 1).FileName
		set streamTemp = %request.MimeData("FileStream", 1)
		set stream = ##class(%CSP.CharacterStream).%New()
		
		while 'streamTemp.AtEnd {
			set line = streamTemp.Read()
			if ($FIND(line, $C(13)_$C(10)) = 0){
				set line = $REPLACE(line, $C(13), $C(13)_$C(10))
			}
			
			do stream.Write(line)
		}
		
		kill streamTemp
		
		set group = ##class(Stc.Data.MailingGroup).%OpenId(%request.Get("groupId")).ConvertToProxyObject()
		
		set count = 0
		while 'stream.AtEnd {
			set line = stream.ReadLine()
			set count = count + 1
			
			set line = $REPLACE(line, ",", ";")
			if ($FIND(line,";") = 0) continue
			
			set propList = $LISTFROMSTRING(line, ";")
			
			set data = ##class(%ZEN.proxyObject).%New()
			set data.fullName = $LIST(propList,1)
			set data.email = $LIST(propList,2)
			set data.city = $LISTGET(propList,3)
			set data.company = $LISTGET(propList,4)
			set data.position = $LISTGET(propList,5)
			set data.group = group
			
			set existsApprovedId = ""
			&sql(SELECT ID INTO :existsApprovedId FROM Stc_Data.MailingItemApprovedSubscriber WHERE MGroup = :group.id AND Email = :data.email)
			set data.id = existsApprovedId
			
			do ##class(Stc.Data.MailingItemApproved).Save(data, .st)
			
			if $$$ISOK(st){
				set result.success = result.success + 1
			}
			else{
				set error = ##class(%ZEN.proxyObject).%New()
				set error.status = $system.Status.GetErrorText(st)
				set error.line = line
				do result.errorMessages.Insert(error)
			}
		}
		
		TCOMMIT
	}catch(ex){
		TROLLBACK
		set st = ex.AsStatus()	
	}

	w "Записей импортировано успешно: "_result.success
	
	if (result.errorMessages.Count() '= 0){
		w "<br><br>Список ошибочных записей("_result.errorMessages.Count()_"): "
		for i=1:1:result.errorMessages.Count(){
			w "<br>"_i_". "_$ZCVT(result.errorMessages.GetAt(i).line, "I", "UTF8")
			w "<br>"_result.errorMessages.GetAt(i).status
			w "<br>"
		}
	}
	
	if $$$ISERR(st){
		w "<br>"_st
	}
	
	&html<</body></html>>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.Json">
<Description>
Base class for JSON</Description>
<TimeCreated>63099,7625.766078</TimeCreated>

<Method name="GetProxyObject">
<Description>
Get proxyObject by id and class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,id:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ""
    
    try{
        set obj = $CLASSMETHOD(className, "%OpenId", id)
        set proxy = obj.ConvertToProxyObject()
    }
    catch (ex){
        set proxy = ##class(%ZEN.proxyObject).%New()
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="WriteJsonFromSql">
<Description>
Transform sql to json</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,300)
    }
    catch ex{
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="WriteJsonForGrid">
<Description>
Paged output of table, for any class with parameters, sorting and searching</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String,className:%String,params:%RegisteredObject,whereRequired:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        set proxyResult = ..GetJsonForGrid(sql, className, params, whereRequired, .status)
        $$$THROWONERROR(status, status)
        
        do proxyResult.%ToJSON()
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="GetJsonForGrid">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sql:%String,className:%String,params:%RegisteredObject,whereRequired:%String="",&status:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    set proxyResult = ##class(%ZEN.proxyObject).%New()
            
    try{
        // Определяем что находится в WHERE.
        if (whereRequired = "") && (params.searchText '= ""){
            // Одно условие - поиск
            set sql = sql_" WHERE "_..ParseParameter(params.searchSqlName)_" LIKE '%"_..ParseParameter($ZCONVERT(params.searchText, "I","UTF8"))_"%'"
        }
        elseif (whereRequired '= "") && (params.searchText = ""){
            // Одно условие - заданное, например - выборка по статусу
            set sql = sql_" WHERE "_whereRequired
        }
        elseif (whereRequired '= "") && (params.searchText '= ""){
            // Два(+) условия = поиск и дополнительные
            set sql = sql_" WHERE "_whereRequired_" AND "_..ParseParameter(params.searchSqlName)_" LIKE '%"_..ParseParameter($ZCONVERT(params.searchText, "I","UTF8"))_"%'"
        }
        
        // Сортировка
        set isDown = "ASC"
        if (params.isDown '= 1) set isDown = "DESC"
        
        set sql = sql_" ORDER BY "_..ParseParameter(params.sqlName)_" "_isDown
        
        set ^temp("sql") = sql
            
        set statement = ##class(%SQL.Statement).%New()  
        $$$THROWONERROR(status, statement.%Prepare(sql))        
        set rs = statement.%Execute()

        set proxyItems = ##class(%ListOfObjects).%New()         
        
        // Все элементы, попавшие в заданный диапазон конвертируются в proxy и помещаются в результирующий список
        while (rs.%Next() '= 0){
            if (rs.%ROWCOUNT >= params.first) && (rs.%ROWCOUNT <= params.last){
                do proxyItems.Insert(..GetProxyObject(className, rs.%GetData(1)))
            }
        }
        // Общее число элементов с заданными параметрами в WHERE
        set itemsTotal = rs.%ROWCOUNT
        
        do rs.%Close()                      
        do statement.%Close()
        

        set proxyResult.children = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children.items = proxyItems
        set proxyResult.children.itemsTotal = itemsTotal
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    quit proxyResult
]]></Implementation>
</Method>

<Method name="ParseParameter">
<Description>
Delete "garbage" from input parameters</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>parameter:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set parameter = $ZCONVERT(parameter, "U")
    
    quit $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(parameter, "SELECT",""), "DELETE", ""), "UNION", ""), "FROM",""), "INSERT", ""), "'", "")
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.JsonAdmin">
<Description>
Handling of BrokerAdmin</Description>
<Super>Json</Super>
<TimeCreated>63098,81450.05769</TimeCreated>

<Method name="SaveCourse">
<Description>

==========================================================================================================================
COURSE                                                                                                              COURSE 
==========================================================================================================================

Save or create course
Method="POST" Url="/json/course"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Stc.Data.Course).Save(data, .st)
        
        if $$$ISERR(st){ 
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createCourse", :"saveCourse"), "| "_st)) 
        }
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) {
        do ##class(Stc.Data.Training).BuildCubes()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCourse">
<Description>
Get course
Method="GET" Url="/json/course/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.Course", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ChangeCourseStatus">
<Description>
Mark/unmark course as unused
Method="POST" Url="/json/course/:id/inverseStatus"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
                
        set course = ##class(Stc.Data.Course).%OpenId(id)
        set course.IsInUse = 'course.IsInUse
        set st = course.%Save()
        if $$$ISERR(st) {
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", "| "_st))
        }
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCourseTeachers">
<Description>
Get all teachers of course
Method="GET" Url="/json/course/:courseId/teacher"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT Teachers As id, "_
    "Teachers->LastName->Value As lastName, "_
    "Teachers->FirstName->Value As firstName, "_
    "Teachers->MiddleName->Value As middleName, "_
    "Teachers->Email As email, "_
    "Teachers->Phone As phone, "_
    "Teachers->Skype As skype, "_
    "Teachers->Company->ShortName->Value As company "_
    "FROM Stc_Data.Course_Teachers "_
    "WHERE Course = "_..ParseParameter(courseId)_" "_
    "ORDER BY  lastName"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="CreateCourseTeacher">
<Description>
Assign teacher to course
Method="POST" Url="/json/course/:courseId/teacher"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        
        if (data.teacher.id){
            // Добовляем существующего
            set teacher = ##class(Stc.Data.Person).%OpenId(data.teacher.id,,.st)
            $$$THROWONERROR(st, st)
        }
        else{
            // Создаем
            set teacher = ##class(Stc.Data.Person).Save(data.teacher, .st)  
            if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createPerson", "| "_st))
        }
        
        set course = ##class(Stc.Data.Course).%OpenId(courseId,, .st)
        $$$THROWONERROR(st, st)
        
        $$$THROWONERROR(st, course.Teachers.SetAt(teacher, teacher.%Id()))
        
        set st = course.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", "| "_st))
         
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteCourseTeacher">
<Description>
Delete teacher and course link
Method="DELETE" Url="/json/course/:courseId/teacher/:teacherId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseId,teacherId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set course = ##class(Stc.Data.Course).%OpenId(courseId,,.st)
        $$$THROWONERROR(st, st)
        do course.Teachers.RemoveAt(teacherId)
        
        set st = course.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCourse", " | "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetOrdersForGrid">
<Description>

==========================================================================================================================
ORDER                                                                                                                ORDER 
==========================================================================================================================

Get all applications (or by status)
Method="POST" Url="/json/order/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = ""
        if (params.status '= "All"){
            set whereRequired = "OrderStatus->Code = '"_..ParseParameter(params.status)_"'"
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Order", "Stc.Data.Order", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetOrdersNewStudentForGrid">
<Description>
Get all applications - from students for given training
Method="POST" Url="/json/orderNewStudent/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.OrderNewStudent", "Stc.Data.OrderNewStudent", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetOrder">
<Description>
Get not approved application by id
Method="GET" Url="/json/order/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.Order", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOrderNewStudent">
<Description>
Get application from student by id
Method="GET" Url="/json/orderNewStudent/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.OrderNewStudent", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ChangeOrderStatus">
<Description>
Create approved application
Method="POST" Url="/json/order/:id/status/:status"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>orderId:%String,orderStatus:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set order = ##class(Stc.Data.Order).%OpenId(orderId)
        if (orderStatus = "approved"){
            set order.OrderStatus = ##class(Stc.Data.OrderStatus).CodeIdxOpen("Approved")
            set mail = ##class(Stc.Utils.Email).GetMailForOrderApply(order)
            do ##class(Stc.Data.MailingJournal).Create(order.Email, order.LastName_" "_order.FirstName, mail.subject, mail.message, "Одобрение заявки", ##class(Stc.Data.MailingJournal).GetValidGroupNumber())
        }
        elseif (orderStatus = "closed"){
            set order.OrderStatus = ##class(Stc.Data.OrderStatus).CodeIdxOpen("Closed")
        }
        
        set st = order.%Save()
        $$$THROWONERROR(st, st)
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }

    do ##class(Stc.Data.Order).SynchronizeCube()
    
    job ##class(Stc.Data.MailingJournal).StartSending()
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteOrder">
<Description>
Delete application by id
Method="DELETE" Url="/json/order/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(Stc.Data.Order).%DeleteId(id))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    do ##class(Stc.Data.Order).SynchronizeCube()
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteOrderNewStudent">
<Description>
Delete application from student by id
Method="DELETE" Url="/json/orderNewStudent/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(Stc.Data.OrderNewStudent).Delete(id))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="ChangeOrderCompany">
<Description>
Change organization in application
Method="POST" Url="/json/order/:orderId/company/:companyId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>orderId:%String,companyId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set order = ##class(Stc.Data.Order).%OpenId(orderId,,.st)
        $$$THROWONERROR(st, st)
        
        set order.Company = ##class(Stc.Data.Company).%OpenId(companyId,,.st)
        $$$THROWONERROR(st, st)
        
        $$$THROWONERROR(st, order.%Save())
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="ChangeOrderNewStudentCompany">
<Description>
Change organization of application from student
Method="POST" Url="/json/orderNewStudent/:orderId/company/:companyId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>orderId:%String,companyId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set order = ##class(Stc.Data.OrderNewStudent).%OpenId(orderId,,.st)
        $$$THROWONERROR(st, st)
        
        set order.Company = ##class(Stc.Data.Company).%OpenId(companyId,,.st)
        $$$THROWONERROR(st, st)
        
        $$$THROWONERROR(st, order.%Save())
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveCompany">
<Description>

==========================================================================================================================
ORGANIZATION                                                                                                  ORGANIZATION 
==========================================================================================================================

Save new organization data
Method="POST" Url="/json/company</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set company = ##class(Stc.Data.Company).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompany", "| "_st))     
        
        do company.ConvertToProxyObject(1).%ToJSON()
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }

    if (st = $$$OK) do ##class(Stc.Data.Training).BuildCubes()

    quit st
]]></Implementation>
</Method>

<Method name="GetCompany">
<Description>
Get organization by id
Method="GET" Url="/json/company/:id" </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..GetProxyObject("Stc.Data.Company", id).%ToJSON()
]]></Implementation>
</Method>

<Method name="DeleteCompany">
<Description>
Delete organization if it is available
Method="DELETE" Url="/json/company/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(Stc.Data.Company).Delete(id))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }

    if (st = $$$OK) {
        do ##class(Stc.Data.Training).BuildCubes()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveCompanyFromOrder">
<Description>
Save organization from application
Method="POST" Url="/json/company/order"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        // Создание компании
        set company = ##class(Stc.Data.Company).Save(data.company, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompany", "| "_st)) 
        
        // Создание контакта компании
        set data.company.contact.company = ##class(%ZEN.proxyObject).%New()
        set data.company.contact.company.id = company.%Id()
        set data.company.contact.id = $$$NULLOREF
            
        set company.Contact = ##class(Stc.Data.Person).Save(data.company.contact, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCompanyContact", " | "_st))
        
        set st = company.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany", " | "_st))
        
        // Теперь у новой заявки есть компания
        if (data.isOrder){
            set order = ##class(Stc.Data.Order).%OpenId(data.orderId)
        }
        else{
            set order = ##class(Stc.Data.OrderNewStudent).%OpenId(data.orderId)
        }
            
        set order.Company = company
        
        set st = order.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveDirtyOrder", " | "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="ChangeCompanyContact">
<Description>
Change contact person of organization
Method="POST" Url="/json/company/contact/change"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set company = ##class(Stc.Data.Company).%OpenId(data.companyId,3, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openCompany", "| "_st))
        
        // Если замена контакта, иначе обновление данных
        if (data.isReplace = 1){
            // Если существует такой контакт, то заменяем им. Иначе - создаем и заменяем
            if (##class(Stc.Data.Person).EmailIdxExists(data.contact.email) = 1){
                set newContact = ##class(Stc.Data.Person).EmailIdxOpen(data.contact.email,,.st)
                if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openPerson", "| "_st))            
            }
            else{
                set newContact = ##class(Stc.Data.Person).Save(data.contact, .st)
                if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("savePerson", "| "_st))
            }
            
            set company.Contact = newContact
        }
        else{
            set order = ##class(Stc.Data.Order).%OpenId(data.orderId,3,.st)
            if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openOrder", "| "_st))
            
            set company.Contact.LastName.Value = order.LastName
            set company.Contact.FirstName.Value = order.FirstName
            set company.Contact.MiddleName.Value = order.MiddleName
            set company.Contact.Email = $ZCONVERT(order.Email, "I","UTF8")
            set company.Contact.Phone = $ZCONVERT(order.Phone, "I","UTF8")
            set company.Contact.Skype = $ZCONVERT(order.Skype, "I","UTF8")
            set st = company.Contact.%Save()
            
            if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("savePerson", "| "_st))
        }
        
        set st = company.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveCompany", "| "_st))
            
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="CreateCompanyContact">
<Description><![CDATA[
Create|replace contact person of organization
Method="POST" Url="/json/company/contact/new"/>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set company = ##class(Stc.Data.Company).%OpenId(data.companyId,,.st)
        $$$THROWONERROR(st, st)
        
        set person = ##class(Stc.Data.Person).EmailIdxOpen(data.email)
        if $ISOBJECT(person) = $$$NO {
            set person = ##class(Stc.Data.Person).Save(data, .st)
            $$$THROWONERROR(st, st)    
        }
       
        set company.Contact = person
       
        set st = company.%Save()
       
        $$$THROWONERROR(st, st)
            
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCompaniesFullInfoForGrid">
<Description>
Get all organizations for table, full info
Method="POST" Url="/json/company/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = ""
        if (params.status=1){
            set whereRequired = "Type->Code = 'Univer'"
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Company", "Stc.Data.Company", params, whereRequired))
    
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="TrainingCalendarEvent">
<Description>

==========================================================================================================================
TRAINING                                                                                                          TRAINING 
==========================================================================================================================

Working with event in Google Calendar - create, update, delete
Method="POST" Url="/json/trainingEvent"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        if (data.method '= "get"){
            // Check privilege for Person table
            $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        }
        
        set training = ##class(Stc.Data.Training).%OpenId(data.id,,.st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_st))
    
        set calendarId = ##class(Stc.Data.Settings).GetGoogleCalendarID()
        set sslConfig = ##class(Stc.Data.Settings).GetGoogleSSLConfig()
        set rtoken = ##class(Stc.Data.Settings).GetGoogleRefreshToken()
        
        do ##class(Stc.Google.Authorize).ExchangeToken(rtoken, .stToken, .atoken)
        if (stToken '= "success") $$$ThrowStatus($$$ERROR(5002, "Exchange token error: "_stToken))
    
        if (data.method = "get"){
            // Получить событие
            set event = ##class(%ZEN.proxyObject).%New()
            set proxy = ##class(%ZEN.proxyObject).%New()
            set proxy.id = training.%Id()
            
            if (training.CalendarEvent = ""){
                // Если еще не было создано, то выводим данные из обучения
                set event.summary = training.Course.Name.Value_". "_training.City.Name.Value
                set event.start = ##class(%ZEN.proxyObject).%New()
                set event.start.date = $zd(training.DateStart,3)
                set event.end = ##class(%ZEN.proxyObject).%New()
                set event.end.date = $zd(training.DateFinish+1,3)
                set event.location = training.City.Name.Value_", "_training.Street.Value
                set event.description = ##class(Stc.Data.Training).GetCalendarEventDescription(training)    
            }
            else{
                // Получаем созданное
                $$$TOE(st, ##class(Stc.Google.Calendar).GetEvent(calendarId, training.CalendarEvent,.eventObj, atoken, sslConfig))
                
                set event.summary = $ZCONVERT(eventObj.summary, "I", "UTF8")
                set event.location = $ZCONVERT(eventObj.location, "I", "UTF8")
                set event.description = $ZCONVERT(eventObj.description, "I", "UTF8")
                set event.start = eventObj.start
                set event.end = eventObj.end
                set event.exists = 1
            }
                
            set proxy.event = event
            do proxy.%ToJSON()
        }
        elseif (data.method = "create"){
            set data.event.summary = data.event.summary
            set data.event.location = data.event.location
            set data.event.description = data.event.description
            
            $$$TOE(st, ##class(Stc.Google.Calendar).CreateEvent(calendarId, data.event, atoken, sslConfig, .eventId))
            set training.CalendarEvent = eventId
            do training.%Save()
        }
        elseif (data.method = "update"){
            $$$TOE(st, ##class(Stc.Google.Calendar).ModifyEvent(calendarId, training.CalendarEvent, data.event, atoken, sslConfig))
        }
        elseif (data.method = "delete"){
            set eventId = training.CalendarEvent
            set training.CalendarEvent = ""
            do training.%Save()
            $$$TOE(st, ##class(Stc.Google.Calendar).DeleteEvent(calendarId, eventId, atoken, sslConfig))
        }
    }
    catch (ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveTraining">
<Description>
Create training from selected applications, create/update subgroups
Method="POST" Url="/json/training"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    set isNew = $$$NO
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        set tr = ##class(Stc.Data.Training).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createTraining",:"saveTraining"), " | "_st)) 
        if (data.id = ""){
            set isNew = $$$YES
            do ##class(Stc.Data.MailingTrainingGroup).CreateAll(tr)
        }
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.id = tr.%Id()
        do proxy.%ToJSON()
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (isNew = 1){
        do ##class(Stc.Data.Training).BuildCubes()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteTraining">
<Description>
Delete training
Method="DELETE" Url="/json/training/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set (sgroups, certs) = 0
        
        &sql(SELECT COUNT(ID) INTO :sgroups FROM Stc_Data.Training_SubGroups WHERE Training = :id)
        
        if (sgroups = 0){
            &sql(SELECT COUNT(ID) INTO :certs FROM Stc_Data.Certificate WHERE Training = :id)
        }
        
        if (sgroups > 0) || (certs > 0) {
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteTrainingImpossible"))
        }
        
        set SQLCODE = ""
        &sql(DELETE FROM Stc_Data.MailingTrainingGroup WHERE Training = :id)
        
        if (SQLCODE '= 0) && (SQLCODE '= 100){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("DeleteMailingTrainingGroupError", " SQLCODE="_SQLCODE))
        }   
        
        set st = ##class(Stc.Data.Training).Delete(id)
        
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteTraining", "| "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK){
        do ##class(Stc.Data.Training).BuildCubes()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTraining">
<Description>
Get training by id
Method="GET" Url="/json/training/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..GetProxyObject("Stc.Data.Training", id).%ToJSON()
]]></Implementation>
</Method>

<Method name="CompleteTraining">
<Description>
Complete training and create certificates for each student
Method="POST" Url="/json/training/:id/complete"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set training = ##class(Stc.Data.Training).%OpenId(trId,,.st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_st)) 
        
        set training.IsCompleted = $$$YES
        set st = training.%Save()
        
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_st)) 
        
        if (training.IsCompleted){
            // Создать сертификаты для каждого студента из каждой подгруппы в обучении
            set st = training.CreateCertificates()
            if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCertificate", "| "_st)) 
        }
        
        // Close orders
        do ##class(Stc.Data.Order).CloseOrdersByTraining(training.%Id()) 
        
        set trId = training.%Id() 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) {
        do ##class(Stc.Data.Order).SynchronizeCube()
        do ##class(Stc.Data.Training).UpdateFacts(trId)
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingsForGrid">
<Description>
Get all trainings for table
Method="POST" Url="/json/training/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
                
        set whereRequired = ""
        if (params.other.status = "completed"){
            set whereRequired = " AND IsCompleted = 1 "
        }
        elseif (params.other.status = "not-completed"){
            set whereRequired = whereRequired_" AND IsCompleted = 0 "
        }
        
        if (params.other.certStatus = "done"){
            set whereRequired = whereRequired_" AND IsCertificatesDone = 1 "
        }
        elseif (params.other.certStatus = "not-done"){
            set whereRequired = whereRequired_" AND IsCertificatesDone = 0 "
        }
        
        // without " AND"
        set whereRequired = $E(whereRequired, 5, *)
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Training", "Stc.Data.Training", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="ChangeTrainingAutoMailingStatus">
<Description>
Change automailing property (students, feedback...)
Method="POST" Url="/json/training/automailing/status"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set training = ##class(Stc.Data.Training).%OpenId(data.id)
        if (data.groupId = "students"){
            set training.IsStudentsAutoMailing = data.isAutoMailing
        }
        elseif (data.groupId = "teacher"){
            set training.IsTeacherAutoMailing = data.isAutoMailing
        }
        elseif (data.groupId = "curator"){
            set training.IsCuratorAutoMailing = data.isAutoMailing
        }
        elseif (data.groupId = "feedback"){
            set training.IsFeedBackAutoMailing = data.isAutoMailing
        }
        elseif (data.groupId = "orders"){
            set training.IsOrdersAutoMailing = data.isAutoMailing
        }
        else{
            set mgroup = ##class(Stc.Data.MailingTrainingGroup).CommonIdxOpen(training.%Id(), data.groupId,,.st)
            if $$$ISOK(st){
                set mgroup.IsAutoMailing = data.isAutoMailing
                set st = mgroup.%Save()
                if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTrainingMailingGroup", " | "_st))
            }
        }
        
        set st = training.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", " | "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SendEmailFromTraining">
<Description>
Send email from tab 'Mailing' on the training page
Method="POST" Url="/json/training/mail/send"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        set data.subject = $ZCVT(data.subject, "I", "UTF8")
        set data.message = $ZCVT(data.message, "I", "UTF8")
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        
        if (data.isSubscribers){
            for i=1:1:data.contacts.Count(){
                set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(data.contacts.GetAt(i).id)
                if $ISOBJECT(mItem){
                    set msg = $REPLACE(data.message, "%AccessCode", $system.Encryption.Base64Encode(mItem.AccessCode))
                    do ##class(Stc.Data.MailingJournal).Create(mItem.Email,  mItem.FullName, data.subject, msg, "ГР: "_mItem.MGroup.Name, grNumber)
                }
                else{
                    do ##class(Stc.Data.MailingJournal).Create(data.contacts.GetAt(i).email,"", data.subject, data.message, ##class(Stc.Utils.Msg).GetMsg("MailingFromTraining"), grNumber)
                }
            }
        }
        else{
            for i=1:1:data.contacts.Count(){
                do ##class(Stc.Data.MailingJournal).Create(data.contacts.GetAt(i).email, $ZCVT(data.contacts.GetAt(i).name, "I", "UTF8"), data.subject, data.message, ##class(Stc.Utils.Msg).GetMsg("MailingFromTraining"), grNumber)
            }
        }
        
        job ##class(Stc.Data.MailingJournal).StartSending()
    }
    catch (ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingEmail">
<Description>
Get email pattern from ^CacheMsg
Method="GET" Url="/json/training/:trainingId/mail/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String,type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set tr = ##class(Stc.Data.Training).%OpenId(trainingId)
    
    if (type = "students"){
        quit ##class(Stc.Utils.Email).GetMailForStudents(tr).%ToJSON()
    }
    elseif (type = "teacher"){
        quit ##class(Stc.Utils.Email).GetMailForTeacher(tr).%ToJSON()
    }
    elseif (type = "curator"){
        quit ##class(Stc.Utils.Email).GetMailForCurator(tr).%ToJSON()
    }
    elseif (type = "feedback"){
        quit ##class(Stc.Utils.Email).GetMailForFeedBack(tr).%ToJSON()
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTrainingMailingGroups">
<Description>
Get mailing groups for combobox in the Mailing tab on training page
Method="GET" Url="/json/training/:id/mailing/group"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{        
        set tr = ##class(Stc.Data.Training).%OpenId(trId)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.mGroups = ##class(%ListOfObjects).%New()
        
        set teacherEmail = ##class(%ZEN.proxyObject).%New()
        set teacherEmail.id = tr.%Id()_"T"
        set teacherEmail.name = tr.Teacher.FullName
        set teacherEmail.email = tr.Teacher.Email
        
        set curatorEmail = ##class(%ZEN.proxyObject).%New()
        set curatorEmail.id = tr.%Id()_"C"
        set curatorEmail.name = tr.CuratorFullName.Value
        set curatorEmail.email = tr.CuratorEmail
        
        set studentsContacts = ##class(Stc.Data.Training).GetStudentsContacts(tr.%Id())
        
        
        // Students
        set grStudents = ##class(%ZEN.proxyObject).%New()
        set grStudents.id = "students"
        set grStudents.name = ##class(Stc.Utils.Msg).GetMsg("StudentsRemainder")
        set grStudents.mailingIsCompleted = $$$NO
        set grStudents.isAutoMailing = tr.IsStudentsAutoMailing
        set grStudents.mail = ##class(Stc.Utils.Email).GetMailForTrainingStudents(tr)  
        set grStudents.contacts = studentsContacts
        do proxy.mGroups.Insert(grStudents)
        
        
        // FeedBack
        set grFeedBack = ##class(%ZEN.proxyObject).%New()
        set grFeedBack.id = "feedback"
        set grFeedBack.name = ##class(Stc.Utils.Msg).GetMsg("StudentsAccessToFeedBack")
        set grFeedBack.mailingIsCompleted = $$$NO
        set grFeedBack.isAutoMailing = tr.IsFeedBackAutoMailing
        set grFeedBack.mail = ##class(Stc.Utils.Email).GetMailForTrainingFeedBack(tr)
        set grFeedBack.contacts = studentsContacts
        do proxy.mGroups.Insert(grFeedBack)
        
        
        // Curator
        set grCurator = ##class(%ZEN.proxyObject).%New()
        set grCurator.id = "curator"
        set grCurator.name = ##class(Stc.Utils.Msg).GetMsg("CuratorListOfStudents")
        set grCurator.mailingIsCompleted = $$$NO
        set grCurator.isAutoMailing = tr.IsCuratorAutoMailing
        set grCurator.mail = ##class(Stc.Utils.Email).GetMailForTrainingCurator(tr)
        set grCurator.contacts = ##class(%ListOfObjects).%New()
        do grCurator.contacts.Insert(curatorEmail)
        do proxy.mGroups.Insert(grCurator)
        
        
        // Teacher
        set grTeacher = ##class(%ZEN.proxyObject).%New()
        set grTeacher.id = "teacher"
        set grTeacher.name = ##class(Stc.Utils.Msg).GetMsg("TeacherListOfStudents")
        set grTeacher.mailingIsCompleted = $$$NO
        set grTeacher.isAutoMailing = tr.IsTeacherAutoMailing
        set grTeacher.mail = ##class(Stc.Utils.Email).GetMailForTrainingTeacher(tr)
        set grTeacher.contacts = ##class(%ListOfObjects).%New()
        do grTeacher.contacts.Insert(teacherEmail)
        do proxy.mGroups.Insert(grTeacher)
        
        
        // Insert mailing group for orders
        set grOrders = ##class(%ZEN.proxyObject).%New()
        set grOrders.id = "orders"
        set grOrders.name = ##class(Stc.Utils.Msg).GetMsg("OrdersLinkForRegistration")
        set grOrders.mailingIsCompleted = $$$NO
        set grOrders.isAutoMailing = tr.IsOrdersAutoMailing
        set grOrders.mail = ##class(Stc.Utils.Email).GetMailForTrainingOrders(tr)
        set grOrders.contacts = ##class(Stc.Data.Order).GetContactsForCourse(tr.Course.%Id())
        do proxy.mGroups.Insert(grOrders)
        
        
        &sql(DECLARE MGCur CURSOR FOR 
                 SELECT ID
                 FROM Stc_Data.MailingGroup
                 WHERE AccessCode <> 'Students'
                 ORDER BY Name) 
            
        &sql(OPEN MGCur)
        for  
        {   
            &sql(FETCH MGCur INTO :id) 
            quit:(SQLCODE '= 0)
            
            set mgroup = ##class(Stc.Data.MailingGroup).%OpenId(id)
            set mtg = ##class(Stc.Data.MailingTrainingGroup).Create(tr, mgroup, 0)
            
            set grProxy = ##class(%ZEN.proxyObject).%New()
            set grProxy.id = mgroup.%Id()
            set grProxy.name = mgroup.Name
            set grProxy.isSubscribers = $$$YES
            set grProxy.isAutoMailing = mtg.IsAutoMailing
            set grProxy.mailingIsCompleted = mtg.MailingIsCompleted 
            set grProxy.mail = ##class(Stc.Data.MailingGroup).GetMail(mgroup.%Id(), tr.%Id())
            set grProxy.contacts = ##class(Stc.Data.MailingGroup).GetMailingItemsContacts(mgroup.%Id()) 
            do proxy.mGroups.Insert(grProxy)
        }
        &sql(CLOSE MGCur)
        
        
        do proxy.%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingTeacherPayout">
<Description><![CDATA[
Get teacher payout for training -->
Method="GET" Url="/json/training/:trainingId/teacher/:teacherId/payout"]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String,teacherId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        do ##class(Stc.Data.Training).GetTeacherPayout(trainingId, teacherId, .resultData)
        do resultData.%ToJSON()     
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingSubGroupsForGrid">
<Description>

==========================================================================================================================
TRAINING SUBGROUP                                                                                        TRAINING SUBGROUP
==========================================================================================================================

Get subgroups of training
Method="POST" Url="/json/training/subgroup/grid" </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT SubGroups FROM Stc_Data.Training_SubGroups", "Stc.Data.SubGroup", params, "Training = "_..ParseParameter(params.trainingId)))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="CreateSubGroup">
<Description>
Add subgroup into training
Method="POST" Url="/json/training/:trId/subgroup"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set training = ##class(Stc.Data.Training).%OpenId(trId)
        set payer = ##class(Stc.Data.Company).%OpenId(data.payerId)
        set sgroup = ##class(Stc.Data.SubGroup).Create(payer, training.Course, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createSubGroup", "| "_st)) 
        
        do training.SubGroups.SetAt(sgroup, sgroup.%Id())
    
        set st = training.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
    
    quit st
]]></Implementation>
</Method>

<Method name="GetSubGroup">
<Description>
Get subgroup by id
Method="POST" Url="/json/training/subgroup/:subgroupId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.SubGroup", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteSubGroup">
<Description>
Delete subgroup from training
Method="DELETE" Url="/json/training/:trainingId/subgroup/:subgroupId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId,sgroupId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set training = ##class(Stc.Data.Training).%OpenId(trainingId, , .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_st)) 
        
        set st = training.DeleteSubGroup(sgroupId)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deleteSubGroup", "| "_st)) 
        
        set st = training.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveTraining", "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trainingId)
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveSubGroupPayment">
<Description>
Save pay of subgroup
Method="POST" Url="/json/training/subgroup/payment"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set sg = ##class(Stc.Data.SubGroup).%OpenId(data.id)
        set sg.Amount = data.amount
        set sg.Discount = data.discount
        set sg.Currency = ##class(Stc.Data.Currency).%OpenId(data.currencyId)
        set st = sg.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup" ," | "_st)) 
            
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveSubGroupContract">
<Description>
Save contract of subgroup
Method="POST" Url="/json/training/subgroup/contract"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set sg = ##class(Stc.Data.SubGroup).%OpenId(data.id)
        set sg.SignerFullName.Value =  $ZCONVERT(data.fullName, "I","UTF8")
        set sg.DocumentInfo.Value = $ZCONVERT(data.document, "I","UTF8")
        set sg.DateStart = $ZDATEH(data.dateStart, 15)
        set sg.DateFinish = $ZDATEH(data.dateFinish, 15)
        set st = sg.%Save()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup" ," | "_st)) 
            
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingStudentsForGrid">
<Description>

==========================================================================================================================
TRAINING STUDENT                                                                                          TRAINING STUDENT
==========================================================================================================================

Get students of trainings
Method="POST" Url="/json/training/student/grid" </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
        
        set gridData = ..GetJsonForGrid("SELECT Student FROM Stc_Data.SubGroupStudent", "Stc.Data.Person", params, whereRequired)
        $$$THROWONERROR(st, st)
        
        for i=1:1:gridData.children.items.Count(){
            set studentProxy = gridData.children.items.GetAt(i)
            
            #dim stGrData As Stc.Data.SubGroupStudent = ##class(Stc.Data.SubGroupStudent).TrainingStudentIndexOpen(params.trainingId, studentProxy.id)
            set studentProxy.attendedStatusCode = stGrData.AttendedStatusCode
        }
        
        do gridData.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="AddNewStudentIntoTraining">
<Description>
Add person from application into training, create/open subgroup and add person
Method="POST" Url="/json/training/oredeNewStudent"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    set trId = ""
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set training = ##class(Stc.Data.Training).%OpenId(data.trainingId)
        set order = ##class(Stc.Data.OrderNewStudent).%OpenId(data.orderId)
        
        if (data.type = "create_add") || (data.type = "update_add"){
            
            if (data.type = "create_add"){
                set person = ##class(Stc.Data.Person).%New()
                set person.LastName = ##class(Stc.Data.Localization.LText).Create("")
                set person.FirstName = ##class(Stc.Data.Localization.LText).Create("")
                set person.MiddleName = ##class(Stc.Data.Localization.LText).Create("")
            }
            elseif (data.type = "update_add"){
                set person = ##class(Stc.Data.Person).EmailIdxOpen(order.Email)
            }
            
            do person.LastName.SetValues(order.LastName.%Id())
            do person.FirstName.SetValues(order.FirstName.%Id())
            do person.MiddleName.SetValues(order.MiddleName.%Id())
            
            set person.Email = order.Email
            set person.Phone = order.Phone
            set person.Skype = order.Skype
            
            set person.Company = order.Company
            
            set st = person.%Save()
            $$$THROWONERROR(st, st)
            
            set st = training.AddPersonIntoTraining(person.%Id())
            $$$THROWONERROR(st, st)
        }
        elseif (data.type = "old_add"){
            set person = ##class(Stc.Data.Person).EmailIdxOpen(order.Email)
            set st = training.AddPersonIntoTraining(person.%Id())
            $$$THROWONERROR(st, st)
        }
        
        set orderEmail = order.Email
        set orderFullName = order.LastName.Value_" "_order.FirstName.Value
        set st = ##class(Stc.Data.OrderNewStudent).%DeleteId(order.%Id())
        $$$THROWONERROR(st, st)
        
        set st = training.%Save()
        $$$THROWONERROR(st, st)
        
        
        if $ISOBJECT(order.CityForMailing){
            set proxy = ##class(%ZEN.proxyObject).%New()
            set proxy.studentId = person.%Id()
            set proxy.cityId = order.CityForMailing.%Id()
            do ##class(Stc.Data.MailingItemApprovedStudent).Save(proxy, .stMI)
        }
        
        set mail = ##class(Stc.Utils.Email).GetMailForTrainingRegistration(training)
        
        do ##class(Stc.Data.MailingJournal).Create(orderEmail, orderFullName, mail.subject, mail.message, ##class(Stc.Utils.Msg).GetMsg("AddNewStudent"), ##class(Stc.Data.MailingJournal).GetValidGroupNumber())
        
        set trId = training.%Id()
            
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trId)
    
    job ##class(Stc.Data.MailingJournal).StartSending()
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingStudentsEmails">
<Description>
Get email addresses(with name) all students from training
Method="GET" Url="/json/training/:trainingId/student/email"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE StudCur CURSOR FOR 
             SELECT Student As ID, Student->LastName->Value As LastName, Student->Email 
             FROM Stc_Data.SubGroupStudent
             WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trainingId)
             ORDER BY LastName) 
        
    &sql(OPEN StudCur)
    for  
    {   
        &sql(FETCH StudCur INTO :id, :lastName, :email) 
        quit:(SQLCODE '= 0)
        set stEmail = ##class(%ZEN.proxyObject).%New()
        set stEmail.id = id
        set stEmail.lastName = lastName
        set stEmail.email = email
        do proxy.children.Insert(stEmail)   
    }
        
    &sql(CLOSE StudCur)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateTrainingStudent">
<Description>
Create / add student into subgroup of training</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    set trId = ""
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        if (data.student.id){
            set student = ##class(Stc.Data.Person).%OpenId(data.student.id)
        }
        else{
            set student = ##class(Stc.Data.Person).Save(data.student, .st)
            if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createPerson", "| "_st))
        }
        
        if (data.group.id){
            do ##class(Stc.Data.SubGroupStudent).Save(student.%Id(), data.group.id, data.training.id, .st)
            if $$$ISERR(st){
                $$$ThrowStatus(st)
            }
        }
        else{
            set training = ##class(Stc.Data.Training).%OpenId(data.training.id)
            set st = training.AddPersonIntoTraining(student.%Id())
            $$$THROWONERROR(st, st)
            $$$THROWONERROR(st, training.%Save())
            
            set trId = training.%Id()
        }
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if (st = $$$OK) && (trId '= "") do ##class(Stc.Data.Training).UpdateFacts(trId)
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteTrainingStudent">
<Description>
Delete student from training
Method="DELETE" Url="/json/training/:trainingId/student/:studentId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId,studentId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Check privilege for Person table
    set st = ##class(Stc.Data.Person).CheckDeletePrivilege()
    quit:$$$ISERR(st) st
    
    set sgroupId = 0
    
    &sql(SELECT SubGroup INTO :sgroupId
         FROM Stc_Data.SubGroupStudent
         WHERE SubGroup IN (SELECT SubGroups 
                            FROM Stc_Data.Training_SubGroups 
                            WHERE Training = :trainingId) 
                        AND Student = :studentId)
    
    set st = ..DeleteSubGroupStudent(sgroupId, studentId)

    if (st = $$$OK) do ##class(Stc.Data.Training).UpdateFacts(trainingId)
        
    quit st
]]></Implementation>
</Method>

<Method name="DeleteSubGroupStudent">
<Description>
Delete student from subgroup
Method="DELETE" Url="/json/training/subgroup/:sgroupId/student/:studentId"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sgroupId,studentId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
        
    try{
        TSTART

        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        do ##class(Stc.Data.SubGroupStudent).CommonKeyIndexDelete(studentId, sgroupId,,.st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("saveSubGroup", " | "_st))
        
        TCOMMIT     
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingCertificatesForGrid">
<Description>

==========================================================================================================================
TRAINING CERTIFICATE                                                                                  TRAINING CERTIFICATE
==========================================================================================================================

All certificates of training
Method="POST" Url="/json/training/certificate/grid" </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = "Training = "_..ParseParameter(params.trainingId)
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Certificate", "Stc.Data.Certificate", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="CreateTrainingCertificates">
<Description>
Create all certificates for training
Method="POST" Url="/json/training/:id/certificate"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set training = ##class(Stc.Data.Training).%OpenId(id,,.st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("openTraining", "| "_st)) 
        
        // Создать сертификаты для каждого студента из каждой подгруппы в обучении
        set st = training.CreateCertificates()
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createCertificate", "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingFeedBacksForGrid">
<Description>

==========================================================================================================================
TRAINING FEEDBACK                                                                                        TRAINING FEEDBACK
==========================================================================================================================

Get training feedbacks. grid
Method="POST" Url="/json/training/feedback/grid" </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.FeedBack", "Stc.Data.FeedBack", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="DeleteFeedBack">
<Description>
Delete training feedback
Method="DELETE" Url="/json/feedback/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Check privilege for Person table
    set st = ##class(Stc.Data.Person).CheckDeletePrivilege()
    quit:$$$ISERR(st) st
        
    quit ##class(Stc.Data.FeedBack).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetCertificatesForGrid">
<Description>

==========================================================================================================================
CERTIFICATE                                                                                                    CERTIFICATE
==========================================================================================================================

Get all certificates for table
Method="POST" Url="/json/certificate/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = ""
        if (params.isPrinted '= "All"){
            set whereRequired = "IsPrinted = "_..ParseParameter(params.isPrinted)
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Certificate", "Stc.Data.Certificate", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="PrintCertificate">
<Description>
Print certificate
Method="POST" Url="/json/certificate/:number/print"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        set cert = ##class(Stc.Data.Certificate).NumberIdxOpen(number,,.st)
        $$$THROWONERROR(st, st)
        
        set cert.IsPrinted = 'cert.IsPrinted
        $$$THROWONERROR(st, cert.%Save())
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="DeleteCertificate">
<Description>
Delete certificate
Method="DELETE" Url="/json/certificate/:number"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<Implementation><![CDATA[
    // Check privilege for Person table
    set st = ##class(Stc.Data.Person).CheckDeletePrivilege()
    quit:$$$ISERR(st) st
        
    set st = ##class(Stc.Data.Certificate).NumberIdxDelete(number)
    if $$$ISERR(st) quit ##class(Stc.Utils.Msg).GetErrorStatus("deleteCertificate", "| "_st)
    
    quit st
]]></Implementation>
</Method>

<Method name="SendCertificatesToOffice">
<Description>
Send certificates to office
Method="POST" Url="/json/traiing/:id/certificate/sendToOffice"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String</FormalSpec>
<Implementation><![CDATA[
    // Check privilege for Person table
    set st = ##class(Stc.Data.Person).CheckDeletePrivilege()
    quit:$$$ISERR(st) st
    
    set mGroup = ##class(Stc.Data.MailingGroup).GetOfficeGroup()    
    set mail = ##class(Stc.Data.MailingGroup).GetMail(mGroup.%Id(), trainingId)
    
    set contacts = ##class(Stc.Data.MailingGroup).GetMailingItemsContacts(mGroup.%Id())
    set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
    
    for i=1:1:contacts.Count(){
        set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(contacts.GetAt(i).id)
        if '$ISOBJECT(mItem) continue
            
        do ##class(Stc.Data.MailingJournal).Create(contacts.GetAt(i).email, contacts.GetAt(i).name, mail.subject, mail.message, mGroup.Name, grNumber)  
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SavePerson">
<Description>

==========================================================================================================================
PERSON                                                                                                              PERSON
==========================================================================================================================

Refresh person's data
Method="POST" Url="/json/person"</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Stc.Data.Person).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createPerson",:"savePerson"), " | "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Get person by id
Method="GET" Url="/json/person/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[    quit ..GetProxyObject("Stc.Data.Person", id).%ToJSON()
]]></Implementation>
</Method>

<Method name="GetPersonByEmail">
<Description>
Get person by Email
Method="GET" Url="/json/person/email/:email"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String</FormalSpec>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set person = ##class(Stc.Data.Person).EmailIdxOpen(email,,.st)
        
        if (st = $$$OK) do person.ConvertToProxyObject().%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="DeletePerson">
<Description>
Delete person 
Method="DELETE" Url="/json/person/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        if (##class(Stc.Data.Person).IsEditable(id, 1) = 0) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deletePersonImpossible"))
    
        set st = ##class(Stc.Data.Person).Delete(id)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("deletePerson", "| "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonsForGrid">
<Description>
Get all persons for table
Method="POST" Url="/json/person/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = ""
        
        if (params.type = "Teachers"){
            set whereRequired = "ID IN (SELECT %NOLOCK DISTINCT Teacher FROM Stc_Data.Training)"
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT %NOLOCK ID FROM Stc_Data.Person", "Stc.Data.Person", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetPersonBySearchParameters">
<Description>
All students, search by last name and email
Method="GET" Url="/json/person/search/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String,additionalWhere:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set word = ..ParseParameter(word)
    set sql = "SELECT ID as id, "_
    "Email as email, "_
    "LastName->Value || ' ' || SUBSTRING(FirstName->Value,1,1) || '. ' || SUBSTRING(ISNULL(MiddleName->Value,''),1,1) || '., ' || Email || ', ' || Company->ShortName->Value as text "_
    "FROM Stc_Data.Person "_
    "WHERE "_additionalWhere_" (LastName->Value LIKE '"_word_"%' OR Email LIKE '%"_ word_"%') "_
    "ORDER BY text"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetFreeCourseTeachers">
<Description>
Search teachers, that don't teach selected course
Method="GET" Url="/json/person/free/course/:crsId/teacher/:word" </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>courseId:%String,word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set where = "id NOT IN (SELECT Teachers FROM Stc_Data.Course_Teachers WHERE Course = "_..ParseParameter(courseId)_") AND "
   
    quit ..GetPersonBySearchParameters(word, where)
]]></Implementation>
</Method>

<Method name="GetFreeSubGroupStudents">
<Description>
Search persons, that not in subgroup of trainings
Method="GET" Url="/json/person/free/subgroup/:sgId/student/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sgroupId:%String,word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set where = "id NOT IN (SELECT Student FROM Stc_Data.SubGroupStudent WHERE SubGroup = "_..ParseParameter(sgroupId)_") AND"
    
    quit ..GetPersonBySearchParameters(word, where)
]]></Implementation>
</Method>

<Method name="GetFreeTrainingStudents">
<Description>
Search persons, that not in training
Method="GET" Url="/json/person/free/training/:trId/student/:word"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trainingId:%String,word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set where = "id NOT IN (SELECT Student FROM Stc_Data.SubGroupStudent WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = '"_..ParseParameter(trainingId)_"')) AND"
    
    quit ..GetPersonBySearchParameters(word, where)
]]></Implementation>
</Method>

<Method name="GetPersonTrainings">
<Description>
All trainings with person
Method="GET" Url="/json/person/:id/training"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT Training as id, "_
    "Training->Course->Name->Value As course, "_
    "Training->City->Name->Value As city, "_
    "Training->DateStart As dateStart, "_
    "Training->DateFinish As dateFinish, "_
    "Training->TimeStart As timeStart, "_
    "Training->TimeFinish As timeFinish, "_
    "Training->isCompleted As isCompleted "_
    "FROM Stc_Data.Training_SubGroups "_
    "WHERE SubGroups IN (SELECT SubGroup FROM Stc_Data.SubGroupStudent WHERE Student = "_..ParseParameter(id)_") "_
    "ORDER BY isCompleted, dateFinish"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCourses">
<Description>
All courses, where person is teacher
Method="GET" Url="/json/person/:id/course"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT Course as id, "_
    "Course->Name->Value As name, "_
    "Course->Hours As hours, "_
    "Course->Days As days, "_
    "Course->ProgramUrl As programUrl "_
    "FROM Stc_Data.Course_Teachers WHERE Teachers = "_..ParseParameter(id)_" "_
    "ORDER BY name"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCompanies">
<Description>
All organizations, where person is contact person
Method="GET" Url="/json/person/:id/company"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT ID as id, "_
    "ShortName->Value As shortName, "_
    "LegalAddress->Value As legalAddress "_
    "FROM Stc_Data.Company WHERE Contact = "_..ParseParameter(id)_" "_
    "ORDER BY shortName"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetPersonCertificates">
<Description>
All certificates of person
Method="GET" Url="/json/person/:id/certificate"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT ID as id, "_
    "Number As number, "_
    "Training->Course->Name->Value As course, "_
    "CreatedDate As createdDate, "_
    "IsPrinted As isPrinted "_
    "FROM Stc_Data.Certificate WHERE Student = "_..ParseParameter(id)_" "_
    "ORDER BY course"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetTeacherStatistics">
<Description>
Get statistics data for teacher
Method="GET" Url="/json/teacher/:id/statistics/datefrom/:dateFrom/dateto/:dateTo" Call="Stc.Web.JsonAdmin:GetTeacherStatistics"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>teacherId:%String,dateFrom:%String,dateTo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set dateFromLogical = ##class(%Library.Date).XSDToLogical(dateFrom)
        set dateToLogical = ##class(%Library.Date).XSDToLogical(dateTo)
        
        if (dateFromLogical = ""){
            &sql(SELECT %NOLOCK MIN(DateStart) INTO :dateFromLogical
                 FROM Stc_Data.Training)
                 
            set dateFrom = $ZD(dateFromLogical, 3) 
        }
        
        if (dateToLogical = ""){
            set dateToLogical = $H + 1
            set dateTo = $ZD(dateToLogical, 3)
        }
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.dateFrom = dateFrom
        set proxy.dateTo = dateTo
        set proxy.totalTrainingsCount = 0
        set proxy.totalRating = 0
        set proxy.courses = ##class(%ListOfObjects).%New()
        
        &sql(SELECT %NOLOCK ROUND(AVG(AvgInstructorRating), 2) INTO :proxy.totalRating
             FROM Stc_Data.FeedBack
             WHERE Training->Teacher = :teacherId AND Training->DateStart >= :dateFromLogical AND Training->DateFinish <= :dateToLogical)
        
        
        &sql(DECLARE TeachStatCur CURSOR FOR 
                 SELECT %NOLOCK
                 trTab.Course, 
                 trTab.Course->Name->Value As CourseName, 
                 COUNT(trTab.Course) As TrainingsCount, 
                 (SELECT ROUND(AVG(fbTab.AvgInstructorRating), 2) 
                  FROM Stc_Data.FeedBack as fbTab 
                  WHERE fbTab.Training->Course = trTab.Course AND fbTab.Training->Teacher = trTab.Teacher AND fbTab.Training->DateStart >= :dateFromLogical AND fbTab.Training->DateFinish <= :dateToLogical) As AvgRating
                 FROM Stc_Data.Training as trTab
                 WHERE trTab.Teacher = :teacherId AND trTab.DateStart >= :dateFromLogical AND trTab.DateFinish <= :dateToLogical
                 GROUP BY trTab.Course
                 ORDER BY Course->Name->Value) 
            
        &sql(OPEN TeachStatCur)
        for  
        {   
            &sql(FETCH TeachStatCur INTO :courseId, :courseName, :trainingsCount, :avgRating) 
            quit:(SQLCODE '= 0)
            
            set proxy.totalTrainingsCount = proxy.totalTrainingsCount + trainingsCount
            
            set courseData = ##class(%ZEN.proxyObject).%New()
            set courseData.id = courseId
            set courseData.name = courseName
            set courseData.trainingsCount = trainingsCount
            set courseData.avgRating = avgRating
            
            do proxy.courses.Insert(courseData)
        }
        
        &sql(CLOSE TeachStatCur)
        
        set st = proxy.%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetGoogleSettings">
<Description>

==========================================================================================================================
SETTINGS                                                                                                          SETTINGS
==========================================================================================================================

Get settings for google api from globals
Method="GET" Url="/json/settings/google/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())

        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.type = type
        
        if (type = "settings"){
            set proxy.data = ##class(%ZEN.proxyObject).%New()
            set proxy.data.token = ##class(Stc.Data.Settings).GetGoogleRefreshToken()
            set proxy.data.ssl = ##class(Stc.Data.Settings).GetGoogleSSLConfig()
        }
        elseif (type = "calendar"){
            set proxy.data = ##class(%ZEN.proxyObject).%New()
            set proxy.data.id = ##class(Stc.Data.Settings).GetGoogleCalendarID()
            set proxy.data.src = ##class(Stc.Data.Settings).GetGoogleCalendarSRC()
            set proxy.data.msg = ##class(Stc.Utils.Msg).GetMsg("CalendarEvent")
        }
        
        do proxy.%ToJSON()      
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveGoogleSettings">
<Description>
Save settings for google api from client
Method="POST" Url="/json/settings/google/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        if (type = "settings"){
            do ##class(Stc.Data.Settings).SetGoogleRefreshToken(data.token)
            do ##class(Stc.Data.Settings).SetGoogleSSLConfig(data.ssl)
        }
        elseif (type = "calendar"){
            do ##class(Stc.Data.Settings).SetGoogleCalendarID(data.id)
            do ##class(Stc.Data.Settings).SetGoogleCalendarSRC(data.src)
            s ^CacheMsg("Stc", ##class(%MessageDictionary).GetSessionLanguage(), "CalendarEvent") = $ZCONVERT(data.msg, "I","UTF8")
        }
        
        TCOMMIT 
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailSettings">
<Description>
Get settings for mail from globals
Method="GET" Url="/json/settings/mail/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())

        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.data = ##class(%ZEN.proxyObject).%New()
        set proxy.type = type
        
        if (type = "settings"){
            set proxy.data.from = ##class(Stc.Data.Settings).GetEmailFrom()
            set proxy.data.password = ##class(Stc.Data.Settings).GetEmailSMTPPassword()
            set proxy.data.port = ##class(Stc.Data.Settings).GetEmailSMTPPort()
            set proxy.data.server = ##class(Stc.Data.Settings).GetEmailSMTPServer()
            set proxy.data.user = ##class(Stc.Data.Settings).GetEmailSMTPUser()
        }
        elseif (type = "operators"){
            set emailList = $LISTFROMSTRING(##class(Stc.Data.Settings).GetMailingOperatorAddresses(), ",")
            set items = ##class(%ListOfObjects).%New()
            for i=1:1:$LISTLENGTH(emailList){
                set item = ##class(%ZEN.proxyObject).%New()
                set item.email = $LIST(emailList, i)
                do items.Insert(item)   
            }
            
            set proxy.data.items = items
        }
        elseif (type = "students") || (type = "reminder"){
            set proxy.data = ##class(Stc.Utils.Email).GetEmailPattern("students")
            set proxy.data.days = ##class(Stc.Data.Settings).GetMailingStudentsDays()
        }
        elseif (type = "teacher"){
            set proxy.data = ##class(Stc.Utils.Email).GetEmailPattern(type)
            set proxy.data.days = ##class(Stc.Data.Settings).GetMailingTeacherDays()            
        }
        elseif (type = "curator"){
            set proxy.data = ##class(Stc.Utils.Email).GetEmailPattern(type)
            set proxy.data.days = ##class(Stc.Data.Settings).GetMailingCuratorDays()
        }
        else{
            set proxy.data = ##class(Stc.Utils.Email).GetEmailPattern(type)
        }
        
        do proxy.%ToJSON()      
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveMailSettings">
<Description>
Save settings for mail from client
Method="POST" Url="/json/settings/mail/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        if (type = "settings"){
            do ##class(Stc.Data.Settings).SetEmailFrom(data.from)
            do ##class(Stc.Data.Settings).SetEmailSMTPPassword(data.password)
            do ##class(Stc.Data.Settings).SetEmailSMTPPort(data.port)
            do ##class(Stc.Data.Settings).SetEmailSMTPServer(data.server)
            do ##class(Stc.Data.Settings).SetEmailSMTPUser(data.user)
        }
        elseif (type = "operators"){
            set emails = ""
            for i=1:1:data.items.Count(){
                set emails = emails_data.items.GetAt(i).email_","
            }
            
            do ##class(Stc.Data.Settings).SetMailingOperatorAddresses($E(emails, 1, *-1))
        }
        elseif (type = "students") || (type = "reminder"){
            do ##class(Stc.Utils.Email).SetMailPattern(type, $ZCVT(data.subject, "I", "UTF8"), $ZCVT(data.message, "I", "UTF8"))
            do ##class(Stc.Data.Settings).SetMailingStudentsDays(data.days)
        }
        elseif (type = "feedback"){
            do ##class(Stc.Utils.Email).SetMailPattern(type, $ZCVT(data.subject, "I", "UTF8"), $ZCVT(data.message, "I", "UTF8"))
        }
        elseif (type = "teacher"){
            do ##class(Stc.Utils.Email).SetMailPattern(type, $ZCVT(data.subject, "I", "UTF8"), $ZCVT(data.message, "I", "UTF8"))
            do ##class(Stc.Data.Settings).SetMailingTeacherDays(data.days)          
        }
        elseif (type = "curator"){
            do ##class(Stc.Utils.Email).SetMailPattern(type, $ZCVT(data.subject, "I", "UTF8"), $ZCVT(data.message, "I", "UTF8"))
            do ##class(Stc.Data.Settings).SetMailingCuratorDays(data.days)
        }
        else{
            do ##class(Stc.Utils.Email).SetMailPattern(type, $ZCVT(data.subject, "I", "UTF8"), $ZCVT(data.message, "I", "UTF8"))    
        }

        
        TCOMMIT 
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailPreview">
<Description>
Get preview of settings for mail from last training
Method="GET" Url="/json/settings/mail/preview/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK
    
    try{
        set mail = ##class(%ZEN.proxyObject).%New()
        set mail.subject = "none"
        set mail.message = "none"
        
        if (##class(Stc.Data.Training).%ExistsId(92) = $$$YES){
            set tr = ##class(Stc.Data.Training).%OpenId(92)
        }
        else{
            &sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
            set tr = ##class(Stc.Data.Training).%OpenId(lastId)
        }
        
        if (type = "registration"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingRegistration(tr)
        }
        elseif (type = "students") || (type = "reminder"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingStudents(tr)
        }
        elseif (type = "feedback"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingFeedBack(tr)
        }
        elseif (type = "curator"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingCurator(tr)
        }
        elseif (type = "teacher"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingTeacher(tr)
        }
        elseif (type = "orders"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingOrders(tr)
        }
        elseif (type = "orderapply"){
            &sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Order ORDER BY ID DESC)
            set order = ##class(Stc.Data.Order).%OpenId(lastId,,.sc)
            if $$$ISOK(sc){ 
                set mail = ##class(Stc.Utils.Email).GetMailForOrderApply(tr)
            }
        }
        elseif (type = "mailinggroups"){
            set mail = ##class(Stc.Utils.Email).GetMailForMailingGroups(tr)
        }
        elseif (type = "mailingsubscriber"){
            set mail = ##class(Stc.Utils.Email).GetMailForMailingSubscriber(tr)
        }
        elseif (type = "confirmsubscription"){
            &sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.MailingItemApproved ORDER BY ID DESC)
            set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(lastId,,.sc)
            if $$$ISOK(sc){ 
                set mail = ##class(Stc.Utils.Email).GetMailForConfirmationSubscription(mItem)
            }
        }
        elseif (type = "listOfFeedbacks"){
            set mail = ##class(Stc.Utils.Email).GetMailForListOfTrainingFeedBacks(tr)
        }
        elseif (type = "teacherSetAttendeeStatus"){
            set mail = ##class(Stc.Utils.Email).GetMailForTrainingTeacherSetAttendeeStatus(tr)
        }
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.preview = mail.subject_"<br><br>"_mail.message
        do proxy.%ToJSON()
    }   
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetGooglePreview">
<Description>
Get preview of settings for google from last training
Method="GET" Url="/json/settings/google/preview/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st  = $$$OK

    try{
        if (##class(Stc.Data.Training).%ExistsId(92) = $$$YES){
            set tr = ##class(Stc.Data.Training).%OpenId(92)
        }
        else{
            &sql(SELECT TOP 1 ID INTO :lastId FROM Stc_Data.Training ORDER BY ID DESC)
            set tr = ##class(Stc.Data.Training).%OpenId(lastId)
        }
        
        set msg = ""
        
        if (type = "calendar"){
            set msg = ##class(Stc.Data.Training).GetCalendarEventDescription(tr)
        }   
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.preview = msg
        do proxy.%ToJSON()
    }   
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroupsForGrid">
<Description>

==========================================================================================================================
MAILING GROUPS AND ITEMS                                                                          MAILING GROUPS AND ITEMS   
==========================================================================================================================

Get mailing groups for table
Method="POST" Url="/json/mailing/group/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.MailingGroup", "Stc.Data.MailingGroup", params))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="SaveMailingGroup">
<Description>
Save mailing group
Method="POST" Url="/json/mailing/group"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Stc.Data.MailingGroup).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createMailingGroup",:"saveMailingGroup"), "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroups">
<Description>
Get mailing groups 
Method="GET" Url="/json/mailing/group"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, Name as name FROM Stc_Data.MailingGroup ORDER BY name")
]]></Implementation>
</Method>

<Method name="GetMailingGroup">
<Description>
Get mailing group by ID
Method="GET" Url="/json/mailing/group/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.MailingGroup", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMailingGroupContacts">
<Description>
Get mailing group contacts by ID
Method="GET" Url="/json/mailing/group/:id/contact"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set contacts = ##class(Stc.Data.MailingGroup).GetMailingItemsContacts(id)
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = contacts
    do proxy.%ToJSON() 
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingGroup">
<Description>
Delete mailing group by ID
Method="DELETE" Url="/json/mailing/group/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set SQLCODE = ""
        &sql(DELETE FROM Stc_Data.MailingItemApproved WHERE MGroup = :id)
        
        if (SQLCODE '= 0) && (SQLCODE '= 100){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("DeleteMailingApprovedItemsError", " SQLCODE="_SQLCODE))
        }
        
        set SQLCODE = ""
        &sql(DELETE FROM Stc_Data.MailingTrainingGroup WHERE MGroup = :id)
        
        if (SQLCODE '= 0) && (SQLCODE '= 100){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("DeleteMailingTrainingGroupError", " SQLCODE="_SQLCODE))
        }
        
        $$$THROWONERROR(st, ##class(Stc.Data.MailingGroup).Delete(id))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingGroupItemsForGrid">
<Description>
Get mailing items in the group for table
Method="POST" Url="/json/mailing/group/item/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.MailingItemApproved", "Stc.Data.MailingItemApproved", params, "MGroup = "_..ParseParameter(params.other.groupId)))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="SaveMailingItem">
<Description>
Save mailing item
Method="POST" Url="/json/mailing/group/item"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        // Check privilege for Person table
        $$$THROWONERROR(st, ##class(Stc.Data.Person).CheckDeletePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        do ##class(Stc.Data.MailingItemApprovedSubscriber).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus($CASE(data.id = "", 1:"createMailingItem",:"saveMailingItem"), "| "_st)) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingItem">
<Description>
Get mailing item by ID
Method="GET" Url="/json/mailing/group/item/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..GetProxyObject("Stc.Data.MailingItemApproved", id).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingItem">
<Description>
Delete mailing group by ID
Method="DELETE" Url="/json/mailing/group/item/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ##class(Stc.Data.MailingItemApproved).%DeleteId(id)
]]></Implementation>
</Method>

<Method name="GetMailingGroupMail">
<Description>
Delete mailing group by ID
Method="GET" Url="/json/mailing/group/:id/mail"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>grId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trId = ""
    &sql(SELECT TOP 1 Training INTO :trId FROM Stc_Data.Certificate ORDER BY ID DESC)
    
    quit ##class(Stc.Data.MailingGroup).GetMail(grId , trId).%ToJSON()
]]></Implementation>
</Method>

<Method name="SendMailToMailingGroup">
<Description>
Send mail to Mailing group items
Method="POST" Url="/json/mailing/mail/send"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1)
        
        set data.subject = $ZCVT(data.subject, "I", "UTF8")
        set data.message = $ZCVT(data.message, "I", "UTF8")
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        for i=1:1:data.contacts.Count(){
            set mItem = ##class(Stc.Data.MailingItemApproved).%OpenId(data.contacts.GetAt(i).id)
            if '$ISOBJECT(mItem) continue
                    
            set msg = $REPLACE(data.message, "%UnsubscribeUrl", "http://"_##class(Stc.Data.Settings).GetWebAppDomainNamespace()_"/stc/index.csp#/mailing/subscription/"_$system.Encryption.Base64Encode(mItem.AccessCode))
            do ##class(Stc.Data.MailingJournal).Create(data.contacts.GetAt(i).email, $ZCVT(data.contacts.GetAt(i).name, "I", "UTF8"), data.subject, msg, "ГР: "_mItem.MGroup.Name, grNumber)    
        }
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    if $$$ISOK(st){
        job ##class(Stc.Data.MailingJournal).StartSending()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingJournalItemsForGrid">
<Description>
Get mail journal
Method="POST" Url="/json/mailing/journal/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set where = ""
        if params.other.groupNumber > 0 {
            set where = "GroupNumber = '"_params.other.groupNumber_"'"
        }
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.MailingJournal", "Stc.Data.MailingJournal", params, where))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetMailingJournalPartsForGrid">
<Description>
Get mail journal
Method="POST" Url="/json/mailing/journal/parts/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set proxyResult = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children.items = ##class(%ListOfObjects).%New()
        
        set rowCount = 0
        &sql(DECLARE MJCur3 CURSOR FOR 
             SELECT mj.GroupNumber,
                    mj.CreatedTS, 
                    mj.Type, 
                    mj.Subject, 
                    mj.Message, 
                    COUNT(mj.ID) As RecipientCount, 
                    (SELECT COUNT(mj2.ID) FROM Stc_Data.MailingJournal mj2 WHERE mj.GroupNumber = mj2.GroupNumber AND IsSended = 1) As SendedCount
             FROM Stc_Data.MailingJournal as mj
             WHERE GroupNumber > 0
             GROUP BY GroupNumber
             ORDER BY GroupNumber DESC) 
        
        &sql(OPEN MJCur3)
        for  
        {   
            &sql(FETCH MJCur3 INTO :grNumber, :createdTS, :type, :subj, :msg, :recCount, :sendCount) 
            quit:(SQLCODE '= 0)
            set rowCount = rowCount + 1
            
            if (rowCount > params.last) quit
            
            if (rowCount >= params.first){
                set proxy = ##class(%ZEN.proxyObject).%New()
                set proxy.id = grNumber
                set proxy.groupNumber = grNumber
                set proxy.createdTS = createdTS
                set proxy.type = type
                set proxy.subject = subj
                set proxy.message = msg
                set proxy.recipientsCount = recCount
                set proxy.sendedCount = sendCount
                do proxyResult.children.items.Insert(proxy)
            }   
        }
        
        &sql(CLOSE MJCur3)
        
        
        &sql(SELECT COUNT(DISTINCT GroupNumber) INTO :rowCount FROM Stc_Data.MailingJournal WHERE GroupNumber > 0) 
            
        set proxyResult.children.itemsTotal = rowCount
        do proxyResult.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="ChangeMailingStatus">
<Description>
Change mailing status (on|off)
Method="POST" Url="/json/mailing/status/:status"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if ($ZCVT(status, "L") = "off"){
        do ##class(Stc.Data.Settings).SetMailingStatus("Off")
    }
    else{
        do ##class(Stc.Data.Settings).SetMailingStatus("On")
        job ##class(Stc.Data.MailingJournal).StartSending()
    }
    
    do ..GetMailingStatus()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetMailingStatus">
<Description>
Get current mailing status
Method="GET" Url="/json/mailing/status"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.status = ##class(Stc.Data.Settings).GetMailingStatus()
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingJournalItem">
<Description>
Delete mailing journal item
Method="DELETE" Url="/json/mailing/journal/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(Stc.Data.MailingJournal).%DeleteId(id, 4)
    quit:$$$ISERR(st) ##class(Stc.Utils.Msg).GetErrorStatus("deleteMailingJournalItem", "| "_st) 
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMailingJournalPart">
<Description>
Delete mailing journal item
Method="DELETE" Url="/json/mailing/journal/part/:groupNumber"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>grNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set SQLCODE = ""
    &sql(DELETE FROM Stc_Data.MailingJournal WHERE GroupNumber = :grNumber)
    
    if (SQLCODE '= 0) && (SQLCODE '= 100){
        quit ##class(Stc.Utils.Msg).GetErrorStatus("Bad sql code. ", "| SQLCODE="_SQLCODE)
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetEmailPattern">
<Description>

==========================================================================================================================
OTHER                                                                                                                OTHER
==========================================================================================================================

Get email pattern from ^CacheMsg
Method="GET" Url="/json/mail/pattern/:type"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ##class(Stc.Utils.Email).GetEmailPattern(type).%ToJSON()
]]></Implementation>
</Method>

<Method name="GetCurrencies">
<Description>
All currencies
Method="GET" Url="/json/currency"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, Name->Value As name FROM Stc_Data.Currency")
]]></Implementation>
</Method>

<Method name="CheckAdmin">
<Description>
Check access, authorization call, if needed
Method="GET" Url="/json/checkAdmin/:isLogin"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    if (isLogin = 1){
        set data = ##class(%ZEN.proxyObject).%New()
        set data.user = $USERNAME
    
    
        if (##class(Stc.Data.Person).CheckDeletePrivilege() = $$$OK){
            set data.privileges = "all"
        }
        else{
            set data.privileges = "read"
        }
        
        do data.%ToJSON()
        
        q $$$OK
    }

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

    do %session.Logout()    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetLogsForGrid">
<Description>
Get logs
Method="POST" Url="/json/log/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Utils.Log", "Stc.Utils.Log", params))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.JsonUser">
<Description>
Handling of BrokerUser</Description>
<Super>Json</Super>
<TimeCreated>63098,81469.21022</TimeCreated>

<Method name="GetCoursesShortInfo">
<Description>

==========================================================================================================================
COURSE                                                                                                              COURSE
==========================================================================================================================

Get short info about all courses
Method="GET" Url="/json/course/isInUse/:isInUse"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isInUse:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set isInUseCondition = ""
    if (isInUse = 1) || (isInUse = 0) set isInUseCondition = "WHERE IsInUse = "_isInUse
    
    set sql = "SELECT ID As id, Name->Value as name, IsInUse As isInUse FROM Stc_Data.Course "_isInUseCondition_" ORDER BY name"
    
    quit ..WriteJsonFromSql(sql)
]]></Implementation>
</Method>

<Method name="GetCoursesFullInfoForGrid">
<Description>
Get full info about all courses
Method="POST" Url="/json/course/grid"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        $$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      
        $$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.Course", "Stc.Data.Course", params, "IsInUse = "_..ParseParameter(params.isInUse)))
    }
    catch ex {
        set status = ex.AsStatus()
    }

    quit status
]]></Implementation>
</Method>

<Method name="CreateOrder">
<Description>

==========================================================================================================================
ORDER                                                                                                                ORDER
==========================================================================================================================

Create application
Method="POST" Url="/json/order"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.order,1))
       
        do ##class(Stc.Data.Order).Create(order, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("createDirtyOrder", "| "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    do ##class(Stc.Data.Order).SynchronizeCube()
    
    quit st
]]></Implementation>
</Method>

<Method name="CreateOrderNewStudent">
<Description>
Create application for student
Method="POST" Url="/json/orderNewStudent"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data,1))
        
        set order = ##class(Stc.Data.OrderNewStudent).Create(data, .st)
        $$$THROWONERROR(st, st)
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCompaniesShortInfo">
<Description>

==========================================================================================================================
ORGANIZATION                                                                                                  ORGANIZATION
==========================================================================================================================

Get short info about all organization
Method="GET" Url="/json/company"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, ShortName->Value as name FROM Stc_Data.Company ORDER BY name")
]]></Implementation>
</Method>

<Method name="CreateMailingSubscription">
<Description>

==========================================================================================================================
MAILING SUBSCRIPTION                                                                                  MAILING SUBSCRIPTION
==========================================================================================================================

Create dirty mailing item
Method="POST" Url="/json/mailing/subscription"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        // Check email for exists subscription in the announcement group
        set group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup()
        set groupId = group.%Id()
        set existsApprovedId = ""
        &sql(SELECT ID INTO :existsApprovedId FROM Stc_Data.MailingItemApprovedSubscriber WHERE Email = :data.email AND MGroup = :groupId)
        
        if (existsApprovedId '= ""){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
        }
            
        // Check email for exists order for subscription
        set existsDirtyId = ""
        &sql(SELECT ID INTO :existsDirtyId FROM Stc_Data.MailingItemDirty WHERE Email = :data.email)
        
        // Id for update data
        set data.id = existsDirtyId
        set data.group = ##class(%ZEN.proxyObject).%New()
        set data.group.id = group.%Id()
        
        set item = ##class(Stc.Data.MailingItemDirty).Save(data, .st)
        $$$THROWONERROR(st, st)
        
        set mail = ##class(Stc.Utils.Email).GetMailForConfirmationSubscription(item)
        
        do ##class(Stc.Data.MailingJournal).Create(item.Email, "", mail.subject, mail.message, ##class(Stc.Utils.Msg).GetMsg("CreateSubscr") , ##class(Stc.Data.MailingJournal).GetValidGroupNumber())
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    job ##class(Stc.Data.MailingJournal).StartSending()
    
    quit st
]]></Implementation>
</Method>

<Method name="ConfirmMailingSubscription">
<Description>
Activate subscription, remove dirty and create approved mailing item
Method="POST" Url="/json/mailing/subscription/confirmation/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set code = $system.Encryption.Base64Decode(code)
        
        if (##class(Stc.Data.MailingItemDirty).AccessCodeIdxExists(code) = $$$NO){
            if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$YES){
                $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("SubscriptionAlreadyExists"))
            }
            else{ 
                $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongConfirmationCode"))
            }
        }
        
        set dirtyItem = ##class(Stc.Data.MailingItemDirty).AccessCodeIdxOpen(code)
        
        set approvedItem = ##class(Stc.Data.MailingItemApprovedSubscriber).%New()
        set approvedItem.FullName = dirtyItem.FullName
        set approvedItem.Email = dirtyItem.Email
        set approvedItem.City = dirtyItem.City
        set approvedItem.Company = dirtyItem.Company
        set approvedItem.Position = dirtyItem.Position
        set approvedItem.AccessCode = dirtyItem.AccessCode
        set approvedItem.MGroup = dirtyItem.MGroup
        set approvedItem.LastUpdated = $ZDT($ZTS, 3)
        
        $$$THROWONERROR(st, approvedItem.%Save())
        
        $$$THROWONERROR(st, ##class(Stc.Data.MailingItemDirty).AccessCodeIdxDelete(code))
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="DeleteMailingSubscription">
<Description>
Remove approved mailing item by access code (unsubscribe)
Method="DELETE" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set code = $system.Encryption.Base64Decode(code)
        
        if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
        }
        
        set item = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code)
        do ##class(Stc.Utils.Log).Create("Json.Admin.DeleteMailingSubscription()", "FullName="_item.ItemFullName)
        kill item
        
        $$$THROWONERROR(st, ##class(Stc.Data.MailingItemApproved).AccessCodeIdxDelete(code))
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="UpdateMailingSubscription">
<Description>
Update approved mailing item by access code
Method="POST" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set code = $system.Encryption.Base64Decode(code)
        
        if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
        }
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set oldObj = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code)
        set data.id = oldObj.%Id()
        set data.email = oldObj.Email
        set data.group = ##class(Stc.Data.MailingGroup).GetAnnouncementGroup().ConvertToProxyObject()
        kill oldObj
        
        do ##class(Stc.Data.MailingItemApprovedSubscriber).Save(data, .st)
        $$$THROWONERROR(st, st)
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetMailingSubscription">
<Description>
Get approved mailing item by access code
Method="GET" Url="/json/mailing/subscription/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set code = $system.Encryption.Base64Decode(code)
        
        if (##class(Stc.Data.MailingItemApproved).AccessCodeIdxExists(code) = $$$NO){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("WrongAccessCode"))
        }
        
        set proxy = ##class(Stc.Data.MailingItemApproved).AccessCodeIdxOpen(code).ConvertToProxyObject()
        set proxy.accessCode = ""
        set proxy.group = proxy.group.name
        
        do proxy.%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetFeedBackTemplateForFill">
<Description><![CDATA[

==========================================================================================================================
FEEDBACK                                                                                                          FEEDBACK
==========================================================================================================================

Get feedback template for fill data -->
Method="GET" Url="/json/feedback/template" ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set feedBack = ##class(%ZEN.proxyObject).%New()
    set feedBack.items = ##class(%ListOfObjects).%New()
        
    try{
        
        &sql(DECLARE FBCurr CURSOR FOR 
             SELECT ID
             FROM Stc_Data.FeedBackItemType
             WHERE IsActive = 1
             ORDER BY SeqNumber) 
        
        &sql(OPEN FBCurr)
        for  
        {   
            &sql(FETCH FBCurr INTO :id) 
            quit:(SQLCODE '= 0)
            
            set fbItem = ##class(%ZEN.proxyObject).%New()
            set fbItem.type = ##class(Stc.Data.FeedBackItemType).%OpenId(id).ConvertToProxyObject()
            set fbItem.scaleValue = 0
            set fbItem.groupTypeCode = fbItem.type.groupType.code
            do feedBack.items.Insert(fbItem)
        }
            
        &sql(CLOSE FBCurr)
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit feedBack.%ToJSON()
]]></Implementation>
</Method>

<Method name="SaveTrainingFeedBack">
<Description>
Create feedBack for training
Method="POST" Url="/json/training/:id/feedback/:code"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String,accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        set tr = ##class(Stc.Data.Training).%OpenId(trId)
        if ($P(tr.AccessCode,"-",1)_"-"_$P(tr.AccessCode,"-",5) '= accessCode){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackErrorCode"))
        }
        
        if (tr.FeedBacks.Count() > 50){
            $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSpam"))
        }
        
        set data.trainingId = tr.%Id()
        do ##class(Stc.Data.FeedBack).Save(data, .status)
        
        if ($$$ISERR(status)) $$$ThrowStatus(##class(Stc.Utils.Msg).GetErrorStatus("feedBackSave")) 
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="GetCities">
<Description>

==========================================================================================================================
OTHER                                                                                                                OTHER
==========================================================================================================================

Search cities
Method="GET" Url="/json/city/:startsWith"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if $L(word) < 2 quit $$$OK
    
    set proxyItems = ##class(%ListOfObjects).%New() 
    set lang = $$$SessionLanguage
    set word = word_"%"
    
    &sql(DECLARE RegionCurr CURSOR FOR 
             SELECT TOP 500 reg.ID As id, ltV.Value As name, reg.ParentRegion->Name->Value as parentName, reg.ParentRegion->ParentRegion->Name->Value
             FROM Stc_Data_Localization.LTextValue as ltV
             INNER JOIN 
             Stc_Data.Region as reg ON reg.Name = ltV.LText
             WHERE reg.HLevel = 2 AND ltV.Lang = :lang AND ltV.Value LIKE :word
             ORDER BY name, parentName) 
        
    &sql(OPEN RegionCurr)
    for  
    {   
        &sql(FETCH RegionCurr INTO :id, :name, :parent, :greatParent) 
        quit:(SQLCODE '= 0)
        set proxyItem = ##class(%ZEN.proxyObject).%New()
        set proxyItem.id = id
        set proxyItem.name = name
        set proxyItem.parentName = parent
        set proxyItem.greatParentName = greatParent
        do proxyItems.Insert(proxyItem)
    }
        
    &sql(CLOSE RegionCurr)
    
    set proxyResult = ##class(%ZEN.proxyObject).%New()
    set proxyResult.children = proxyItems
    do proxyResult.%ToJSON()
        
    q $$$OK
]]></Implementation>
</Method>

<Method name="GetTraining">
<Description>
Get training by id
Method="GET" Url="/json/training/:id"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set proxy = ##class(Stc.Data.Training).%OpenId(id).ConvertToProxyObjectForPublic()
        do proxy.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetTrainingStudents">
<Description>
All training students for teacher view by access code
Method="POST" Url="/json/training/:code/student"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        $$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set tr = ##class(Stc.Data.Training).AccessCodeIdxOpen(accessCode,,.status)
        $$$THROWONERROR(status, status)
        
        set whereRequired = "SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training->AccessCode = '"_..ParseParameter(accessCode)_"')"
        
        
        set gridData = ..GetJsonForGrid("SELECT Student FROM Stc_Data.SubGroupStudent", "Stc.Data.Person", params, whereRequired, .status)
        $$$THROWONERROR(status, status)
        
        for i=1:1:gridData.children.items.Count(){
            set studentProxy = gridData.children.items.GetAt(i)
            
            #dim stGrData As Stc.Data.SubGroupStudent = ##class(Stc.Data.SubGroupStudent).TrainingStudentIndexOpen(tr.%Id(), studentProxy.id)
            set studentProxy.attendedStatusCode = stGrData.AttendedStatusCode
        }
        
        do gridData.%ToJSON()
    }
    catch ex {
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="GetTrainingFeedBacksForGridByAccessCode">
<Description>
Get training feedbacks. grid. BY AccessCode
Method="POST" Url="/json/training/feedback/grid" </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set tr = ##class(Stc.Data.Training).%OpenId(params.trainingId)
        if (tr.GetAccessCodeForFeedbackList() '= params.accessCode){
            $$$THROWONERROR(st, ##class(Stc.Utils.Msg).GetErrorStatus("error_FeedBack_WrongAccessCode"))
        }
        
        set whereRequired = "Training = '"_..ParseParameter(params.trainingId)_"'"
        
        $$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.FeedBack", "Stc.Data.FeedBack", params, whereRequired))
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetSchedule">
<Description>
Get schedule for IS site
Method="GET" Url="/json/schedule"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.courses = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE ScheduleCourseCur CURSOR FOR 
             SELECT ID, 
             ISNULL((SELECT MIN(DateStart)FROM Stc_Data.Training WHERE Course = course.ID AND IsCompleted = 0 AND IsPublic = 1),'11/11/2099') As MinTrainingDate,
             (SELECT COUNT(ID)FROM Stc_Data.Training WHERE Course = course.ID AND IsPublic = 1) As TotalCount
             FROM Stc_Data.Course as course
             WHERE course.IsInUse = 1 AND course.IsPublic = 1
             ORDER BY MinTrainingDate, TotalCount DESC) 
        
    &sql(OPEN ScheduleCourseCur)
    for  
    {   
        &sql(FETCH ScheduleCourseCur INTO :courseId, :minTrainingDate, :totalCount) 
        quit:(SQLCODE '= 0)
        
        set course = ##class(Stc.Data.Course).%OpenId(courseId).ConvertToProxyObject()
        set course.trainings = ##class(%ListOfObjects).%New()
        
        // Course trainings 
        &sql(DECLARE ScheduleTrainingCur CURSOR FOR 
             SELECT ID
             FROM Stc_Data.Training 
             WHERE Course = :courseId AND IsCompleted = 0 AND IsPublic = 1
             ORDER BY DateStart)
        
        &sql(OPEN ScheduleTrainingCur)
        for  
        {   
            &sql(FETCH ScheduleTrainingCur INTO :trId) 
            quit:(SQLCODE '= 0)
            
            set trObj = ##class(Stc.Data.Training).%OpenId(trId)
            set trProxy = trObj.ConvertToProxyObjectForPublic()
            set trProxy.dateGoogleCalendar = $REPLACE($ZD(trObj.DateStart, 3)_"/"_$ZD(trObj.DateFinish+1, 3), "-", "")
        
            do course.trainings.Insert(trProxy) 
        }
        &sql(CLOSE ScheduleTrainingCur)
        
        do proxy.courses.Insert(course)     
    }
    &sql(CLOSE ScheduleCourseCur)
    
    quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="CreateTrainingQuestion">
<Description>
Create question for training
Method="POST" Url="/json/training/:id/question"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        set tr = ##class(Stc.Data.Training).%OpenId(trId)
        
        do ##class(Stc.Utils.Log).Create("Stc.Web.JsonUser.SaveTrainingQuestion", 
            "Author="_data.author_
            "TrainingId="_tr.%Id()_
            "Subject="_data.subject_
            "Email="_data.email_
            "Msg="_data.msg)
        
        
        set msg = 
            "Course: "_tr.Course.Name.Value_", "_tr.City.Name.Value_", "_$ZD(tr.DateStart, 3)_"<br>"_
            "Author: "_data.author_", "_data.email_"<br>"_
            "Subject: "_data.subject_"<br>"_
            "Message:<br>"_data.msg
        
        set emailList = $LISTFROMSTRING(##class(Stc.Data.Settings).GetMailingOperatorAddresses(), ",")
        set grNumber = ##class(Stc.Data.MailingJournal).GetValidGroupNumber()
        for i=1:1:$LISTLENGTH(emailList){
            set email = $LIST(emailList, i)
            do ##class(Stc.Data.MailingJournal).Create(email, "Operator", "Question from attendee", msg, "Question from attendee", grNumber)
        }
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="GetTrainingOrderNewStudents">
<Description>
All training oredernewstudents for teacher view by access code
Method="POST" Url="/json/training/:code/student"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        $$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
        
        set whereRequired = "Training->AccessCode = '"_..ParseParameter(accessCode)_"'"
        
        $$$THROWONERROR(status, ..WriteJsonForGrid("SELECT ID FROM Stc_Data.OrderNewStudent", "Stc.Data.OrderNewStudent", params, whereRequired))
    }
    catch ex {
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="UpdateTrainingStudentAttendedStatus">
<Description>
Update training students attended state BY AccessCode
Method="POST" Url="/json/training/:trainingAccessCode/student/udpateStatus"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        $$$THROWONERROR(status, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
        
        set tr = ##class(Stc.Data.Training).AccessCodeIdxOpen(accessCode,,.st)
        $$$THROWONERROR(st, st)
        
        set trId = tr.%Id()
        &sql(UPDATE Stc_Data.SubGroupStudent 
             SET AttendedStatusCode = :data.statusCode
             WHERE Student = :data.studentId AND SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training = :trId))
    }
    catch ex {
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.Login">
<Super>%CSP.Page</Super>
<TimeCreated>63424,84556.206459</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html>
	<head>        
		<title>Stc</title>
        <script language="javascript" src="js/common.js"></script>
        <script language="javascript">
        	window.onload = function() {
	        	StcAppSetting.setCookie('urlDataCookie', window.location.toString(), {expires: 10});
  				window.document.forms['loginForm'].submit(); 
			};
       </script>
    </head>
	<body>
        <div style="display: none;">
            <form name="loginForm" class="form-signin" method="post" action="/csp/stc/stc/index.csp">
                <p id="caption">System of training courses</p>
                <input name="CacheLogin" value="1" type="hidden">
                <input id="CacheUserName" type="text" class="input-block-level" name="CacheUserName" placeholder="Login" value="ilson">
                <input type="password" class="input-block-level" name="CachePassword" placeholder="Password" value="podolko">
                <button class="btn btn-small btn-primary" type="submit" style="font-size: 1em;">Login</button>
            </form>
        </div>
	</body>
	</html>>
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Stc.Web.LoginForm.cls.stc.index">
<Hidden>1</Hidden>
<Import>User</Import>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeCreated>63272,33042.690562</TimeCreated>
<GeneratedBy>/csp/stc/stc/index.csp</GeneratedBy>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..OnPageCSPROOT()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPageBODY">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Write "<body>"
	Write !,"    "
	Write "<div class=""container-fluid"">"
	Write !,"        "
	Write "<div class=""navbar"">"
	Write !,"          "
	Write "<div class=""navbar-inner"">"
	Write !,"            "
	Write "<div class=""container"">"
	Write !,"             ",!
	Write "              "
	Write "<a class=""brand"" href="""" ng-bind=""menu.brandCaption|localize"">"
	Write "</a>"
	Write !,"             "
	Write "<!-- ",!
	Write "              <div class=""brand"" href="""" style=""padding: 4px;"">",!
	Write "              	<img src=""img/brand.gif"" width=""100px""/>",!
	Write "              	<div style=""display: inline; vertical-align: middle;"">",!
	Write "              	<span style=""display: inline-table; margin-top: 1px;"">СМК</span>",!
	Write "              	</div>",!
	Write "              </div>",!
	Write "              -->"
	Write !,"              "
	Write "<div class=""nav-responsive-collapse"" ng-hide=""menu.hide"">"
	Write !,!,"                <ul class=""nav"">",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.createOrder.css"" >"
	Write "<a href=""#/createorder"" ng-bind=""menu.createOrder.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.orders.css""      >"
	Write "<a href=""#/orders"" ng-bind=""menu.orders.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.trainings.css""   >"
	Write "<a href=""#/trainings"" ng-bind=""menu.trainings.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.certificates.css"">"
	Write "<a href=""#/certificates"" ng-bind=""menu.certificates.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.companies.css""   >"
	Write "<a href=""#/companies"" ng-bind=""menu.companies.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.persons.css""     >"
	Write "<a href=""#/persons"" ng-bind=""menu.persons.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  <li ng-show=""menu.admin"" ng-class=""menu.courses.css""     >"
	Write "<a href=""#/courses"" ng-bind=""menu.courses.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  ",!
	Write "                  ",!
	Write "                  <li ng-show=""menu.admin"" class=""dropdown"" ng-class=""'dropdown ' + menu.analytics.css"">",!
	Write "                    "
	Write "<a href=""#/analytics/pointsmap"">"
	Write "<span ng-bind=""(menu.analytics.name|localize) + ' '"">"
	Write "</span>"
	Write "<b class=""caret""></b>"
	Write "</a>"
	Write !,"                    <ul class=""dropdown-menu"">",!
	Write "                      <li ng-class=""{aSelected: menu.analyticsMap.css=='active'}"">"
	Write "<a href=""#/analytics/pointsmap"" ng-bind=""menu.analyticsMap.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                      <li ng-class=""{aSelected: menu.analyticsCourse.css=='active'}"">"
	Write "<a href=""#/analytics/course"" ng-bind=""menu.analyticsCourse.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                      <li ng-class=""{aSelected: menu.analyticsTeacher.css=='active'}"">"
	Write "<a href=""#/analytics/teacher"" ng-bind=""menu.analyticsTeacher.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                      <li ng-class=""{aSelected: menu.analyticsCompany.css=='active'}"">"
	Write "<a href=""#/analytics/company"" ng-bind=""menu.analyticsCompany.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                    </ul>",!
	Write "                  </li>",!
	Write "                ",!
	Write "                <li ng-show=""menu.admin && !menu.readOnlyMode"" ng-class=""menu.settings.css""    >"
	Write "<a href=""#/settings"" ng-bind=""menu.settings.name|localize"">"
	Write "</a>"
	Write "</li>",!
	Write "                  ",!
	Write "                </ul>",!
	Write !,"                 <ul class=""nav pull-right"">",!
	Write "                  <li class=""dropdown"">",!
	Write "                    "
	Write "<a class=""dropdown-toggle"" data-toggle=""dropdown"" title=""{{'Язык системы'|localize}} "" href="""">"
	Write "<span ng-bind=""menu.lang.name + ' '"">"
	Write "</span>"
	Write "<b class=""caret""></b>"
	Write "</a>"
	Write !,"                    <ul class=""dropdown-menu"">",!
	Write "                      <li ng-repeat=""lang in menu.languages"">"
	Write "<a ng-class=""{aSelected: menu.lang==lang}"" ng-click=""menu.switchLang(lang.id)"" href="""" ng-bind=""lang.name"">"
	Write "</a>"
	Write "</li>",!
	Write "                    </ul>",!
	Write "                  </li>",!
	Write "                  <li>"
	Write "<a ng-click=""menu.login()"" href="""" ng-bind=""menu.loginCaption|localize"">"
	Write "</a>"
	Write "</li>   ",!
	Write "                 </ul>    ",!
	Write "              "
	Write "</div>"
	Write !,!,"            "
	Write "</div>"
	Write !,"          "
	Write "</div>"
	Write !,"        "
	Write "</div>"
	Write !,"       ",!
	Write "      "
	Write "<div ng-view>"
	Write !,"      "
	Write "</div>"
	Write !,!,"    "
	Write "</div>"
	Write !,!,"   	"
	Write "<script language=""javascript"">"
	Write !," 	jQuery('ul.nav li.dropdown').hover(function() {",!
	Write "	          jQuery(this).find('.dropdown-menu').stop(true, true).delay(250).show(200);",!
	Write "            }, function() {",!
	Write "              jQuery(this).find('.dropdown-menu').stop(true, true).delay(50).hide(50);",!
	Write "            });",!
	Write "         ",!
	Write "   "
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/MainCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/TrainingCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/AllTrainingsCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/CreateTrainingCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/UpdateOrderCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/CreateOrderCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/OrderNewStudentCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/AllOrdersCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/AllCompaniesCtrl.js"">"
	Write "</script>"
	Write !,"	  "
	Write "<script language=""javascript"" src=""js/controllers/CompanyCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/AllCertificatesCtrl.js"">"
	Write "</script>"
	Write !,"	  "
	Write "<script language=""javascript"" src=""js/controllers/PersonCtrl.js"">"
	Write "</script>"
	Write !,"	  "
	Write "<script language=""javascript"" src=""js/controllers/AllPersonsCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/AllCoursesCtrl.js"">"
	Write "</script>"
	Write "    ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/controllers/CourseCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/TrainingStudentsCtrl.js"">"
	Write "</script>"
	Write !,"     "
	Write "<script language=""javascript"" src=""js/controllers/FeedBackCtrl.js"">"
	Write "</script>"
	Write !,"   "
	Write "<script language=""javascript"" src=""js/controllers/DeepSeeCtrl.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/controllers/SettingsCtrl.js"">"
	Write "</script>"
	Write !,!,!,"    "
	Write "<script language=""javascript"" src=""js/services/DALSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/YandexSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/TrainingSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/OrderSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/CourseTeacherSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/RegionSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/CompanySrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/CertificateSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/PersonSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/UtilsSrvc.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""js/services/ReportSrvc.js"">"
	Write "</script>"
	Write !,"	"
	Write "<script language=""javascript"" src=""js/services/SettingsSrvc.js"">"
	Write "</script>"
	Write !,"	",!
	Write "	  "
	Write "<script language=""javascript"" src=""js/directives/stcalert.js"">"
	Write "</script>"
	Write " ",!
	Write "	  "
	Write "<script language=""javascript"" src=""js/directives/stcalertlabel.js"">"
	Write "</script>"
	Write " ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/directives/stctraining.js"">"
	Write "</script>"
	Write " ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/directives/stcgrid.js"">"
	Write "</script>"
	Write " ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/directives/stcperson.js"">"
	Write "</script>"
	Write " ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/directives/stccompany.js"">"
	Write "</script>"
	Write " ",!
	Write "    ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/localization/filter.js"">"
	Write "</script>"
	Write !,!,"    "
	Write "<script language=""javascript"" src=""js/filters/cacheDate.js"">"
	Write "</script>"
	Write !,!,"    "
	Write "<script language=""javascript"" src=""lib/ui-bootstrap-tpls-0.5.0.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""lib/bootstrap-modal.js"">"
	Write "</script>"
	Write !,"  "
	Write "</body>"
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Write "<!doctype html>"
	Write !,!
	Do ..OnPageHTML()
]]></Implementation>
</Method>

<Method name="OnPageHEAD">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Write "<head>"
	Write !,"    <title ng-bind=""menu.appTitle|localize""></title>",!
	Write "    "
	Write "<link rel=""shortcut icon"" href=""img/icon.ico"" type=""image/x-icon"">"
	Write !,"    "
	Write "<meta charset=""utf-8"">"
	Write !,"    "
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1"">"
	Write !,!,"	"
	Write "<script language=""javascript"">"
	Write !,"	var urlData = '"_(%request.Get("urlData"))_"';",!
	Write "	",!
	Write "  "
	Write "</script>"
	Write !,"	",!
	Write "    "
	Write "<link rel=""stylesheet"" type=""text/css"" href=""css/bootstrap.min.css"">"
	Write !,"    "
	Write "<link rel=""stylesheet"" type=""text/css"" href=""font-awesome/css/font-awesome.min.css"">"
	Write !,"    "
	Write "<link rel=""stylesheet"" type=""text/css"" href=""css/custom.css"">"
	Write !,"  ",!
	Write "    "
	Write "<script language=""javascript"" src=""lib/bootstrap.min.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""lib/jquery-1.7.2.min.js"">"
	Write "</script>"
	Write !,"    ",!
	Write "    "
	Write "<script language=""javascript"" src=""lib/angular/angular.min.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""lib/angular/angular-resource.min.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""lib/angular/angular-cookies.min.js"">"
	Write "</script>"
	Write !,"    "
	Write "<script language=""javascript"" src=""lib/angular/angular-sanitize.min.js"">"
	Write "</script>"
	Write !,"    ",!
	Write "    "
	Write "<script language=""javascript"" src=""js/app.js"">"
	Write "</script>"
	Write "  ",!
	Write "    	",!
	Write "   	"
	Write "<script language=""javascript"">"
	Write !,!,"       	function getLocale() {",!
	Write "      			if (navigator) {",!
	Write "          			if (navigator.language) {",!
	Write "              			return navigator.language;",!
	Write "          			}",!
	Write "          			else if (navigator.browserLanguage) {",!
	Write "              			return navigator.browserLanguage;",!
	Write "          			}",!
	Write "          			else if (navigator.systemLanguage) {",!
	Write "              			return navigator.systemLanguage;",!
	Write "         	    	}",!
	Write "          			else if (navigator.userLanguage) {",!
	Write "              		    return navigator.userLanguage;",!
	Write "          			}",!
	Write "      			}",!
	Write "    		}",!
	Write !,"      	function getCookie(name) {",!
	Write "  	    	  var matches = document.cookie.match(new RegExp(""(?:^|; )"" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + ""=([^;]*)""))",!
	Write "  	    	  return matches ? decodeURIComponent(matches[1]) : undefined",!
	Write "  		  }",!
	Write "  		",!
	Write "  	    function getLang(){",!
	Write "            var lang = getCookie('lang');",!
	Write "            ",!
	Write "            if (lang) ",!
	Write "              return lang;",!
	Write !,"			/*",!
	Write "			switch(getLocale()){",!
	Write "              case 'en-US':",!
	Write "              case 'en':",!
	Write "                return 'en-US';",!
	Write "            }",!
	Write "            */",!
	Write "            ",!
	Write "            return 'ru-RU';",!
	Write "        }",!
	Write !,!,"        // Настройки приложения. Имена веб-приложений для REST, google календарь, язык",!
	Write "        var StcAppSetting = {default: '"_($GET(^Settings("Stc", "WebApp")))_"',",!
	Write "	        				           admin: '"_($GET(^Settings("Stc", "WebAppAdmin")))_"',",!
	Write "                             user:  '"_($GET(^Settings("Stc", "WebAppUser")))_"',",!
	Write "                             lang: getLang()};",!
	Write !,"        document.write('<script language=""javascript"" src=""js/localization/locale_' + StcAppSetting.lang + '.js""><\/script>'); ",!
	Write !,"    "
	Write "</script>"
	Write !,"  "
	Write "</head>"
]]></Implementation>
</Method>

<Method name="OnPageHTML">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Write "<html ng-app=""mainModule"" ng-controller=""MainCtrl"">"
	Write !,"  "
	Do ..OnPageHEAD()
	Write !,"  "
	Do ..OnPageBODY()
	Write !,"</html>"
]]></Implementation>
</Method>

<Parameter name="CSPFILE">
<Default>/InterSystems/Cache/csp/stc/stc/index.csp</Default>
</Parameter>

<Parameter name="CSPURL">
<Default>/csp/stc/stc/index.csp</Default>
</Parameter>

<Parameter name="FileTimestamp">
<Default>63269,63551</Default>
</Parameter>
</Class>


<Class name="Stc.Web.Report">
<Description>
Reports</Description>
<TimeCreated>63138,24459.241313</TimeCreated>

<Parameter name="ContentType">
<Default>plain/text</Default>
</Parameter>

<Parameter name="CharSet">
<Default>windows-1251</Default>
</Parameter>

<Method name="Certificates">
<Description>
Report, certificates of training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trainingKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set %response.ContentType = ..#ContentType
    set %response.CharSet = ..#CharSet
    
    set status = $$$OK
    
    try{
        set training = ##class(Stc.Data.Training).%OpenId(trainingKey,,.status)
        if $$$ISERR(status){
            set training = ##class(Stc.Data.Training).AccessCodeIdxOpen(trainingKey,,.status)
        }
        
        $$$THROWONERROR(status, status)
        
        set trainingId = training.%Id()
        
        set course = ##class(Stc.Data.Localization.LTextValue).GetValue(training.Course.Name.%Id(), lang)
        set city = ##class(Stc.Data.Localization.LTextValue).GetValue(training.City.Name.%Id(), lang)
        set date = $ZDATE($NOW(),3)
        
        set fileName = ##class(%MessageDictionary).FormatText($G(^CacheMsg("Stc", lang, "certificatesReport"),"---"), course, city, date)_".csv"

        if ($FIND(%request.UserAgent, "Firefox") '= 0) {
            set fileName = $REPLACE(fileName, " ", "_")
        }       
        
        do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)

        &sql(DECLARE CertCur CURSOR FOR 
             SELECT Number, Student->LastName, Student->FirstName, Student->MiddleName
             FROM Stc_Data.Certificate
             WHERE Training = :trainingId)  
        
        &sql(OPEN CertCur)
        for  
        {   
            &sql(FETCH CertCur INTO :number, :lnameId, :fnameId, :mnameId) 
            quit:(SQLCODE '= 0)
            
            set lname = ##class(Stc.Data.Localization.LTextValue).GetValue(lnameId, lang)
            set fname = ##class(Stc.Data.Localization.LTextValue).GetValue(fnameId, lang)
            set mname = ##class(Stc.Data.Localization.LTextValue).GetValue(mnameId, lang)
            if (lang = "ru"){
                w number_";"_lname_";"_fname_";"_mname,!
            }
            else{
                w number_";"_fname_";"_lname,!
            }
        }
        
        &sql(CLOSE CertCur)
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    q status
]]></Implementation>
</Method>

<Method name="Students">
<Description>
Report, students of training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trainingAccessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set %response.ContentType = ..#ContentType
    set %response.CharSet = ..#CharSet
    
    set status = $$$OK
    
    try{
        set training = ##class(Stc.Data.Training).AccessCodeIdxOpen(trainingAccessCode)
        $$$THROWONERROR(status, status)
        
        set course = ##class(Stc.Data.Localization.LTextValue).GetValue(training.Course.Name.%Id(), lang)
        set city = ##class(Stc.Data.Localization.LTextValue).GetValue(training.City.Name.%Id(), lang)
        set date = $ZDATE(training.DateStart,3)
        
        set fileName = ##class(%MessageDictionary).FormatText($G(^CacheMsg("Stc", lang, "studentsReport"),"---"), course, city, date)_".csv"

        if ($FIND(%request.UserAgent, "Firefox") '= 0) {
            set fileName = $REPLACE(fileName, " ", "_")
        }       
        
        do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)

        &sql(DECLARE StudCur CURSOR FOR 
             SELECT Student->LastName,
             Student->FirstName,
             Student->MiddleName,
             Student->Company->ShortName,
             Student->Email,
             Student->Phone,
             Student->Skype 
             FROM Stc_Data.SubGroupStudent
             WHERE SubGroup IN (SELECT SubGroups FROM Stc_Data.Training_SubGroups WHERE Training->AccessCode = :trainingAccessCode)
             ORDER BY Student->Company->ShortName) 
        
        &sql(OPEN StudCur)
        for  
        {   
            &sql(FETCH StudCur INTO :lnameId, :fnameId, :mnameId, :compNameId, :email, :phone, :skype) 
            quit:(SQLCODE '= 0)
            
            set lname = ##class(Stc.Data.Localization.LTextValue).GetValue(lnameId, lang)
            set fname = ##class(Stc.Data.Localization.LTextValue).GetValue(fnameId, lang)
            set mname = ##class(Stc.Data.Localization.LTextValue).GetValue(mnameId, lang)
            set compName = ##class(Stc.Data.Localization.LTextValue).GetValue(compNameId, lang)
            
            w lname_";"_fname_";"_mname_";"_compName_";"_email_";"_phone_";"_skype,!
        }
        
        &sql(CLOSE StudCur)
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    q status
]]></Implementation>
</Method>

<Method name="OrderNewStudents">
<Description>
Report, ordernewstudents of training</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trainingAccessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set %response.ContentType = ..#ContentType
    set %response.CharSet = ..#CharSet
    
    set status = $$$OK
    
    try{
        set training = ##class(Stc.Data.Training).AccessCodeIdxOpen(trainingAccessCode,,.status)
        $$$THROWONERROR(status, status)
        
        set course = ##class(Stc.Data.Localization.LTextValue).GetValue(training.Course.Name.%Id(), lang)
        set city = ##class(Stc.Data.Localization.LTextValue).GetValue(training.City.Name.%Id(), lang)
        set date = $ZDATE(training.DateStart,3)
        
        set fileName = ##class(%MessageDictionary).FormatText($G(^CacheMsg("Stc", lang, "ordernewstudentsReport"),"--ordernewstudentsReport--"), course, city, date)_".csv"
        
        if ($FIND(%request.UserAgent, "Firefox") '= 0) {
            set fileName = $REPLACE(fileName, " ", "_")
        }       
        
        do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)
    
        &sql(DECLARE OrdNewStudCur CURSOR FOR 
             SELECT 
             LastName,
             FirstName,
             MiddleName,
             CompanyString,
             Email,
             Phone,
             Skype 
             FROM Stc_Data.OrderNewStudent
             WHERE Training->AccessCode = :trainingAccessCode
             ORDER BY CompanyString) 
        
        &sql(OPEN OrdNewStudCur)
        for  
        {   
            &sql(FETCH OrdNewStudCur INTO :lnameId, :fnameId, :mnameId, :compName, :email, :phone, :skype) 
            quit:(SQLCODE '= 0)
            
            set lname = ##class(Stc.Data.Localization.LTextValue).GetValue(lnameId, lang)
            set fname = ##class(Stc.Data.Localization.LTextValue).GetValue(fnameId, lang)
            set mname = ##class(Stc.Data.Localization.LTextValue).GetValue(mnameId, lang)
            
            w lname_";"_fname_";"_mname_";"_compName_";"_email_";"_phone_";"_skype,!
        }
        
        &sql(CLOSE OrdNewStudCur)
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    q status
]]></Implementation>
</Method>
</Class>
</Export>
